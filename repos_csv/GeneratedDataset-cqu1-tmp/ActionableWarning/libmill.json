[
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/debug.c",
    "line_number": "158",
    "column_number": "32",
    "info": "Assignment \u0027ch\u003dit?((struct mill_chan*)(((char*)it)-offsetof(struct mill_chan,debug.item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "93fc4e25b21d808c0a531e3f08d14d1417d88751",
    "commit_id_repair": "9fbd973c9503998ed82cf0615bd7d5ab7898203e",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "d21e5ec40869e6513b3248d3f47aa71e33226c3376bf83832a36ef383d5978e8",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/debug.c",
    "line_number": "158",
    "column_number": "32",
    "info": "Assignment \u0027ch\u003dit?((struct mill_chan*)(((char*)it)-offsetof(struct mill_chan,debug.item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "93fc4e25b21d808c0a531e3f08d14d1417d88751",
    "commit_id_repair": "9fbd973c9503998ed82cf0615bd7d5ab7898203e",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "d21e5ec40869e6513b3248d3f47aa71e33226c3376bf83832a36ef383d5978e8",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/debug.c",
    "line_number": "158",
    "column_number": "32",
    "info": "Assignment \u0027ch\u003dit?((struct mill_chan*)(((char*)it)-offsetof(struct mill_chan,debug.item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "93fc4e25b21d808c0a531e3f08d14d1417d88751",
    "commit_id_repair": "9fbd973c9503998ed82cf0615bd7d5ab7898203e",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "d21e5ec40869e6513b3248d3f47aa71e33226c3376bf83832a36ef383d5978e8",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "failed to expand \u0027mill_longjmp_\u0027, Wrong number of parameters for macro \u0027mill_longjmp_\u0027.",
    "file_path": "tmp_github/libmill/cr.c",
    "line_number": "127",
    "column_number": "0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "8e1fdedffb9094bf2c996631fd583e3d91b793fa",
    "commit_id_repair": "f3303155e552ef14e516b81c9886218afa2ac9e3",
    "warning_message": "failed to expand \u0027mill_longjmp_\u0027, Wrong number of parameters for macro \u0027mill_longjmp_\u0027.",
    "hash_id": "1e750e4e2c82e5744f9cd3a8cfbeafdcd03e7b263d56fbee7fb0dff4b96f9dce",
    "bug_severity": "error",
    "bug_type": "preprocessorErrorDirective"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: mill_running",
    "cwe": "476",
    "file_path": "tmp_github/libmill/cr.c",
    "line_number": "125",
    "column_number": "13",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "3f2a2f633c5cdb29f810d9f0ff0610c828d21072",
    "commit_id_repair": "8e1fdedffb9094bf2c996631fd583e3d91b793fa",
    "warning_message": "Possible null pointer dereference: mill_running",
    "hash_id": "107aae19b0884af1950c8e5697edaedc662be1a58204b8213dee84f8c9883de9",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: mill_running",
    "cwe": "476",
    "file_path": "tmp_github/libmill/cr.c",
    "line_number": "124",
    "column_number": "28",
    "info": "Assignment \u0027mill_running\u003dit?((struct mill_cr*)(((char*)it)-offsetof(struct mill_cr,ready))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "3f2a2f633c5cdb29f810d9f0ff0610c828d21072",
    "commit_id_repair": "8e1fdedffb9094bf2c996631fd583e3d91b793fa",
    "warning_message": "Possible null pointer dereference: mill_running",
    "hash_id": "0dc84e97b55abb661ab6e1f08b80d3452452baae000c79ec2c30ee80e1e9bf3a",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "failed to expand \u0027mill_longjmp_\u0027, Wrong number of parameters for macro \u0027mill_longjmp_\u0027.",
    "file_path": "tmp_github/libmill/cr.c",
    "line_number": "127",
    "column_number": "0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "c9e9a44384ea03f9eda09bb0f809a838c0362c10",
    "commit_id_repair": "e9f88d39dad81b3dd25314e34fa0063aef0be59b",
    "warning_message": "failed to expand \u0027mill_longjmp_\u0027, Wrong number of parameters for macro \u0027mill_longjmp_\u0027.",
    "hash_id": "1e750e4e2c82e5744f9cd3a8cfbeafdcd03e7b263d56fbee7fb0dff4b96f9dce",
    "bug_severity": "error",
    "bug_type": "preprocessorErrorDirective"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: mill_running",
    "cwe": "476",
    "file_path": "tmp_github/libmill/cr.c",
    "line_number": "114",
    "column_number": "13",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "0e38bdd7bdeffeeaf33b088af122c97687022bf2",
    "commit_id_repair": "44b5318b2b50ef5f83e16b395bcb118f441f92b4",
    "warning_message": "Possible null pointer dereference: mill_running",
    "hash_id": "107aae19b0884af1950c8e5697edaedc662be1a58204b8213dee84f8c9883de9",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: mill_running",
    "cwe": "476",
    "file_path": "tmp_github/libmill/cr.c",
    "line_number": "113",
    "column_number": "28",
    "info": "Assignment \u0027mill_running\u003dit?((struct mill_cr*)(((char*)it)-offsetof(struct mill_cr,ready))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "0e38bdd7bdeffeeaf33b088af122c97687022bf2",
    "commit_id_repair": "44b5318b2b50ef5f83e16b395bcb118f441f92b4",
    "warning_message": "Possible null pointer dereference: mill_running",
    "hash_id": "0dc84e97b55abb661ab6e1f08b80d3452452baae000c79ec2c30ee80e1e9bf3a",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!ch\u0027 is redundant or there is possible null pointer dereference: ch.",
    "cwe": "476",
    "file_path": "tmp_github/libmill/chan.c",
    "line_number": "138",
    "column_number": "8",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6da3474735af19755fd5295ad961a6ca7e3da860",
    "commit_id_repair": "e4a1d4a69886fe45ae7fdcaad34c8685bd459416",
    "warning_message": "Either the condition \u0027!ch\u0027 is redundant or there is possible null pointer dereference: ch.",
    "hash_id": "5cd2869c19f0087c15dfb171af3b852254b503329da28b0e41bfcd4ffa63fa12",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!ch\u0027 is redundant or there is possible null pointer dereference: ch.",
    "cwe": "476",
    "file_path": "tmp_github/libmill/chan.c",
    "line_number": "136",
    "column_number": "8",
    "info": "Assuming that condition \u0027!ch\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6da3474735af19755fd5295ad961a6ca7e3da860",
    "commit_id_repair": "e4a1d4a69886fe45ae7fdcaad34c8685bd459416",
    "warning_message": "Either the condition \u0027!ch\u0027 is redundant or there is possible null pointer dereference: ch.",
    "hash_id": "d082303767d3cd70be43d00595a77c03080cfb5dbf6f78e7b5a2c6553f042d35",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!ch\u0027 is redundant or there is possible null pointer dereference: ch.",
    "cwe": "476",
    "file_path": "tmp_github/libmill/chan.c",
    "line_number": "169",
    "column_number": "8",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6da3474735af19755fd5295ad961a6ca7e3da860",
    "commit_id_repair": "e4a1d4a69886fe45ae7fdcaad34c8685bd459416",
    "warning_message": "Either the condition \u0027!ch\u0027 is redundant or there is possible null pointer dereference: ch.",
    "hash_id": "5cd2869c19f0087c15dfb171af3b852254b503329da28b0e41bfcd4ffa63fa12",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!ch\u0027 is redundant or there is possible null pointer dereference: ch.",
    "cwe": "476",
    "file_path": "tmp_github/libmill/chan.c",
    "line_number": "167",
    "column_number": "8",
    "info": "Assuming that condition \u0027!ch\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6da3474735af19755fd5295ad961a6ca7e3da860",
    "commit_id_repair": "e4a1d4a69886fe45ae7fdcaad34c8685bd459416",
    "warning_message": "Either the condition \u0027!ch\u0027 is redundant or there is possible null pointer dereference: ch.",
    "hash_id": "d082303767d3cd70be43d00595a77c03080cfb5dbf6f78e7b5a2c6553f042d35",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/timer.c",
    "line_number": "72",
    "column_number": "12",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "5fd2da00f4476de4944a4db7129ec8a19774f7ce",
    "commit_id_repair": "7ecb28867d1172b30134627a0dbec37144545342",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "ccfb8a3b78f4fab8595fb13751a9ea2e1e35d6c07d81ef6304a75a716d498bb1",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/timer.c",
    "line_number": "69",
    "column_number": "30",
    "info": "Assignment \u0027cr\u003dit?((struct mill_cr*)(((char*)it)-offsetof(struct mill_cr,timer))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "5fd2da00f4476de4944a4db7129ec8a19774f7ce",
    "commit_id_repair": "7ecb28867d1172b30134627a0dbec37144545342",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "0a5869d8c5794917741c8bae97433d8b19fbe0048b717b1a9adfca602921eeb4",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/poller.c",
    "line_number": "74",
    "column_number": "16",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "4c6ef85f549614be81f617cc240c0977572af63a",
    "commit_id_repair": "aa5394d4a7b7278923712a2a8486d4b1c7642993",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "e85cc5a657b59835c0afcd6eb31cd1b2675bd49411fedf25dd36c985b2eed3de",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/poller.c",
    "line_number": "71",
    "column_number": "34",
    "info": "Assignment \u0027cr\u003dit?((struct mill_cr*)(((char*)it)-offsetof(struct mill_cr,timer))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "4c6ef85f549614be81f617cc240c0977572af63a",
    "commit_id_repair": "aa5394d4a7b7278923712a2a8486d4b1c7642993",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "05e7cfa81b7d1a47b92ff1c4adcafc2681a84fe58dd81b9123dc1b8c090a7e2a",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: timer",
    "cwe": "476",
    "file_path": "tmp_github/libmill/poller.c",
    "line_number": "74",
    "column_number": "16",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "02c4cdb1e05ec0b339b903ea3f544243123f1dc1",
    "commit_id_repair": "335d2dc0efe4da827cca1350611209b547bd46fd",
    "warning_message": "Possible null pointer dereference: timer",
    "hash_id": "b9fb7bb39e9fdc98af5f6c753a5155ed3d69249d3dac7ed056bd0138ecb81491",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: timer",
    "cwe": "476",
    "file_path": "tmp_github/libmill/poller.c",
    "line_number": "71",
    "column_number": "41",
    "info": "Assignment \u0027timer\u003dit?((struct mill_fdwait*)(((char*)it)-offsetof(struct mill_fdwait,item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "02c4cdb1e05ec0b339b903ea3f544243123f1dc1",
    "commit_id_repair": "335d2dc0efe4da827cca1350611209b547bd46fd",
    "warning_message": "Possible null pointer dereference: timer",
    "hash_id": "5abb071d083e978066cadd2110ad1c44122352e8ad990e7855b974e9d91c0ea6",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027maxfds\u003c0\u0027 is redundant or calloc() argument nr 1 can have invalid value. The value is -1 but the valid values are \u00270:\u0027.",
    "cwe": "628",
    "file_path": "tmp_github/libmill/kqueue.inc",
    "line_number": "68",
    "column_number": "16",
    "info": "Invalid argument",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "8b25db8ba3d109ae17741638ebcc335c26009cdf",
    "commit_id_repair": "5d31f6fadd3d7918cce6bae520e9a540e1bb0771",
    "warning_message": "Either the condition \u0027maxfds\u003c0\u0027 is redundant or calloc() argument nr 1 can have invalid value. The value is -1 but the valid values are \u00270:\u0027.",
    "hash_id": "b11b5c4c3c13ad03c42a09c789a6540089ecc66fcb5704e0897a0c3880dc5b93",
    "bug_severity": "warning",
    "bug_type": "invalidFunctionArg"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027maxfds\u003c0\u0027 is redundant or calloc() argument nr 1 can have invalid value. The value is -1 but the valid values are \u00270:\u0027.",
    "cwe": "628",
    "file_path": "tmp_github/libmill/kqueue.inc",
    "line_number": "65",
    "column_number": "15",
    "info": "Assuming that condition \u0027maxfds\u003c0\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "8b25db8ba3d109ae17741638ebcc335c26009cdf",
    "commit_id_repair": "5d31f6fadd3d7918cce6bae520e9a540e1bb0771",
    "warning_message": "Either the condition \u0027maxfds\u003c0\u0027 is redundant or calloc() argument nr 1 can have invalid value. The value is -1 but the valid values are \u00270:\u0027.",
    "hash_id": "81ef384e54f120da54ca9c28f7acb52dcc4f60b0ea714bf6b6202c938aa3027f",
    "bug_severity": "warning",
    "bug_type": "invalidFunctionArg"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: timer",
    "cwe": "476",
    "file_path": "tmp_github/libmill/poll.inc",
    "line_number": "73",
    "column_number": "16",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "b45d02044fb5415fbe60fcd55dc846aa23d2b81b",
    "commit_id_repair": "5d9e854e7f448f4cbdf42262945c5de637eab7af",
    "warning_message": "Possible null pointer dereference: timer",
    "hash_id": "5bb11a0d8fc79d95e7046135be3da1998f105e513a811721b5927dcd7299ba53",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: timer",
    "cwe": "476",
    "file_path": "tmp_github/libmill/poll.inc",
    "line_number": "70",
    "column_number": "41",
    "info": "Assignment \u0027timer\u003dit?((struct mill_fdwait*)(((char*)it)-offsetof(struct mill_fdwait,item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "b45d02044fb5415fbe60fcd55dc846aa23d2b81b",
    "commit_id_repair": "5d9e854e7f448f4cbdf42262945c5de637eab7af",
    "warning_message": "Possible null pointer dereference: timer",
    "hash_id": "ebfe6ba98269cb34f0f00925b02e41f330b8b229e7f97719c8606608c31eaa53",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: timer",
    "cwe": "476",
    "file_path": "tmp_github/libmill/epoll.inc",
    "line_number": "83",
    "column_number": "16",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "bfcabebfc27c38900a3b9f194de5a38bcc2069f3",
    "commit_id_repair": "be5d2445bbbbe45c2943226c68fac15236de777b",
    "warning_message": "Possible null pointer dereference: timer",
    "hash_id": "2d837009fb369ec2a939a65ed4cbb1a3e9bc02d1176abdb6461979a2b355ac38",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: timer",
    "cwe": "476",
    "file_path": "tmp_github/libmill/epoll.inc",
    "line_number": "80",
    "column_number": "41",
    "info": "Assignment \u0027timer\u003dit?((struct mill_fdwait*)(((char*)it)-offsetof(struct mill_fdwait,item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "bfcabebfc27c38900a3b9f194de5a38bcc2069f3",
    "commit_id_repair": "be5d2445bbbbe45c2943226c68fac15236de777b",
    "warning_message": "Possible null pointer dereference: timer",
    "hash_id": "44eb21e28a06a742f472044376059ba3821d1c1ef5d13a3b60da7f56bf03dd25",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027mill_pollset_fds\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/libmill/poller.c",
    "line_number": "96",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "811d67fd32449f0df5c682d2f6617eafb2c5aaa3",
    "commit_id_repair": "e3d8bbb784db3f62c17c72ba1fcb7fe75ebef773",
    "warning_message": "Common realloc mistake: \u0027mill_pollset_fds\u0027 nulled but not freed upon failure",
    "hash_id": "c4691818fe66e78f5c502707f352062822e8ac5ab93622140bc51b3963b02883",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027mill_pollset_items\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/libmill/poller.c",
    "line_number": "98",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "811d67fd32449f0df5c682d2f6617eafb2c5aaa3",
    "commit_id_repair": "e3d8bbb784db3f62c17c72ba1fcb7fe75ebef773",
    "warning_message": "Common realloc mistake: \u0027mill_pollset_items\u0027 nulled but not freed upon failure",
    "hash_id": "99d07d74106638686e2d82d511f309320cd7454bf3c9d44f6abfd46c7f614c33",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: timer",
    "cwe": "476",
    "file_path": "tmp_github/libmill/poller.c",
    "line_number": "82",
    "column_number": "16",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "811d67fd32449f0df5c682d2f6617eafb2c5aaa3",
    "commit_id_repair": "e3d8bbb784db3f62c17c72ba1fcb7fe75ebef773",
    "warning_message": "Possible null pointer dereference: timer",
    "hash_id": "b9fb7bb39e9fdc98af5f6c753a5155ed3d69249d3dac7ed056bd0138ecb81491",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: timer",
    "cwe": "476",
    "file_path": "tmp_github/libmill/poller.c",
    "line_number": "79",
    "column_number": "41",
    "info": "Assignment \u0027timer\u003dit?((struct mill_fdwait*)(((char*)it)-offsetof(struct mill_fdwait,item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "811d67fd32449f0df5c682d2f6617eafb2c5aaa3",
    "commit_id_repair": "e3d8bbb784db3f62c17c72ba1fcb7fe75ebef773",
    "warning_message": "Possible null pointer dereference: timer",
    "hash_id": "5abb071d083e978066cadd2110ad1c44122352e8ad990e7855b974e9d91c0ea6",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!ptr\u0027 is redundant or there is pointer arithmetic with NULL pointer.",
    "cwe": "682",
    "file_path": "tmp_github/libmill/stack.c",
    "line_number": "111",
    "column_number": "16",
    "info": "Null pointer addition",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "bff73aa502e8fce74b83ef3c37b20cea56fe7e7f",
    "commit_id_repair": "afa38104875e912e7ed23b1105e18c75737ea126",
    "warning_message": "Either the condition \u0027!ptr\u0027 is redundant or there is pointer arithmetic with NULL pointer.",
    "hash_id": "cc7871fe56b095c94cdfa33eb5f3e1b0abd8de4619e5c86d15d62191e8f030d8",
    "bug_severity": "warning",
    "bug_type": "nullPointerArithmeticRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!ptr\u0027 is redundant or there is pointer arithmetic with NULL pointer.",
    "cwe": "682",
    "file_path": "tmp_github/libmill/stack.c",
    "line_number": "109",
    "column_number": "8",
    "info": "Assuming that condition \u0027!ptr\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "bff73aa502e8fce74b83ef3c37b20cea56fe7e7f",
    "commit_id_repair": "afa38104875e912e7ed23b1105e18c75737ea126",
    "warning_message": "Either the condition \u0027!ptr\u0027 is redundant or there is pointer arithmetic with NULL pointer.",
    "hash_id": "c73ab554f4db7922b449f8eee8a1d577223339fac468935d05f42616c3bf0309",
    "bug_severity": "warning",
    "bug_type": "nullPointerArithmeticRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "syntax error: 45a2afc50c22e92c295291314869c3a8414ac0f7 typedef",
    "file_path": "tmp_github/libmill/ip.c",
    "line_number": "50",
    "column_number": "1",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dd7ed8db14179ec8d950a5cb1d45141cf7f384f7",
    "commit_id_repair": "b34df351c8eac38f79dddf76707e2675684344bd",
    "warning_message": "syntax error: 45a2afc50c22e92c295291314869c3a8414ac0f7 typedef",
    "hash_id": "0af8f1595b7725db3afd7da9570ac91e256e9544218c05638282da5ac257d6e4",
    "bug_severity": "error",
    "bug_type": "syntaxError"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Uninitialized variable: addr",
    "cwe": "457",
    "file_path": "tmp_github/libmill/ip.c",
    "line_number": "48",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "67622a72818600d91da1457f98db79a0519c779b",
    "commit_id_repair": "dd7ed8db14179ec8d950a5cb1d45141cf7f384f7",
    "warning_message": "Uninitialized variable: addr",
    "hash_id": "217366f6a71938a9b15f9a6fb8d02407713f34013d88398da30b2ec6542805de",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "42",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "48",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "71",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "78",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "86",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "88",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "103",
    "column_number": "20",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "109",
    "column_number": "23",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "117",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "119",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "122",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "126",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "128",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "135",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "137",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "139",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "144",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "146",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "152",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "154",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "156",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "162",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "164",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "174",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "176",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f017df438dbbc3a1347e9d5fb72f6926a206093dcc19ece72b1569c1af96fdd2",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/choose.c",
    "line_number": "41",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "4c565848abc6c8fcfed29f6ac733f9538c422d2d30ddb9a14582a0aa2333e47e",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/choose.c",
    "line_number": "48",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "4c565848abc6c8fcfed29f6ac733f9538c422d2d30ddb9a14582a0aa2333e47e",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/choose.c",
    "line_number": "262",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "dad996938b5d3e94ed7cf8026fce37121fceff07",
    "commit_id_repair": "cf24d6cebbf88ba60c3e95e5f9d8f0691faec3a9",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "4c565848abc6c8fcfed29f6ac733f9538c422d2d30ddb9a14582a0aa2333e47e",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cl",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "372",
    "column_number": "16",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "89e7d9e3503da7550927ca4ebc5e80a8eb194ef3",
    "commit_id_repair": "8c15997f9f6bc6a5201c223d4b8d5f36bd48f202",
    "warning_message": "Possible null pointer dereference: cl",
    "hash_id": "f90a27b7b81324ce2bd96a1d3ff7366e6ab708cf0a9477e48507d036b749c086",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cl",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "371",
    "column_number": "38",
    "info": "Assignment \u0027cl\u003dit?((struct mill_clause*)(((char*)it)-offsetof(struct mill_clause,chitem))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "89e7d9e3503da7550927ca4ebc5e80a8eb194ef3",
    "commit_id_repair": "8c15997f9f6bc6a5201c223d4b8d5f36bd48f202",
    "warning_message": "Possible null pointer dereference: cl",
    "hash_id": "dd3b3e3bcfca8c5fb6c0319041455f2e176780851521d5538ef073ca19eea8c0",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cl",
    "cwe": "476",
    "file_path": "tmp_github/libmill/chan.c",
    "line_number": "280",
    "column_number": "16",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "0f05c01c5cd00adc0264c6b19bd629332cf1c76d",
    "commit_id_repair": "2bf37559bf7d13694e90b7c5a0a6f9fb3682bd1b",
    "warning_message": "Possible null pointer dereference: cl",
    "hash_id": "1e4e4f57da9be4f8a70ea8ff32986df8acc35a1d66fa06e600df66e6c77cfa34",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cl",
    "cwe": "476",
    "file_path": "tmp_github/libmill/chan.c",
    "line_number": "279",
    "column_number": "38",
    "info": "Assignment \u0027cl\u003dit?((struct mill_clause*)(((char*)it)-offsetof(struct mill_clause,chitem))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "0f05c01c5cd00adc0264c6b19bd629332cf1c76d",
    "commit_id_repair": "2bf37559bf7d13694e90b7c5a0a6f9fb3682bd1b",
    "warning_message": "Possible null pointer dereference: cl",
    "hash_id": "b5c5cf9a67bc3046692f0c4fee8d564d6e5fa517875c938e87bce351ac110b53",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cl",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "376",
    "column_number": "16",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "ace821e71f780ee81bf544abfc122a4722792e08",
    "commit_id_repair": "0f05c01c5cd00adc0264c6b19bd629332cf1c76d",
    "warning_message": "Possible null pointer dereference: cl",
    "hash_id": "f90a27b7b81324ce2bd96a1d3ff7366e6ab708cf0a9477e48507d036b749c086",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cl",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "375",
    "column_number": "38",
    "info": "Assignment \u0027cl\u003dit?((struct mill_clause*)(((char*)it)-offsetof(struct mill_clause,chitem))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "ace821e71f780ee81bf544abfc122a4722792e08",
    "commit_id_repair": "0f05c01c5cd00adc0264c6b19bd629332cf1c76d",
    "warning_message": "Possible null pointer dereference: cl",
    "hash_id": "dd3b3e3bcfca8c5fb6c0319041455f2e176780851521d5538ef073ca19eea8c0",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "76",
    "column_number": "5",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "a6cd5977e5cb3df702b9fc336579adb5b740b599",
    "commit_id_repair": "85040ab46072bd5e150ea6c8bf11c264213f53c9",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "bc551be205de8e0b4bc2633780f6f700b77a3a6859f5e7adadce94e4a56114ac",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "148",
    "column_number": "17",
    "info": "Calling function \u0027mill_resume\u0027, 1st argument \u0027cr\u0027 value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "a6cd5977e5cb3df702b9fc336579adb5b740b599",
    "commit_id_repair": "85040ab46072bd5e150ea6c8bf11c264213f53c9",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "d60a3610ed1de9930aff45c0a63581d23e1b341b9681d1e896b6d696b08bdff0",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "147",
    "column_number": "26",
    "info": "Assignment \u0027cr\u003dself?((struct mill_cr*)(((char*)self)-offsetof(struct mill_cr,poller))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "a6cd5977e5cb3df702b9fc336579adb5b740b599",
    "commit_id_repair": "85040ab46072bd5e150ea6c8bf11c264213f53c9",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "a1edb1f755dfdfddc4da3545293f880ed9ea56f5473b89decb5c418ae556adda",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "77",
    "column_number": "5",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "a6cd5977e5cb3df702b9fc336579adb5b740b599",
    "commit_id_repair": "85040ab46072bd5e150ea6c8bf11c264213f53c9",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "bc551be205de8e0b4bc2633780f6f700b77a3a6859f5e7adadce94e4a56114ac",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "148",
    "column_number": "17",
    "info": "Calling function \u0027mill_resume\u0027, 1st argument \u0027cr\u0027 value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "a6cd5977e5cb3df702b9fc336579adb5b740b599",
    "commit_id_repair": "85040ab46072bd5e150ea6c8bf11c264213f53c9",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "d60a3610ed1de9930aff45c0a63581d23e1b341b9681d1e896b6d696b08bdff0",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "147",
    "column_number": "26",
    "info": "Assignment \u0027cr\u003dself?((struct mill_cr*)(((char*)self)-offsetof(struct mill_cr,poller))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "a6cd5977e5cb3df702b9fc336579adb5b740b599",
    "commit_id_repair": "85040ab46072bd5e150ea6c8bf11c264213f53c9",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "a1edb1f755dfdfddc4da3545293f880ed9ea56f5473b89decb5c418ae556adda",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "160",
    "column_number": "19",
    "info": "Calling function \u0027mill_schedule\u0027, 1st argument \u0027cr\u0027 value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "279d3fb5499868bbf82a449aa1ee958bf5ab84c0",
    "commit_id_repair": "699c69d497a6205eab38fe88b55b73c8c52679b6",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "7a85f4ea3235401a6560f56965ac5f7e1ad35fb14df5cfffb53aaa857eca2115",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "160",
    "column_number": "17",
    "info": "Calling function \u0027mill_resume\u0027, 1st argument \u0027cr\u0027 value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "0cb0803d25687205f3fe2d44d4addb9487bc46b1",
    "commit_id_repair": "279d3fb5499868bbf82a449aa1ee958bf5ab84c0",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "d60a3610ed1de9930aff45c0a63581d23e1b341b9681d1e896b6d696b08bdff0",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/debug.c",
    "line_number": "47",
    "column_number": "30",
    "info": "Assignment \u0027cr\u003dit?((struct mill_cr*)(((char*)it)-offsetof(struct mill_cr,all_crs_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "4ba15a0a39843efff810b23eb0a1418da391ef32",
    "commit_id_repair": "13ba93b2f65ad33e6efab8f8be2ac3799884f555",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "4dbd66fa61bedd7721fd658b9ddaf84a6e93f6d85a909404601f03a5b20c5bba",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/debug.c",
    "line_number": "105",
    "column_number": "32",
    "info": "Assignment \u0027ch\u003dit?((struct mill_chan*)(((char*)it)-offsetof(struct mill_chan,all_chans_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "4ba15a0a39843efff810b23eb0a1418da391ef32",
    "commit_id_repair": "13ba93b2f65ad33e6efab8f8be2ac3799884f555",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "2aa99b909fbb857f509abde88d3069bc04ed2cb18ab8ab18124006455ad6202d",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/debug.c",
    "line_number": "105",
    "column_number": "32",
    "info": "Assignment \u0027ch\u003dit?((struct mill_chan*)(((char*)it)-offsetof(struct mill_chan,all_chans_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "4ba15a0a39843efff810b23eb0a1418da391ef32",
    "commit_id_repair": "13ba93b2f65ad33e6efab8f8be2ac3799884f555",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "2aa99b909fbb857f509abde88d3069bc04ed2cb18ab8ab18124006455ad6202d",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/debug.c",
    "line_number": "105",
    "column_number": "32",
    "info": "Assignment \u0027ch\u003dit?((struct mill_chan*)(((char*)it)-offsetof(struct mill_chan,all_chans_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "4ba15a0a39843efff810b23eb0a1418da391ef32",
    "commit_id_repair": "13ba93b2f65ad33e6efab8f8be2ac3799884f555",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "2aa99b909fbb857f509abde88d3069bc04ed2cb18ab8ab18124006455ad6202d",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027wait_fds\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "277",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "8f5fa8167195fecd55b7a5d2bca801a7f39a3e0c",
    "commit_id_repair": "54ce9685acd96cfb57922d06531094161bb686d6",
    "warning_message": "Common realloc mistake: \u0027wait_fds\u0027 nulled but not freed upon failure",
    "hash_id": "22fb7f3200371a3c878ad333ca4a42c6429ec002d8ea887da753874d1e402bd1",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027wait_items\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "279",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "8f5fa8167195fecd55b7a5d2bca801a7f39a3e0c",
    "commit_id_repair": "54ce9685acd96cfb57922d06531094161bb686d6",
    "warning_message": "Common realloc mistake: \u0027wait_items\u0027 nulled but not freed upon failure",
    "hash_id": "e9f5510df7edde6c3960432c0619d9af5b444e3bc44004fe74de76688f79d7c9",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/debug.c",
    "line_number": "175",
    "column_number": "13",
    "info": "Calling function \u0027chtrace\u0027, 1st argument \u0027NULL\u0027 value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "ccc7f436354b51821c2ce2e7f594a5f68cdb7049",
    "commit_id_repair": "255c4e43e5f85e89510848ef040727e5541c39f6",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "cf2efa46c03eba3b575f8f2def3f2dd3d46cb167fb1645571c6ed0618880e11b",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/debug.c",
    "line_number": "176",
    "column_number": "15",
    "info": "Calling function \u0027chuntrace\u0027, 1st argument \u0027NULL\u0027 value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "ccc7f436354b51821c2ce2e7f594a5f68cdb7049",
    "commit_id_repair": "255c4e43e5f85e89510848ef040727e5541c39f6",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "9b551276281aac4006ecabbb299c67ff5befb21b89677a41b170d3045a428138",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/debug.c",
    "line_number": "94",
    "column_number": "27",
    "info": "Assignment \u0027ch\u003dit?((struct chan*)(((char*)it)-offsetof(struct chan,all_chans_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "9b8fbc6b893dec7f2a5524361c44610b1d40619f",
    "commit_id_repair": "4e959ef0fc9f31579a917fee4d21ef678d3df6b4",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "f7f1a22cbcc4f07f3eeecd6bf8cb73d0417d1881d573513441d902700203314d",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/debug.c",
    "line_number": "94",
    "column_number": "27",
    "info": "Assignment \u0027ch\u003dit?((struct chan*)(((char*)it)-offsetof(struct chan,all_chans_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "9b8fbc6b893dec7f2a5524361c44610b1d40619f",
    "commit_id_repair": "4e959ef0fc9f31579a917fee4d21ef678d3df6b4",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "f7f1a22cbcc4f07f3eeecd6bf8cb73d0417d1881d573513441d902700203314d",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/debug.c",
    "line_number": "94",
    "column_number": "27",
    "info": "Assignment \u0027ch\u003dit?((struct chan*)(((char*)it)-offsetof(struct chan,all_chans_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "9b8fbc6b893dec7f2a5524361c44610b1d40619f",
    "commit_id_repair": "4e959ef0fc9f31579a917fee4d21ef678d3df6b4",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "f7f1a22cbcc4f07f3eeecd6bf8cb73d0417d1881d573513441d902700203314d",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "649",
    "column_number": "16",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "72774c8a06a96710e6558157e93780eebe3be0a7",
    "commit_id_repair": "9b8fbc6b893dec7f2a5524361c44610b1d40619f",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "bc551be205de8e0b4bc2633780f6f700b77a3a6859f5e7adadce94e4a56114ac",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "648",
    "column_number": "30",
    "info": "Assignment \u0027cr\u003dit?((struct mill_cr*)(((char*)it)-offsetof(struct mill_cr,all_crs_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "72774c8a06a96710e6558157e93780eebe3be0a7",
    "commit_id_repair": "9b8fbc6b893dec7f2a5524361c44610b1d40619f",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "b89ef30953b8ef6d1d5538d483d6a40055f3d1c488741e0b7f194432038e6482",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "705",
    "column_number": "18",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "72774c8a06a96710e6558157e93780eebe3be0a7",
    "commit_id_repair": "9b8fbc6b893dec7f2a5524361c44610b1d40619f",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "d31556165ac4e4e7b62929b60c315e808daba0999c6c80e86b49e07a45f0e4ec",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "703",
    "column_number": "27",
    "info": "Assignment \u0027ch\u003dit?((struct chan**)(((char*)it)-offsetof(struct chan,all_chans_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "72774c8a06a96710e6558157e93780eebe3be0a7",
    "commit_id_repair": "9b8fbc6b893dec7f2a5524361c44610b1d40619f",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "65c6f1e624b93e2342f8242dffe01a269ec5e3fefa638bdba02ede46a45ec6c7",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "706",
    "column_number": "18",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "72774c8a06a96710e6558157e93780eebe3be0a7",
    "commit_id_repair": "9b8fbc6b893dec7f2a5524361c44610b1d40619f",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "d31556165ac4e4e7b62929b60c315e808daba0999c6c80e86b49e07a45f0e4ec",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "703",
    "column_number": "27",
    "info": "Assignment \u0027ch\u003dit?((struct chan**)(((char*)it)-offsetof(struct chan,all_chans_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "72774c8a06a96710e6558157e93780eebe3be0a7",
    "commit_id_repair": "9b8fbc6b893dec7f2a5524361c44610b1d40619f",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "65c6f1e624b93e2342f8242dffe01a269ec5e3fefa638bdba02ede46a45ec6c7",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "708",
    "column_number": "13",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "72774c8a06a96710e6558157e93780eebe3be0a7",
    "commit_id_repair": "9b8fbc6b893dec7f2a5524361c44610b1d40619f",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "d31556165ac4e4e7b62929b60c315e808daba0999c6c80e86b49e07a45f0e4ec",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "703",
    "column_number": "27",
    "info": "Assignment \u0027ch\u003dit?((struct chan**)(((char*)it)-offsetof(struct chan,all_chans_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "72774c8a06a96710e6558157e93780eebe3be0a7",
    "commit_id_repair": "9b8fbc6b893dec7f2a5524361c44610b1d40619f",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "65c6f1e624b93e2342f8242dffe01a269ec5e3fefa638bdba02ede46a45ec6c7",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory leak: ptr",
    "cwe": "401",
    "file_path": "tmp_github/libmill/libmill.c",
    "line_number": "287",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "commit_id_repair": "0f217ea30d2582f17e09179d89b6b353d52b63e9",
    "warning_message": "Memory leak: ptr",
    "hash_id": "9754e9bffe86dda66cb6661b1e45bd7ca75107c43d5e40011e349b63af53fd7b",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory leak: ptr",
    "cwe": "401",
    "file_path": "tmp_github/libmill/coroutine.c",
    "line_number": "287",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6040af8173135474fa20b06696a0e4cbd2099d61",
    "commit_id_repair": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "warning_message": "Memory leak: ptr",
    "hash_id": "888ebc9d5ef02f19f24f4f2fb63d0c35adf92c55e71b34fdc38e5631103e9035",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027wait_fds\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/libmill/coroutine.c",
    "line_number": "379",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6040af8173135474fa20b06696a0e4cbd2099d61",
    "commit_id_repair": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "warning_message": "Common realloc mistake: \u0027wait_fds\u0027 nulled but not freed upon failure",
    "hash_id": "674de82df4baeb04a11cd6c02170253cc107ff48e23fe145180e008314c25c30",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027wait_items\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/libmill/coroutine.c",
    "line_number": "381",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6040af8173135474fa20b06696a0e4cbd2099d61",
    "commit_id_repair": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "warning_message": "Common realloc mistake: \u0027wait_items\u0027 nulled but not freed upon failure",
    "hash_id": "9c0d43cea2aaf968e571436e576d1e16b36e4f94ef4b4a3ec6596bd36e6598ec",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cl",
    "cwe": "476",
    "file_path": "tmp_github/libmill/coroutine.c",
    "line_number": "787",
    "column_number": "16",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6040af8173135474fa20b06696a0e4cbd2099d61",
    "commit_id_repair": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "warning_message": "Possible null pointer dereference: cl",
    "hash_id": "0db959501ce60262e00425b99a8765730cbb9f157d4a9886d779fac263d81ca9",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cl",
    "cwe": "476",
    "file_path": "tmp_github/libmill/coroutine.c",
    "line_number": "786",
    "column_number": "38",
    "info": "Assignment \u0027cl\u003dit?((struct mill_clause*)(((char*)it)-offsetof(struct mill_clause,chitem))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6040af8173135474fa20b06696a0e4cbd2099d61",
    "commit_id_repair": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "warning_message": "Possible null pointer dereference: cl",
    "hash_id": "aee8758cb2dc3dcb4260aa5d3d06b4ec43f683dd553f79bcdf2a7da9ac88c88b",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/coroutine.c",
    "line_number": "849",
    "column_number": "16",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6040af8173135474fa20b06696a0e4cbd2099d61",
    "commit_id_repair": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "d2e2d3c3c47ecf5435eade3f8aa0882deb36bfd847be4503930e3df6c0aa0962",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: cr",
    "cwe": "476",
    "file_path": "tmp_github/libmill/coroutine.c",
    "line_number": "848",
    "column_number": "30",
    "info": "Assignment \u0027cr\u003dit?((struct mill_cr*)(((char*)it)-offsetof(struct mill_cr,all_crs_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6040af8173135474fa20b06696a0e4cbd2099d61",
    "commit_id_repair": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "warning_message": "Possible null pointer dereference: cr",
    "hash_id": "e924d1ad4c78324cee257f2465058adcaf1c0e61201b93378d7f5b46629f1fa6",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/coroutine.c",
    "line_number": "905",
    "column_number": "18",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6040af8173135474fa20b06696a0e4cbd2099d61",
    "commit_id_repair": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "007df4605c2d9a8788028e1542dd708a591d5e389066bf95f8ea1e34edfb2a46",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/coroutine.c",
    "line_number": "903",
    "column_number": "27",
    "info": "Assignment \u0027ch\u003dit?((struct chan**)(((char*)it)-offsetof(struct chan,all_chans_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6040af8173135474fa20b06696a0e4cbd2099d61",
    "commit_id_repair": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "d25a12f197a003ca6c174d401f25e3cad7a99138a7a035c69ab86fb46acb0e26",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/coroutine.c",
    "line_number": "906",
    "column_number": "18",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6040af8173135474fa20b06696a0e4cbd2099d61",
    "commit_id_repair": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "007df4605c2d9a8788028e1542dd708a591d5e389066bf95f8ea1e34edfb2a46",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/coroutine.c",
    "line_number": "903",
    "column_number": "27",
    "info": "Assignment \u0027ch\u003dit?((struct chan**)(((char*)it)-offsetof(struct chan,all_chans_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6040af8173135474fa20b06696a0e4cbd2099d61",
    "commit_id_repair": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "d25a12f197a003ca6c174d401f25e3cad7a99138a7a035c69ab86fb46acb0e26",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/coroutine.c",
    "line_number": "908",
    "column_number": "13",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6040af8173135474fa20b06696a0e4cbd2099d61",
    "commit_id_repair": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "007df4605c2d9a8788028e1542dd708a591d5e389066bf95f8ea1e34edfb2a46",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Possible null pointer dereference: ch",
    "cwe": "476",
    "file_path": "tmp_github/libmill/coroutine.c",
    "line_number": "903",
    "column_number": "27",
    "info": "Assignment \u0027ch\u003dit?((struct chan**)(((char*)it)-offsetof(struct chan,all_chans_item))):NULL\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "6040af8173135474fa20b06696a0e4cbd2099d61",
    "commit_id_repair": "9b7011aae907bd51b6879aad89fc92326dd6f147",
    "warning_message": "Possible null pointer dereference: ch",
    "hash_id": "d25a12f197a003ca6c174d401f25e3cad7a99138a7a035c69ab86fb46acb0e26",
    "bug_severity": "warning",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory leak: ptr",
    "cwe": "401",
    "file_path": "tmp_github/libmill/mill.c",
    "line_number": "286",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "a2ed5fabffd6747566f81d1a43a3db9c6a8509ce",
    "commit_id_repair": "3efd7694ebdeb08098405c0cfdca896ba5a0da7c",
    "warning_message": "Memory leak: ptr",
    "hash_id": "0add03d8b792063c209302b9654221c410bcd3c0d0c9ff3e3ed7ea520875e623",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027wait_fds\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/libmill/mill.c",
    "line_number": "367",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "a2ed5fabffd6747566f81d1a43a3db9c6a8509ce",
    "commit_id_repair": "3efd7694ebdeb08098405c0cfdca896ba5a0da7c",
    "warning_message": "Common realloc mistake: \u0027wait_fds\u0027 nulled but not freed upon failure",
    "hash_id": "7d8e25d7e638a7a214e6b5b9500c14887ddd1968d726745513110ad9f8d1a1a9",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027wait_items\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/libmill/mill.c",
    "line_number": "369",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "a2ed5fabffd6747566f81d1a43a3db9c6a8509ce",
    "commit_id_repair": "3efd7694ebdeb08098405c0cfdca896ba5a0da7c",
    "warning_message": "Common realloc mistake: \u0027wait_items\u0027 nulled but not freed upon failure",
    "hash_id": "c39fc550029d527fc84781f77a526366bdcf245f0c9a4a61adf30a11c7991c8a",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027wait_crs\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/libmill/mill.c",
    "line_number": "301",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "e73e8953380a1b0a3717e58fdbe0bfe59949158d",
    "commit_id_repair": "73bd39df4c00258d9eb184235562811678785aa6",
    "warning_message": "Common realloc mistake: \u0027wait_crs\u0027 nulled but not freed upon failure",
    "hash_id": "9e13b7bc524f5b03121c11357f48c418934ef892cf013c0f516c08ebb01c01ee",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/sleep.c",
    "line_number": "48",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "28a5097585d47c37dd8d293fcbf9a6adad59504b",
    "commit_id_repair": "ceaab30725e29cb2548bfb9eab0e89a7e9638f68",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "b219807478f4bad7cf08b4fef9cbebf15644763bac950fb4bd8e2af2edb585b8",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/example.c",
    "line_number": "40",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "8bb78418fad735a77589f40eb27b1314bf895382",
    "commit_id_repair": "d3e263a69688d27104ddf1aee98748c1b54265e3",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f82202d4cf5540e02815d27217ae77ddbdf9e4eee079907944f1e2627ab08a6e",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/tests/example.c",
    "line_number": "42",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "8bb78418fad735a77589f40eb27b1314bf895382",
    "commit_id_repair": "d3e263a69688d27104ddf1aee98748c1b54265e3",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "f82202d4cf5540e02815d27217ae77ddbdf9e4eee079907944f1e2627ab08a6e",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/libmill/mill.c",
    "line_number": "675",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "8bb78418fad735a77589f40eb27b1314bf895382",
    "commit_id_repair": "d3e263a69688d27104ddf1aee98748c1b54265e3",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "0e0b53aa1675e4a0a9595a6c87e431012a3dc941d6cd8b161c05cc99ddcf1fc4",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Uninitialized variable: lzero",
    "cwe": "457",
    "file_path": "tmp_github/libmill/tests/choose.c",
    "line_number": "272",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "8bb78418fad735a77589f40eb27b1314bf895382",
    "commit_id_repair": "d3e263a69688d27104ddf1aee98748c1b54265e3",
    "warning_message": "Uninitialized variable: lzero",
    "hash_id": "e40cdeaa6647e15588c405530a83a437bc126e88c80b40c85bf7a4cce74c10bd",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "syntax error",
    "file_path": "tmp_github/libmill/tests/example.c",
    "line_number": "46",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "50c723120a4a19f3012c21f0513f23413803088f",
    "commit_id_repair": "8190f81cbe3e756ce57ebf3b098433673ed27d4c",
    "warning_message": "syntax error",
    "hash_id": "10540bba2ad032db98083bcf5128b8f200901784cb412cdf8d600c7500af7e63",
    "bug_severity": "error",
    "bug_type": "syntaxError"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "syntax error",
    "file_path": "tmp_github/libmill/tests/choose.c",
    "line_number": "55",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "50c723120a4a19f3012c21f0513f23413803088f",
    "commit_id_repair": "8190f81cbe3e756ce57ebf3b098433673ed27d4c",
    "warning_message": "syntax error",
    "hash_id": "7318cae56cdccc4a6c43f5641cc4e9f0e82168d3d8fdb5621f4cc96ae51e559e",
    "bug_severity": "error",
    "bug_type": "syntaxError"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Uninitialized variable: val",
    "cwe": "457",
    "file_path": "tmp_github/libmill/mill.c",
    "line_number": "355",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "802c38f19ad22ca7bb4bd79e58c8444950959c0b",
    "commit_id_repair": "481a75c2ab225b4d3debef8f85679ead326ff9f9",
    "warning_message": "Uninitialized variable: val",
    "hash_id": "d93265c816b1cda16b1b42ea6f124c7ccf104968cce4cbb342d4021cd07cecfa",
    "bug_severity": "error",
    "bug_type": "legacyUninitvar"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Unmatched \u0027}\u0027. Configuration: \u0027\u0027.",
    "file_path": "tmp_github/libmill/tests/select.c",
    "line_number": "17",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "26fdd0723414ebdd32bef2a6954f0e98a7fe7078",
    "commit_id_repair": "d4667cbfc76f6854fbd46d14e72ae327f60c99fb",
    "warning_message": "Unmatched \u0027}\u0027. Configuration: \u0027\u0027.",
    "hash_id": "af3ee202be8eca31497637f2e40d34b1cadc05a284a7ca4d0dfe84d3f4ad8f96",
    "bug_severity": "error",
    "bug_type": "syntaxError"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Dangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends.",
    "cwe": "562",
    "file_path": "tmp_github/libmill/mill.c",
    "line_number": "169",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "e3f4ac775436eb03f09710a816f750fcdba022b7",
    "commit_id_repair": "c61083f12dda6fad801e228a1c4dd4f1085cfd47",
    "warning_message": "Address of local auto-variable assigned to a function parameter.",
    "hash_id": "ea0cdc2d0d64a624836ed34acf18fe7678077692c2f154f57e916e8255deafb1",
    "bug_severity": "error",
    "bug_type": "autoVariables"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027wait_fds_\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/libmill/mill.c",
    "line_number": "157",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "175b79f3019919da245682188ec1513bf8dc9c66",
    "commit_id_repair": "3933afc7ab859bb4e31ffc9be5667e06503e6e9c",
    "warning_message": "Common realloc mistake: \u0027wait_fds_\u0027 nulled but not freed upon failure",
    "hash_id": "858374c6af9d6dd10bf2892c715cc48e7790278d6e5cdc4cf8900ab202c2d15f",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027wait_crs_\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/libmill/mill.c",
    "line_number": "159",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "175b79f3019919da245682188ec1513bf8dc9c66",
    "commit_id_repair": "3933afc7ab859bb4e31ffc9be5667e06503e6e9c",
    "warning_message": "Common realloc mistake: \u0027wait_crs_\u0027 nulled but not freed upon failure",
    "hash_id": "bf4002eec963867258e32e32476c79d77901def1bcae5446746ed87c45e3bcbf",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory is allocated but not initialized: stack",
    "cwe": "457",
    "file_path": "tmp_github/libmill/tests/chan.c",
    "line_number": "16",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "175b79f3019919da245682188ec1513bf8dc9c66",
    "commit_id_repair": "3933afc7ab859bb4e31ffc9be5667e06503e6e9c",
    "warning_message": "Memory is allocated but not initialized: stack",
    "hash_id": "7802f69f51367cf4b2a984e8d77b957e9432ad7c3c874c34b48a8c1f257e027a",
    "bug_severity": "error",
    "bug_type": "uninitdata"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory is allocated but not initialized: stack",
    "cwe": "457",
    "file_path": "tmp_github/libmill/tests/go.c",
    "line_number": "14",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "175b79f3019919da245682188ec1513bf8dc9c66",
    "commit_id_repair": "3933afc7ab859bb4e31ffc9be5667e06503e6e9c",
    "warning_message": "Memory is allocated but not initialized: stack",
    "hash_id": "6a1696a0e68663d7ddc3877c8007081927c251ab7cd98639186019ce7822cb12",
    "bug_severity": "error",
    "bug_type": "uninitdata"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory is allocated but not initialized: stack",
    "cwe": "457",
    "file_path": "tmp_github/libmill/tests/sleep.c",
    "line_number": "14",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "175b79f3019919da245682188ec1513bf8dc9c66",
    "commit_id_repair": "3933afc7ab859bb4e31ffc9be5667e06503e6e9c",
    "warning_message": "Memory is allocated but not initialized: stack",
    "hash_id": "3c6eb27be21252b3080d3d2757c9ee54e675ef55d528f3673088960cad7b5102",
    "bug_severity": "error",
    "bug_type": "uninitdata"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory is allocated but not initialized: stack",
    "cwe": "457",
    "file_path": "tmp_github/libmill/tests/go.c",
    "line_number": "15",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "175b79f3019919da245682188ec1513bf8dc9c66",
    "commit_id_repair": "3933afc7ab859bb4e31ffc9be5667e06503e6e9c",
    "warning_message": "Memory is allocated but not initialized: stack",
    "hash_id": "6a1696a0e68663d7ddc3877c8007081927c251ab7cd98639186019ce7822cb12",
    "bug_severity": "error",
    "bug_type": "uninitdata"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory is allocated but not initialized: stack",
    "cwe": "457",
    "file_path": "tmp_github/libmill/tests/sleep.c",
    "line_number": "15",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "175b79f3019919da245682188ec1513bf8dc9c66",
    "commit_id_repair": "3933afc7ab859bb4e31ffc9be5667e06503e6e9c",
    "warning_message": "Memory is allocated but not initialized: stack",
    "hash_id": "3c6eb27be21252b3080d3d2757c9ee54e675ef55d528f3673088960cad7b5102",
    "bug_severity": "error",
    "bug_type": "uninitdata"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory is allocated but not initialized: stack",
    "cwe": "457",
    "file_path": "tmp_github/libmill/tests/go.c",
    "line_number": "16",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "175b79f3019919da245682188ec1513bf8dc9c66",
    "commit_id_repair": "3933afc7ab859bb4e31ffc9be5667e06503e6e9c",
    "warning_message": "Memory is allocated but not initialized: stack",
    "hash_id": "6a1696a0e68663d7ddc3877c8007081927c251ab7cd98639186019ce7822cb12",
    "bug_severity": "error",
    "bug_type": "uninitdata"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory is allocated but not initialized: stack",
    "cwe": "457",
    "file_path": "tmp_github/libmill/tests/sleep.c",
    "line_number": "16",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "175b79f3019919da245682188ec1513bf8dc9c66",
    "commit_id_repair": "3933afc7ab859bb4e31ffc9be5667e06503e6e9c",
    "warning_message": "Memory is allocated but not initialized: stack",
    "hash_id": "3c6eb27be21252b3080d3d2757c9ee54e675ef55d528f3673088960cad7b5102",
    "bug_severity": "error",
    "bug_type": "uninitdata"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Dangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends.",
    "cwe": "562",
    "file_path": "tmp_github/libmill/chan.c",
    "line_number": "91",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "0f2fdc2e52127c347a5a1faebdf8ea9fa035cc78",
    "commit_id_repair": "175b79f3019919da245682188ec1513bf8dc9c66",
    "warning_message": "Address of local auto-variable assigned to a function parameter.",
    "hash_id": "ae356500c99a6728837d0a956d92635de710339b658f2e68d9919a6b73025bb4",
    "bug_severity": "error",
    "bug_type": "autoVariables"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory leak: ptr",
    "cwe": "401",
    "file_path": "tmp_github/libmill/mill.c",
    "line_number": "77",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "0f2fdc2e52127c347a5a1faebdf8ea9fa035cc78",
    "commit_id_repair": "175b79f3019919da245682188ec1513bf8dc9c66",
    "warning_message": "Memory leak: ptr",
    "hash_id": "0add03d8b792063c209302b9654221c410bcd3c0d0c9ff3e3ed7ea520875e623",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Dangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends.",
    "cwe": "562",
    "file_path": "tmp_github/libmill/mill.c",
    "line_number": "308",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/sustrik/libmill.git",
    "commit_id": "1c093b439d97fe46fc5f971e6b540afce748b846",
    "commit_id_repair": "369a8d12ed08af8676d3c261855dd884fa8f6b73",
    "warning_message": "Address of local auto-variable assigned to a function parameter.",
    "hash_id": "ea0cdc2d0d64a624836ed34acf18fe7678077692c2f154f57e916e8255deafb1",
    "bug_severity": "error",
    "bug_type": "autoVariables"
  }
]