[
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%f in format string (no. 1) requires \u0027double\u0027 but the argument type is \u0027signed int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/42_CheatSheet/functions/it_compiles_but.c",
    "line_number": "25",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "commit_id_repair": "d3ebd468046807011987658dce29dbce937f059e",
    "warning_message": "%f in format string (no. 1) requires \u0027double\u0027 but the argument type is \u0027signed int\u0027.",
    "hash_id": "f3d4265dd45d0c4ced8ca49bc4c07797e5009f37af5ddf6d14baa6c3515d35f0",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_float"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%d in format string (no. 1) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/42_CheatSheet/functions/it_compiles_but.c",
    "line_number": "48",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "commit_id_repair": "d3ebd468046807011987658dce29dbce937f059e",
    "warning_message": "%d in format string (no. 1) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "hash_id": "abf7405dcef257fea9c29d76729c281b793e1e0b7cde9ae4172b13d13be00add",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_sint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%d in format string (no. 1) requires \u0027int *\u0027 but the argument type is \u0027signed int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/42_CheatSheet/functions/it_compiles_but.c",
    "line_number": "57",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "commit_id_repair": "d3ebd468046807011987658dce29dbce937f059e",
    "warning_message": "%d in format string (no. 1) requires \u0027int *\u0027 but the argument type is \u0027signed int\u0027.",
    "hash_id": "7b963ac3a2b6eb90713e82cdfd52cd335a4af02df299f45100ae2f903188db5c",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "A statement like \u0027*A++;\u0027 might not do what you intended. Postfix \u0027operator++\u0027 is executed before \u0027operator*\u0027. Thus, the dereference is meaningless. Did you intend to write \u0027(*A)++;\u0027?",
    "cwe": "783",
    "file_path": "tmp_github/42_CheatSheet/functions/it_compiles_but.c",
    "line_number": "67",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "commit_id_repair": "d3ebd468046807011987658dce29dbce937f059e",
    "warning_message": "In expression like \u0027*A++\u0027 the result of \u0027*\u0027 is unused. Did you intend to write \u0027(*A)++;\u0027?",
    "hash_id": "64f5024b8e00ce461bd099d1e446c011bedac190bb67c17b65a1f8d259c2edb3",
    "bug_severity": "warning",
    "bug_type": "clarifyStatement"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Shifting 32-bit value by 32 bits is undefined behaviour",
    "cwe": "758",
    "file_path": "tmp_github/42_CheatSheet/functions/it_compiles_but.c",
    "line_number": "39",
    "column_number": "25",
    "info": "Shift",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "commit_id_repair": "d3ebd468046807011987658dce29dbce937f059e",
    "warning_message": "Shifting 32-bit value by 32 bits is undefined behaviour",
    "hash_id": "406a2be54981168c4abfc8cc5d00fdae5fa374539c24964ce1ca1b7f4edb6fae",
    "bug_severity": "error",
    "bug_type": "shiftTooManyBits"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Signed integer overflow for expression \u0027-n\u0027.",
    "cwe": "190",
    "file_path": "tmp_github/42_CheatSheet/functions/it_compiles_but.c",
    "line_number": "35",
    "column_number": "9",
    "info": "Integer overflow",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "commit_id_repair": "d3ebd468046807011987658dce29dbce937f059e",
    "warning_message": "Signed integer overflow for expression \u0027-n\u0027.",
    "hash_id": "71946a2e9c178379b12d4eb59fe5041c43c052836c3db81656dbae2dd8b0b885",
    "bug_severity": "error",
    "bug_type": "integerOverflow"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Signed integer overflow for expression \u0027-n\u0027.",
    "cwe": "190",
    "file_path": "tmp_github/42_CheatSheet/functions/it_compiles_but.c",
    "line_number": "34",
    "column_number": "14",
    "info": "Assignment \u0027n\u003d-2147483648\u0027, assigned value is -2147483648",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "commit_id_repair": "d3ebd468046807011987658dce29dbce937f059e",
    "warning_message": "Signed integer overflow for expression \u0027-n\u0027.",
    "hash_id": "067ca383f81aacb35f03f02f10c1d93f1633b6471b2b3db11c4b1ae7c03bdd75",
    "bug_severity": "error",
    "bug_type": "integerOverflow"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Signed integer overflow for expression \u00271\u003c\u003c32\u0027.",
    "cwe": "190",
    "file_path": "tmp_github/42_CheatSheet/functions/it_compiles_but.c",
    "line_number": "39",
    "column_number": "25",
    "info": "Integer overflow",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "commit_id_repair": "d3ebd468046807011987658dce29dbce937f059e",
    "warning_message": "Signed integer overflow for expression \u00271\u003c\u003c32\u0027.",
    "hash_id": "efa1c9e20c12000003e01e7e69865f7080e2b7ace75f6990f1c75fe8070d8dfb",
    "bug_severity": "error",
    "bug_type": "integerOverflow"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Signed integer overflow for expression \u0027(1\u003c\u003c32)-1\u0027.",
    "cwe": "190",
    "file_path": "tmp_github/42_CheatSheet/functions/it_compiles_but.c",
    "line_number": "39",
    "column_number": "32",
    "info": "Integer overflow",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "commit_id_repair": "d3ebd468046807011987658dce29dbce937f059e",
    "warning_message": "Signed integer overflow for expression \u0027(1\u003c\u003c32)-1\u0027.",
    "hash_id": "e6dbcffeaf7ddd9c4863004629f52f0871867581bd97d9d2402c38e313cc0477",
    "bug_severity": "error",
    "bug_type": "integerOverflow"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: i",
    "cwe": "457",
    "file_path": "tmp_github/42_CheatSheet/functions/it_compiles_but.c",
    "line_number": "18",
    "column_number": "20",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "commit_id_repair": "d3ebd468046807011987658dce29dbce937f059e",
    "warning_message": "Uninitialized variable: i",
    "hash_id": "d91cdd3834f8caa2cb7f47ebe1f2b9a7c1564d5f644aa0c52962b7581f310080",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Found an exit path from function with non-void return type that has missing return statement",
    "cwe": "758",
    "file_path": "tmp_github/42_CheatSheet/functions/return_file_string.c",
    "line_number": "5",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "6b7720353aa967466e24d15abaedda63e99a07de",
    "commit_id_repair": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "warning_message": "Found an exit path from function with non-void return type that has missing return statement",
    "hash_id": "14e19080ef224d3e5b97ca1170be34363283233cf30b2d4a55c7e51ac6a8b7fc",
    "bug_severity": "error",
    "bug_type": "missingReturn"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027(nread\u003dgetline(\u0026line,\u0026len,stream))!\u003d-1\u0027 is redundant or fwrite() argument nr 2 can have invalid value. The value is -1 but the valid values are \u00270:\u0027.",
    "cwe": "628",
    "file_path": "tmp_github/42_CheatSheet/functions/print_nth_line.c",
    "line_number": "15",
    "column_number": "18",
    "info": "Invalid argument",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "6b7720353aa967466e24d15abaedda63e99a07de",
    "commit_id_repair": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "warning_message": "Either the condition \u0027(nread\u003dgetline(\u0026line,\u0026len,stream))!\u003d-1\u0027 is redundant or fwrite() argument nr 2 can have invalid value. The value is -1 but the valid values are \u00270:\u0027.",
    "hash_id": "bba248987c1ea7abbd47f86684bf5a5ad7d97f49c1707df345286b66e7153031",
    "bug_severity": "warning",
    "bug_type": "invalidFunctionArg"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027(nread\u003dgetline(\u0026line,\u0026len,stream))!\u003d-1\u0027 is redundant or fwrite() argument nr 2 can have invalid value. The value is -1 but the valid values are \u00270:\u0027.",
    "cwe": "628",
    "file_path": "tmp_github/42_CheatSheet/functions/print_nth_line.c",
    "line_number": "13",
    "column_number": "52",
    "info": "Assuming that condition \u0027(nread\u003dgetline(\u0026line,\u0026len,stream))!\u003d-1\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "6b7720353aa967466e24d15abaedda63e99a07de",
    "commit_id_repair": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "warning_message": "Either the condition \u0027(nread\u003dgetline(\u0026line,\u0026len,stream))!\u003d-1\u0027 is redundant or fwrite() argument nr 2 can have invalid value. The value is -1 but the valid values are \u00270:\u0027.",
    "hash_id": "a26bb1d0da38a6cae6391c9978222e8b5e175a42c285a0b55823b5ce43a68040",
    "bug_severity": "warning",
    "bug_type": "invalidFunctionArg"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/42_CheatSheet/functions/return_file_string.c",
    "line_number": "5",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "6b7720353aa967466e24d15abaedda63e99a07de",
    "commit_id_repair": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "22747641c8d3e25b3c697f0e648b1ed220314195073a4533bee4d48b59181ed3",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/42_CheatSheet/functions/return_file_string.c",
    "line_number": "11",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "6b7720353aa967466e24d15abaedda63e99a07de",
    "commit_id_repair": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "22747641c8d3e25b3c697f0e648b1ed220314195073a4533bee4d48b59181ed3",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Allocation with string_from_file, printf doesn\u0027t release it.",
    "cwe": "772",
    "file_path": "tmp_github/42_CheatSheet/functions/return_file_string.c",
    "line_number": "26",
    "column_number": "20",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "6b7720353aa967466e24d15abaedda63e99a07de",
    "commit_id_repair": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "warning_message": "Allocation with string_from_file, printf doesn\u0027t release it.",
    "hash_id": "c80e17e1360ee8eb3b8c579b7fa8a4a68b5bc83c1b1f37c984f0cbad1508e57d",
    "bug_severity": "error",
    "bug_type": "leakNoVarFunctionCall"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Resource leak: file",
    "cwe": "775",
    "file_path": "tmp_github/42_CheatSheet/functions/read_bytes.c",
    "line_number": "18",
    "column_number": "1",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "6b7720353aa967466e24d15abaedda63e99a07de",
    "commit_id_repair": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "warning_message": "Resource leak: file",
    "hash_id": "53b794f75ec75f1ad6991bebb072827ee943f3bbac84501ed8152fec2cf36db5",
    "bug_severity": "error",
    "bug_type": "resourceLeak"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Memory leak: temp",
    "cwe": "401",
    "file_path": "tmp_github/42_CheatSheet/functions/read_bytes.c",
    "line_number": "18",
    "column_number": "1",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "6b7720353aa967466e24d15abaedda63e99a07de",
    "commit_id_repair": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "warning_message": "Memory leak: temp",
    "hash_id": "796c593ed6ab76e1c2d508354fa63d36a9839dcc3d21968f42c3ee5d810b3674",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Modifying string literal \"Ave Caesar, Mori..\" directly or indirectly is undefined behaviour.",
    "cwe": "758",
    "file_path": "tmp_github/42_CheatSheet/functions/const_ptr.cpp",
    "line_number": "21",
    "column_number": "24",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "6b7720353aa967466e24d15abaedda63e99a07de",
    "commit_id_repair": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "warning_message": "Modifying string literal \"Ave Caesar, Mori..\" directly or indirectly is undefined behaviour.",
    "hash_id": "f08bfeab70c83be6c43913676c7d5730f2197f8c8c1bc2b79330cbcb0f646393",
    "bug_severity": "error",
    "bug_type": "stringLiteralWrite"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Modifying string literal \"Ave Caesar, Mori..\" directly or indirectly is undefined behaviour.",
    "cwe": "758",
    "file_path": "tmp_github/42_CheatSheet/functions/const_ptr.cpp",
    "line_number": "25",
    "column_number": "6",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "6b7720353aa967466e24d15abaedda63e99a07de",
    "commit_id_repair": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "warning_message": "Modifying string literal \"Ave Caesar, Mori..\" directly or indirectly is undefined behaviour.",
    "hash_id": "f08bfeab70c83be6c43913676c7d5730f2197f8c8c1bc2b79330cbcb0f646393",
    "bug_severity": "error",
    "bug_type": "stringLiteralWrite"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Size of pointer \u0027a\u0027 used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write \u0027sizeof(*a)\u0027.",
    "cwe": "467",
    "file_path": "tmp_github/42_CheatSheet/functions/multithread.c",
    "line_number": "14",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "6b7720353aa967466e24d15abaedda63e99a07de",
    "commit_id_repair": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "warning_message": "Size of pointer \u0027a\u0027 used instead of size of its data.",
    "hash_id": "0f92a6d78167baba09eb22327b5eaf63da3de533be76ea65125c5c8314c777fb",
    "bug_severity": "warning",
    "bug_type": "pointerSize"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Size of pointer \u0027b\u0027 used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write \u0027sizeof(*b)\u0027.",
    "cwe": "467",
    "file_path": "tmp_github/42_CheatSheet/functions/multithread.c",
    "line_number": "15",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "6b7720353aa967466e24d15abaedda63e99a07de",
    "commit_id_repair": "562c33ee003aa19d902cdd10a0a6decbbeac5e19",
    "warning_message": "Size of pointer \u0027b\u0027 used instead of size of its data.",
    "hash_id": "91cba0820a9f8f9855bf56f405cf47ebd2f5380dcc3bf687c5d7555b8ff07e5b",
    "bug_severity": "warning",
    "bug_type": "pointerSize"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/42_CheatSheet/functions/split.c",
    "line_number": "15",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "ee8ec84fb68253b22499eafff5c015956197427d",
    "commit_id_repair": "3c12f875dcab6f72e60183869062f70bac31f71e",
    "warning_message": "scanf() without field width limits can crash with huge input data.",
    "hash_id": "a35f9650c9b2edaaa2fbb035b6b486024b0d39f51566f332de8c43f1e3d2a23a",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Unmatched \u0027(\u0027. Configuration: \u0027\u0027.",
    "file_path": "tmp_github/42_CheatSheet/functions/multiplier.c",
    "line_number": "32",
    "column_number": "12",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "389cda57ef2b9f1dec46985d6fa4230106e6eeb9",
    "commit_id_repair": "58f8589762b381612ccef3e042acfb179a3dae6b",
    "warning_message": "Unmatched \u0027(\u0027. Configuration: \u0027\u0027.",
    "hash_id": "449e0a62487a8dfb6af33d33dd62a8bd6fb58d230b1f516f8be4bf2ff109c2fb",
    "bug_severity": "error",
    "bug_type": "syntaxError"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Array \u0027c[2]\u0027 accessed at index 2, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/42_CheatSheet/functions/scanf.c",
    "line_number": "10",
    "column_number": "32",
    "info": "Array index out of bounds",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "389cda57ef2b9f1dec46985d6fa4230106e6eeb9",
    "commit_id_repair": "58f8589762b381612ccef3e042acfb179a3dae6b",
    "warning_message": "Array \u0027c[2]\u0027 accessed at index 2, which is out of bounds.",
    "hash_id": "fc73eae2d2459cffb9685edbfcd6423318bd42eda9636f32eedd0dba6fa44456",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/42_CheatSheet/functions/scanf.c",
    "line_number": "7",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "389cda57ef2b9f1dec46985d6fa4230106e6eeb9",
    "commit_id_repair": "58f8589762b381612ccef3e042acfb179a3dae6b",
    "warning_message": "scanf() without field width limits can crash with huge input data.",
    "hash_id": "9f38a2cb7cbb1d128760758d5abc25f3c9ee8c08df9be5462bb13f2e508fbeeb",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/42_CheatSheet/functions/scanf.c",
    "line_number": "9",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "389cda57ef2b9f1dec46985d6fa4230106e6eeb9",
    "commit_id_repair": "58f8589762b381612ccef3e042acfb179a3dae6b",
    "warning_message": "scanf() without field width limits can crash with huge input data.",
    "hash_id": "9f38a2cb7cbb1d128760758d5abc25f3c9ee8c08df9be5462bb13f2e508fbeeb",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: ptr",
    "cwe": "457",
    "file_path": "tmp_github/42_CheatSheet/functions/pointer.c",
    "line_number": "7",
    "column_number": "56",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/agavrel/42_CheatSheet.git",
    "commit_id": "529ab27b38db60b0ddb0f392f84fc2869c3c8456",
    "commit_id_repair": "de6aae436b0e39e9d5cfba0136d20be7c418b628",
    "warning_message": "Uninitialized variable: ptr",
    "hash_id": "c2d9982d8e5e131c8353d88308695b791238e1ac37fe854bfeda1ca7149417ff",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  }
]