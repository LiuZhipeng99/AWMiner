[
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027friendlyNameString\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/jSerialComm/src/test/c/testEnumerateWindows.c",
    "line_number": "67",
    "column_number": "6",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "15ef0dc582b8fe992916afd2e1b6118a60832079",
    "commit_id_repair": "be214519e61031352dec2d84bf540be51cc1c136",
    "warning_message": "Common realloc mistake: \u0027friendlyNameString\u0027 nulled but not freed upon failure",
    "hash_id": "9f04720876b90b44d7fdc68167e0cf1c0d5870b6ed4051ebe5062075e867dc47",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027portDescriptionString\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/jSerialComm/src/test/c/testEnumerateWindows.c",
    "line_number": "86",
    "column_number": "6",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "15ef0dc582b8fe992916afd2e1b6118a60832079",
    "commit_id_repair": "be214519e61031352dec2d84bf540be51cc1c136",
    "warning_message": "Common realloc mistake: \u0027portDescriptionString\u0027 nulled but not freed upon failure",
    "hash_id": "32c3b47d2049af87f6081a8be5123ac9345b8bdda0907812edcadc63eee3b7d4",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!device\u0027 is redundant or there is possible null pointer dereference: device.",
    "cwe": "476",
    "file_path": "tmp_github/jSerialComm/src/test/c/testEnumeratePosix.c",
    "line_number": "583",
    "column_number": "19",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "15ef0dc582b8fe992916afd2e1b6118a60832079",
    "commit_id_repair": "be214519e61031352dec2d84bf540be51cc1c136",
    "warning_message": "Either the condition \u0027!device\u0027 is redundant or there is possible null pointer dereference: device.",
    "hash_id": "244b1a65b47c620221aa7655160377447bd41deb855a0bc7234e7dc5d8688345",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!device\u0027 is redundant or there is possible null pointer dereference: device.",
    "cwe": "476",
    "file_path": "tmp_github/jSerialComm/src/test/c/testEnumeratePosix.c",
    "line_number": "580",
    "column_number": "16",
    "info": "Assuming that condition \u0027!device\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "15ef0dc582b8fe992916afd2e1b6118a60832079",
    "commit_id_repair": "be214519e61031352dec2d84bf540be51cc1c136",
    "warning_message": "Either the condition \u0027!device\u0027 is redundant or there is possible null pointer dereference: device.",
    "hash_id": "fc4338a37ed99bca4fff5e76678950e283d089380809630775c0323db0a29620",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!device\u0027 is redundant or there is possible null pointer dereference: device.",
    "cwe": "476",
    "file_path": "tmp_github/jSerialComm/src/test/c/testEnumeratePosix.c",
    "line_number": "584",
    "column_number": "17",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "15ef0dc582b8fe992916afd2e1b6118a60832079",
    "commit_id_repair": "be214519e61031352dec2d84bf540be51cc1c136",
    "warning_message": "Either the condition \u0027!device\u0027 is redundant or there is possible null pointer dereference: device.",
    "hash_id": "244b1a65b47c620221aa7655160377447bd41deb855a0bc7234e7dc5d8688345",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!device\u0027 is redundant or there is possible null pointer dereference: device.",
    "cwe": "476",
    "file_path": "tmp_github/jSerialComm/src/test/c/testEnumeratePosix.c",
    "line_number": "580",
    "column_number": "16",
    "info": "Assuming that condition \u0027!device\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "15ef0dc582b8fe992916afd2e1b6118a60832079",
    "commit_id_repair": "be214519e61031352dec2d84bf540be51cc1c136",
    "warning_message": "Either the condition \u0027!device\u0027 is redundant or there is possible null pointer dereference: device.",
    "hash_id": "fc4338a37ed99bca4fff5e76678950e283d089380809630775c0323db0a29620",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "When saving getc() return value in char variable there is loss of precision.  When getc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop \"while (EOF !\u003d (c \u003d getc());\" loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.",
    "cwe": "197",
    "file_path": "tmp_github/jSerialComm/src/test/c/testEnumeratePosix.c",
    "line_number": "62",
    "column_number": "27",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "15ef0dc582b8fe992916afd2e1b6118a60832079",
    "commit_id_repair": "be214519e61031352dec2d84bf540be51cc1c136",
    "warning_message": "Storing getc() return value in char variable and then comparing with EOF.",
    "hash_id": "1f164b32e20ec44daceead11965d5af69640f401f0ef5be834c4f2836d8dd735",
    "bug_severity": "warning",
    "bug_type": "checkCastIntToCharAndBack"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "When saving getc() return value in char variable there is loss of precision.  When getc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop \"while (EOF !\u003d (c \u003d getc());\" loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.",
    "cwe": "197",
    "file_path": "tmp_github/jSerialComm/src/test/c/testEnumeratePosix.c",
    "line_number": "81",
    "column_number": "27",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "15ef0dc582b8fe992916afd2e1b6118a60832079",
    "commit_id_repair": "be214519e61031352dec2d84bf540be51cc1c136",
    "warning_message": "Storing getc() return value in char variable and then comparing with EOF.",
    "hash_id": "1f164b32e20ec44daceead11965d5af69640f401f0ef5be834c4f2836d8dd735",
    "bug_severity": "warning",
    "bug_type": "checkCastIntToCharAndBack"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "When saving getc() return value in char variable there is loss of precision.  When getc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop \"while (EOF !\u003d (c \u003d getc());\" loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.",
    "cwe": "197",
    "file_path": "tmp_github/jSerialComm/src/test/c/testEnumeratePosix.c",
    "line_number": "109",
    "column_number": "27",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "15ef0dc582b8fe992916afd2e1b6118a60832079",
    "commit_id_repair": "be214519e61031352dec2d84bf540be51cc1c136",
    "warning_message": "Storing getc() return value in char variable and then comparing with EOF.",
    "hash_id": "1f164b32e20ec44daceead11965d5af69640f401f0ef5be834c4f2836d8dd735",
    "bug_severity": "warning",
    "bug_type": "checkCastIntToCharAndBack"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "When saving getc() return value in char variable there is loss of precision.  When getc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop \"while (EOF !\u003d (c \u003d getc());\" loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.",
    "cwe": "197",
    "file_path": "tmp_github/jSerialComm/src/test/c/testEnumeratePosix.c",
    "line_number": "129",
    "column_number": "27",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "15ef0dc582b8fe992916afd2e1b6118a60832079",
    "commit_id_repair": "be214519e61031352dec2d84bf540be51cc1c136",
    "warning_message": "Storing getc() return value in char variable and then comparing with EOF.",
    "hash_id": "1f164b32e20ec44daceead11965d5af69640f401f0ef5be834c4f2836d8dd735",
    "bug_severity": "warning",
    "bug_type": "checkCastIntToCharAndBack"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027friendlyNameString\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/jSerialComm/src/main/c/Windows/SerialPort_Windows.c",
    "line_number": "155",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "ea3c593776a206d9eb2281f846c80a99063de5df",
    "commit_id_repair": "05aae9078afdbaf4ce1e066d0314e4103f93426d",
    "warning_message": "Common realloc mistake: \u0027friendlyNameString\u0027 nulled but not freed upon failure",
    "hash_id": "22558d57bc708b0257fe0bbfe73b840c6f227bc07b0737552546b9b14e3be9d4",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Common realloc mistake: \u0027portDescriptionString\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/jSerialComm/src/main/c/Windows/SerialPort_Windows.c",
    "line_number": "175",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "ea3c593776a206d9eb2281f846c80a99063de5df",
    "commit_id_repair": "05aae9078afdbaf4ce1e066d0314e4103f93426d",
    "warning_message": "Common realloc mistake: \u0027portDescriptionString\u0027 nulled but not freed upon failure",
    "hash_id": "85a736fc650333f757fd3da763c22bae9097d2eedce70eebb266698a5cbb7197",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory leak: addUserToGroupCmd",
    "cwe": "401",
    "file_path": "tmp_github/jSerialComm/src/main/c/Posix/PosixHelperFunctions.c",
    "line_number": "1664",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "28c21ec4eb431c94ca02cb1cc3182211bce5565b",
    "commit_id_repair": "bc2ec3e8c4368197a64423d818ef6ce469435680",
    "warning_message": "Memory leak: addUserToGroupCmd",
    "hash_id": "c85d8a9b02811f61e157d21bf262fdb5acc9cece61153a276d8eb0430ee0a1f6",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "cwe": "476",
    "file_path": "tmp_github/jSerialComm/src/main/c/Windows/SerialPort_Windows.c",
    "line_number": "384",
    "column_number": "3",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "18d9daf552c59749a337201ddb958e6fe17186d4",
    "commit_id_repair": "d54555f5e429552a7bc4842c0110381041e161c7",
    "warning_message": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "hash_id": "0539ebb9d1f7c1f9fa0ec90312199eb15a7b562064362b35e917a97fa95f7fee",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "cwe": "476",
    "file_path": "tmp_github/jSerialComm/src/main/c/Windows/SerialPort_Windows.c",
    "line_number": "381",
    "column_number": "6",
    "info": "Assuming that condition \u0027!port\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "18d9daf552c59749a337201ddb958e6fe17186d4",
    "commit_id_repair": "d54555f5e429552a7bc4842c0110381041e161c7",
    "warning_message": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "hash_id": "3e30d7fe5ba10811fcb62cdf51333553867e75e1e12dbdba6c10ecec961cac4c",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "cwe": "476",
    "file_path": "tmp_github/jSerialComm/src/main/c/Windows/SerialPort_Windows.c",
    "line_number": "385",
    "column_number": "3",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "18d9daf552c59749a337201ddb958e6fe17186d4",
    "commit_id_repair": "d54555f5e429552a7bc4842c0110381041e161c7",
    "warning_message": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "hash_id": "0539ebb9d1f7c1f9fa0ec90312199eb15a7b562064362b35e917a97fa95f7fee",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "cwe": "476",
    "file_path": "tmp_github/jSerialComm/src/main/c/Windows/SerialPort_Windows.c",
    "line_number": "381",
    "column_number": "6",
    "info": "Assuming that condition \u0027!port\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "18d9daf552c59749a337201ddb958e6fe17186d4",
    "commit_id_repair": "d54555f5e429552a7bc4842c0110381041e161c7",
    "warning_message": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "hash_id": "3e30d7fe5ba10811fcb62cdf51333553867e75e1e12dbdba6c10ecec961cac4c",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "cwe": "476",
    "file_path": "tmp_github/jSerialComm/src/main/c/Posix/SerialPort_Posix.c",
    "line_number": "318",
    "column_number": "3",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "101739df33d76730739f70b62708155ac2f38a8d",
    "commit_id_repair": "18d9daf552c59749a337201ddb958e6fe17186d4",
    "warning_message": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "hash_id": "608c3ac747bf282a3068099037c52ae4754205bd858ea33dab5f64dec7d3d7a6",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "cwe": "476",
    "file_path": "tmp_github/jSerialComm/src/main/c/Posix/SerialPort_Posix.c",
    "line_number": "315",
    "column_number": "6",
    "info": "Assuming that condition \u0027!port\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "101739df33d76730739f70b62708155ac2f38a8d",
    "commit_id_repair": "18d9daf552c59749a337201ddb958e6fe17186d4",
    "warning_message": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "hash_id": "d45e94f959e8528009de24f55405138e35a18cef6f5b5d1afb13b665194dc421",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "cwe": "476",
    "file_path": "tmp_github/jSerialComm/src/main/c/Posix/SerialPort_Posix.c",
    "line_number": "319",
    "column_number": "3",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "101739df33d76730739f70b62708155ac2f38a8d",
    "commit_id_repair": "18d9daf552c59749a337201ddb958e6fe17186d4",
    "warning_message": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "hash_id": "608c3ac747bf282a3068099037c52ae4754205bd858ea33dab5f64dec7d3d7a6",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "cwe": "476",
    "file_path": "tmp_github/jSerialComm/src/main/c/Posix/SerialPort_Posix.c",
    "line_number": "315",
    "column_number": "6",
    "info": "Assuming that condition \u0027!port\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "101739df33d76730739f70b62708155ac2f38a8d",
    "commit_id_repair": "18d9daf552c59749a337201ddb958e6fe17186d4",
    "warning_message": "Either the condition \u0027!port\u0027 is redundant or there is possible null pointer dereference: port.",
    "hash_id": "d45e94f959e8528009de24f55405138e35a18cef6f5b5d1afb13b665194dc421",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "When saving getc() return value in char variable there is loss of precision.  When getc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop \"while (EOF !\u003d (c \u003d getc());\" loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.",
    "cwe": "197",
    "file_path": "tmp_github/jSerialComm/src/main/c/Posix/PosixHelperFunctions.c",
    "line_number": "118",
    "column_number": "27",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "0e6903362e1f6b8da702ebdfab965731f3e1e6ba",
    "commit_id_repair": "1ef34675296dd31d4a5608886ce15cfe1c09510a",
    "warning_message": "Storing getc() return value in char variable and then comparing with EOF.",
    "hash_id": "3ef6a95788b9bc050666b9de713e4602df6b50f550b5bc7bb3a928b94401f86f",
    "bug_severity": "warning",
    "bug_type": "checkCastIntToCharAndBack"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "When saving getc() return value in char variable there is loss of precision.  When getc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop \"while (EOF !\u003d (c \u003d getc());\" loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.",
    "cwe": "197",
    "file_path": "tmp_github/jSerialComm/src/main/c/Posix/PosixHelperFunctions.c",
    "line_number": "137",
    "column_number": "27",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "0e6903362e1f6b8da702ebdfab965731f3e1e6ba",
    "commit_id_repair": "1ef34675296dd31d4a5608886ce15cfe1c09510a",
    "warning_message": "Storing getc() return value in char variable and then comparing with EOF.",
    "hash_id": "3ef6a95788b9bc050666b9de713e4602df6b50f550b5bc7bb3a928b94401f86f",
    "bug_severity": "warning",
    "bug_type": "checkCastIntToCharAndBack"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "When saving getc() return value in char variable there is loss of precision.  When getc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop \"while (EOF !\u003d (c \u003d getc());\" loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.",
    "cwe": "197",
    "file_path": "tmp_github/jSerialComm/src/main/c/Android/jni/AndroidHelperFunctions.c",
    "line_number": "84",
    "column_number": "32",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "4e7e2711ff2c464cb994929d9df4140c05eb457b",
    "commit_id_repair": "80cbf0362fa909acace0b74a4a4da533e59eabb8",
    "warning_message": "Storing getc() return value in char variable and then comparing with EOF.",
    "hash_id": "8e85cec232fdf67bdf800dfd379750051a30cd32612634996d646f04ba71ced7",
    "bug_severity": "warning",
    "bug_type": "checkCastIntToCharAndBack"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Buffer is accessed out of bounds: commandString",
    "cwe": "788",
    "file_path": "tmp_github/jSerialComm/src/main/c/Windows/SerialPort_Windows.c",
    "line_number": "807",
    "column_number": "11",
    "info": "Buffer overrun",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "11864b4afe7581f76d66f4cb1f5d2f3e95beb9f9",
    "commit_id_repair": "0acc2346608902fe6a3d3f58873fc20fbdceede7",
    "warning_message": "Buffer is accessed out of bounds: commandString",
    "hash_id": "eddf669e14119d804086320ca34f635e47893667ebe473b979e6ac467d94a023",
    "bug_severity": "error",
    "bug_type": "bufferAccessOutOfBounds"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Buffer is accessed out of bounds: commandString",
    "cwe": "788",
    "file_path": "tmp_github/jSerialComm/src/main/c/Windows/SerialPort_Windows.c",
    "line_number": "826",
    "column_number": "11",
    "info": "Buffer overrun",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "11864b4afe7581f76d66f4cb1f5d2f3e95beb9f9",
    "commit_id_repair": "0acc2346608902fe6a3d3f58873fc20fbdceede7",
    "warning_message": "Buffer is accessed out of bounds: commandString",
    "hash_id": "eddf669e14119d804086320ca34f635e47893667ebe473b979e6ac467d94a023",
    "bug_severity": "error",
    "bug_type": "bufferAccessOutOfBounds"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Buffer is accessed out of bounds: commandString",
    "cwe": "788",
    "file_path": "tmp_github/jSerialComm/src/main/c/Windows/SerialPort_Windows.c",
    "line_number": "861",
    "column_number": "11",
    "info": "Buffer overrun",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "11864b4afe7581f76d66f4cb1f5d2f3e95beb9f9",
    "commit_id_repair": "0acc2346608902fe6a3d3f58873fc20fbdceede7",
    "warning_message": "Buffer is accessed out of bounds: commandString",
    "hash_id": "eddf669e14119d804086320ca34f635e47893667ebe473b979e6ac467d94a023",
    "bug_severity": "error",
    "bug_type": "bufferAccessOutOfBounds"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Buffer is accessed out of bounds: commandString",
    "cwe": "788",
    "file_path": "tmp_github/jSerialComm/src/main/c/Windows/SerialPort_Windows.c",
    "line_number": "880",
    "column_number": "11",
    "info": "Buffer overrun",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "11864b4afe7581f76d66f4cb1f5d2f3e95beb9f9",
    "commit_id_repair": "0acc2346608902fe6a3d3f58873fc20fbdceede7",
    "warning_message": "Buffer is accessed out of bounds: commandString",
    "hash_id": "eddf669e14119d804086320ca34f635e47893667ebe473b979e6ac467d94a023",
    "bug_severity": "error",
    "bug_type": "bufferAccessOutOfBounds"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "When saving getc() return value in char variable there is loss of precision.  When getc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop \"while (EOF !\u003d (c \u003d getc());\" loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.",
    "cwe": "197",
    "file_path": "tmp_github/jSerialComm/src/main/c/Linux/LinuxHelperFunctions.c",
    "line_number": "84",
    "column_number": "27",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "0260a0961adf338f7c50d5b82be3e5a134826d03",
    "commit_id_repair": "b4d38983555ea498271faf7a4c262ca4cb2ddf4b",
    "warning_message": "Storing getc() return value in char variable and then comparing with EOF.",
    "hash_id": "e82c72f8802cfa6871ccbb9697c17410923f8cd902be95b89defe28965431edd",
    "bug_severity": "warning",
    "bug_type": "checkCastIntToCharAndBack"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "When saving getc() return value in char variable there is loss of precision.  When getc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop \"while (EOF !\u003d (c \u003d getc());\" loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.",
    "cwe": "197",
    "file_path": "tmp_github/jSerialComm/src/main/c/Linux/LinuxHelperFunctions.c",
    "line_number": "103",
    "column_number": "27",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "0260a0961adf338f7c50d5b82be3e5a134826d03",
    "commit_id_repair": "b4d38983555ea498271faf7a4c262ca4cb2ddf4b",
    "warning_message": "Storing getc() return value in char variable and then comparing with EOF.",
    "hash_id": "e82c72f8802cfa6871ccbb9697c17410923f8cd902be95b89defe28965431edd",
    "bug_severity": "warning",
    "bug_type": "checkCastIntToCharAndBack"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "When saving getc() return value in char variable there is loss of precision.  When getc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop \"while (EOF !\u003d (c \u003d getc());\" loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.",
    "cwe": "197",
    "file_path": "tmp_github/jSerialComm/src/main/cpp/Android/jni/AndroidHelperFunctions.c",
    "line_number": "67",
    "column_number": "27",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "f49e8803a41f6dac586ad907fc64ab9e360d5600",
    "commit_id_repair": "3bcda2e64e71682e2177637f1e7b665bc723936a",
    "warning_message": "Storing getc() return value in char variable and then comparing with EOF.",
    "hash_id": "8f89ebcf327d8c2cc15c58524a4e3bb2e3eb176ea664d1478abe11951aefeef9",
    "bug_severity": "warning",
    "bug_type": "checkCastIntToCharAndBack"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "When saving getc() return value in char variable there is loss of precision.  When getc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop \"while (EOF !\u003d (c \u003d getc());\" loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character.",
    "cwe": "197",
    "file_path": "tmp_github/jSerialComm/src/main/cpp/Linux/LinuxHelperFunctions.c",
    "line_number": "65",
    "column_number": "27",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/Fazecast/jSerialComm.git",
    "commit_id": "f49e8803a41f6dac586ad907fc64ab9e360d5600",
    "commit_id_repair": "3bcda2e64e71682e2177637f1e7b665bc723936a",
    "warning_message": "Storing getc() return value in char variable and then comparing with EOF.",
    "hash_id": "aa09df039f9916aa548362674f9e93200bc3d0cac7d9f892e789ccf946a6132a",
    "bug_severity": "warning",
    "bug_type": "checkCastIntToCharAndBack"
  }
]