[
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Redundant assignment of \u0027score\u0027 to itself.",
    "cwe": "398",
    "file_path": "tmp_github/darknet/examples/art.c",
    "line_number": "46",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "Redundant assignment of \u0027score\u0027 to itself.",
    "hash_id": "77c482715caa0edff502ff49715cc9e1cc88ecfd1432c8a13967f830608bf04a",
    "bug_severity": "warning",
    "bug_type": "selfAssignment"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Uninitialized variable: input",
    "cwe": "457",
    "file_path": "tmp_github/darknet/examples/lsd.c",
    "line_number": "425",
    "column_number": "50",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "Uninitialized variable: input",
    "hash_id": "90237e8e6e63ede245e8767862fc6d00342ec70a8503f5baab49a7f7e88db02f",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Uninitialized variable: input",
    "cwe": "457",
    "file_path": "tmp_github/darknet/examples/lsd.c",
    "line_number": "401",
    "column_number": "19",
    "info": "Assignment \u0027input\u003dbuff\u0027, assigned value is \u003cUninit\u003e",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "Uninitialized variable: input",
    "hash_id": "2388b7e082962d0ec0925e93ee9d0556109817a48a6a2051282430dc45a2055d",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Common realloc mistake: \u0027d\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/darknet/examples/rnn.c",
    "line_number": "24",
    "column_number": "13",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "Common realloc mistake: \u0027d\u0027 nulled but not freed upon failure",
    "hash_id": "4e3cea397e2af7f0d96fa94fd668e869e9d25b3505487f89120b38e5f859d6db",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Common realloc mistake: \u0027d\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/darknet/examples/rnn.c",
    "line_number": "30",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "Common realloc mistake: \u0027d\u0027 nulled but not freed upon failure",
    "hash_id": "4e3cea397e2af7f0d96fa94fd668e869e9d25b3505487f89120b38e5f859d6db",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Common realloc mistake: \u0027d\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/darknet/examples/rnn.c",
    "line_number": "46",
    "column_number": "13",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "Common realloc mistake: \u0027d\u0027 nulled but not freed upon failure",
    "hash_id": "4e3cea397e2af7f0d96fa94fd668e869e9d25b3505487f89120b38e5f859d6db",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Common realloc mistake: \u0027d\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/darknet/examples/rnn.c",
    "line_number": "51",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "Common realloc mistake: \u0027d\u0027 nulled but not freed upon failure",
    "hash_id": "4e3cea397e2af7f0d96fa94fd668e869e9d25b3505487f89120b38e5f859d6db",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Identical inner \u0027if\u0027 condition is always true (outer condition is \u0027curr\u003cm\u0027 and inner condition is \u0027curr\u003cm\u0027).",
    "cwe": "398",
    "file_path": "tmp_github/darknet/examples/classifier.c",
    "line_number": "798",
    "column_number": "17",
    "info": "identical inner condition: curr\u003cm",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "Identical inner \u0027if\u0027 condition is always true.",
    "hash_id": "eca51e77ddcc0146dd4b43a78bff01a55db6d43da0284ddb3fd3c111c9081e63",
    "bug_severity": "warning",
    "bug_type": "identicalInnerCondition"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Identical inner \u0027if\u0027 condition is always true (outer condition is \u0027curr\u003cm\u0027 and inner condition is \u0027curr\u003cm\u0027).",
    "cwe": "398",
    "file_path": "tmp_github/darknet/examples/classifier.c",
    "line_number": "792",
    "column_number": "32",
    "info": "outer condition: curr\u003cm",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "Identical inner \u0027if\u0027 condition is always true.",
    "hash_id": "eb8e0d154d63547d77c186bdbdd0e9bf3388219e3dd06b021345a2e9c2dae5d0",
    "bug_severity": "warning",
    "bug_type": "identicalInnerCondition"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/darknet/examples/go.c",
    "line_number": "507",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "scanf() without field width limits can crash with huge input data.",
    "hash_id": "0e35643e902a59012bb7496eff4a3353053edeafbd52ae84afb38a36a5ed8241",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/darknet/examples/go.c",
    "line_number": "525",
    "column_number": "13",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "scanf() without field width limits can crash with huge input data.",
    "hash_id": "0e35643e902a59012bb7496eff4a3353053edeafbd52ae84afb38a36a5ed8241",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/darknet/examples/go.c",
    "line_number": "581",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "scanf() without field width limits can crash with huge input data.",
    "hash_id": "0e35643e902a59012bb7496eff4a3353053edeafbd52ae84afb38a36a5ed8241",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/darknet/examples/go.c",
    "line_number": "619",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "scanf() without field width limits can crash with huge input data.",
    "hash_id": "0e35643e902a59012bb7496eff4a3353053edeafbd52ae84afb38a36a5ed8241",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/darknet/examples/go.c",
    "line_number": "651",
    "column_number": "13",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "1ef829e585c86e14504e4aae9ee0085c8f6a80be",
    "commit_id_repair": "56d69e73aba37283ea7b9726b81afd2f79cd1134",
    "warning_message": "scanf() without field width limits can crash with huge input data.",
    "hash_id": "0e35643e902a59012bb7496eff4a3353053edeafbd52ae84afb38a36a5ed8241",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/darknet/src/data.c",
    "line_number": "566",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "88b9ecb41438cc4cd086720b168b8dba4b02cb8e",
    "commit_id_repair": "579e588c84c0d5bf23f9ec7197af90e5bb3579e9",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "6f61a620daa24b09680dfc73fdc15a5de24076f36f352ad5a2a67921920a2ddc",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Common realloc mistake: \u0027map\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/darknet/src/utils.c",
    "line_number": "21",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "0d6b107ed20c22412ccf3a5056cffdb35bc25534",
    "commit_id_repair": "648407a5e317f72bdc21f5bcaf70a7fbb75731cd",
    "warning_message": "Common realloc mistake: \u0027map\u0027 nulled but not freed upon failure",
    "hash_id": "482112d8f1770ce434001c17d84c38d19708314c31c4020491dfd56adfd4dbda",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/darknet/src/tree.c",
    "line_number": "19",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "d8adaf8ea6a31a380f6bf1fe65e88b661d3bb51e",
    "commit_id_repair": "91f95c715bff84094fc18bad6a8f938291b9b0f5",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "f30bbc4bb2e6526854ffe9b58678fa0be2debc31b8feb9cf225870f3116f0c6a",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Finding variables \u0027w_offset\u0027 and \u0027h_offset\u0027 that are assigned the same expression is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.",
    "cwe": "398",
    "file_path": "tmp_github/darknet/src/maxpool_layer.c",
    "line_number": "78",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "8f1b4e0962857d402f9d017fcbf387ef0eceb7c4",
    "commit_id_repair": "b8eb8b0a4016232c8da95c26501ac60ea9491901",
    "warning_message": "Same expression used in consecutive assignments of \u0027w_offset\u0027 and \u0027h_offset\u0027.",
    "hash_id": "2ce62a04c60f908fec4a0bfefb3cf289e40a4b9e4e30b164fe61dccb5ebbb87f",
    "bug_severity": "style",
    "bug_type": "duplicateAssignExpression"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Finding variables \u0027w_offset\u0027 and \u0027h_offset\u0027 that are assigned the same expression is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.",
    "cwe": "398",
    "file_path": "tmp_github/darknet/src/maxpool_layer.c",
    "line_number": "79",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "8f1b4e0962857d402f9d017fcbf387ef0eceb7c4",
    "commit_id_repair": "b8eb8b0a4016232c8da95c26501ac60ea9491901",
    "warning_message": "Same expression used in consecutive assignments of \u0027w_offset\u0027 and \u0027h_offset\u0027.",
    "hash_id": "2ce62a04c60f908fec4a0bfefb3cf289e40a4b9e4e30b164fe61dccb5ebbb87f",
    "bug_severity": "style",
    "bug_type": "duplicateAssignExpression"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Either the condition \u0027!l\u0027 is redundant or there is possible null pointer dereference: l.",
    "cwe": "476",
    "file_path": "tmp_github/darknet/src/parser.c",
    "line_number": "254",
    "column_number": "22",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "0cbfa4646128206300b9a30586615c3698abfb76",
    "commit_id_repair": "dc0d7bb8a8779dc194ddaa57260815c1195d398e",
    "warning_message": "Either the condition \u0027!l\u0027 is redundant or there is possible null pointer dereference: l.",
    "hash_id": "2d205053de1f0bdbc9ed98ca44cb0e2e9c3b279f67bf14e41a4b4aab4b44304c",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Either the condition \u0027!l\u0027 is redundant or there is possible null pointer dereference: l.",
    "cwe": "476",
    "file_path": "tmp_github/darknet/src/parser.c",
    "line_number": "255",
    "column_number": "8",
    "info": "Assuming that condition \u0027!l\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "0cbfa4646128206300b9a30586615c3698abfb76",
    "commit_id_repair": "dc0d7bb8a8779dc194ddaa57260815c1195d398e",
    "warning_message": "Either the condition \u0027!l\u0027 is redundant or there is possible null pointer dereference: l.",
    "hash_id": "6ab07815cb4a61e180473f1fe71b88155f0b6530c5be32aae20f112310e86855",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Common realloc mistake: \u0027boxes\u0027 nulled but not freed upon failure",
    "cwe": "401",
    "file_path": "tmp_github/darknet/src/data.c",
    "line_number": "80",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/pjreddie/darknet.git",
    "commit_id": "dcb000b553d051429a49c8729dc5b1af632e8532",
    "commit_id_repair": "4af116e996fe04b739bf6eee211be36660c212f4",
    "warning_message": "Common realloc mistake: \u0027boxes\u0027 nulled but not freed upon failure",
    "hash_id": "52a648baedc21b999ff6abb5485f07a208679dd1dbef789651eab944c394d62e",
    "bug_severity": "error",
    "bug_type": "memleakOnRealloc"
  }
]