[
  {
    "cppcheck_version": "2.10",
    "verbose": "Uninitialized variable: i",
    "cwe": "457",
    "file_path": "tmp_github/cava/config.c",
    "line_number": "478",
    "column_number": "18",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "fb407329c2c03a5341154b0db1a7faeb43b51bec",
    "commit_id_repair": "05a3790c65f397bd5a76855b8f11954ca8e38938",
    "warning_message": "Uninitialized variable: i",
    "hash_id": "96ed49d5477ad7615fe21f39010ace40a40d7d996845def5cd31bbfaf511f3df",
    "bug_severity": "error",
    "bug_type": "legacyUninitvar"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory leak: cut_off_frequency",
    "cwe": "401",
    "file_path": "tmp_github/cava/cavalib_test.c",
    "line_number": "18",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "95c33091723802a8713f7da8adb0935ba9fbfb5a",
    "commit_id_repair": "7f2f0ddcc469f7122c39342ccd647f6fbbda1622",
    "warning_message": "Memory leak: cut_off_frequency",
    "hash_id": "4ddeb9d0cb429d0d6875bf524ff969a7b2f574ab0dfec526b3c22bba3733eada",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "574",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "03a8c85cf5420a40ea49161feb4a9654848e7006",
    "commit_id_repair": "97a811060d2e35c686269eab2b18c8b0009de71f",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "578",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "03a8c85cf5420a40ea49161feb4a9654848e7006",
    "commit_id_repair": "97a811060d2e35c686269eab2b18c8b0009de71f",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "579",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "03a8c85cf5420a40ea49161feb4a9654848e7006",
    "commit_id_repair": "97a811060d2e35c686269eab2b18c8b0009de71f",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "592",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "03a8c85cf5420a40ea49161feb4a9654848e7006",
    "commit_id_repair": "97a811060d2e35c686269eab2b18c8b0009de71f",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "599",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "03a8c85cf5420a40ea49161feb4a9654848e7006",
    "commit_id_repair": "97a811060d2e35c686269eab2b18c8b0009de71f",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "600",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "03a8c85cf5420a40ea49161feb4a9654848e7006",
    "commit_id_repair": "97a811060d2e35c686269eab2b18c8b0009de71f",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Size of pointer \u0027userEQ\u0027 used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write \u0027sizeof(*userEQ)\u0027.",
    "cwe": "467",
    "file_path": "tmp_github/cava/config.c",
    "line_number": "473",
    "column_number": "12",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "b6fbc42c2921a50a240c26edfdd13ef474319036",
    "commit_id_repair": "f3dba07be4ecc23b75e37ab9d4c1fe5c8d57a8eb",
    "warning_message": "Size of pointer \u0027userEQ\u0027 used instead of size of its data.",
    "hash_id": "a92db62a4e521a3a0428cddd4e3f7faa37175b38e819f0858edcd20d9ff1af6f",
    "bug_severity": "warning",
    "bug_type": "pointerSize"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Uninitialized variable: channels",
    "cwe": "457",
    "file_path": "tmp_github/cava/input/sndio.c",
    "line_number": "37",
    "column_number": "56",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "9c0c41435f9c841144bea536f483359091bb53e2",
    "commit_id_repair": "154a41904ad07aad584fea49cb5297c737593ae8",
    "warning_message": "Uninitialized variable: channels",
    "hash_id": "16d605130532d688c56f04fc6fa32e50112f78795e9732a0242ea6242f6c1c31",
    "bug_severity": "error",
    "bug_type": "legacyUninitvar"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Size of pointer \u0027smooth\u0027 used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write \u0027sizeof(*smooth)\u0027.",
    "cwe": "467",
    "file_path": "tmp_github/cava/config.c",
    "line_number": "462",
    "column_number": "12",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "194c199c3f582785e62059bf0a8f7be3be91fe25",
    "commit_id_repair": "d6b2cbdd4c39e828dfa286b094e634043c1d902d",
    "warning_message": "Size of pointer \u0027smooth\u0027 used instead of size of its data.",
    "hash_id": "ca705ea39cc4eaca2b5f7bc483103893f9b32947811078da0b8c943cd5e543a2",
    "bug_severity": "warning",
    "bug_type": "pointerSize"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Size of pointer \u0027userEQ\u0027 used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write \u0027sizeof(*userEQ)\u0027.",
    "cwe": "467",
    "file_path": "tmp_github/cava/config.c",
    "line_number": "455",
    "column_number": "12",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "e5702f08ca3c966d38368e06e487c2c4230be8c2",
    "commit_id_repair": "194c199c3f582785e62059bf0a8f7be3be91fe25",
    "warning_message": "Size of pointer \u0027userEQ\u0027 used instead of size of its data.",
    "hash_id": "a92db62a4e521a3a0428cddd4e3f7faa37175b38e819f0858edcd20d9ff1af6f",
    "bug_severity": "warning",
    "bug_type": "pointerSize"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Size of pointer \u0027smooth\u0027 used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write \u0027sizeof(*smooth)\u0027.",
    "cwe": "467",
    "file_path": "tmp_github/cava/config.c",
    "line_number": "462",
    "column_number": "12",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "626ba5501848c0cf8734e78612af90ce78a6af89",
    "commit_id_repair": "ee96026023d331a0e68b7f68aa31f3cc847c85a3",
    "warning_message": "Size of pointer \u0027smooth\u0027 used instead of size of its data.",
    "hash_id": "ca705ea39cc4eaca2b5f7bc483103893f9b32947811078da0b8c943cd5e543a2",
    "bug_severity": "warning",
    "bug_type": "pointerSize"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Uninitialized variable: channels",
    "cwe": "457",
    "file_path": "tmp_github/cava/input/sndio.c",
    "line_number": "21",
    "column_number": "34",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "c91050774e919133ddc225dc0ea91afdfb90e77f",
    "commit_id_repair": "ddfc3bcdea46bf779abbb5b124b76c6b49a83877",
    "warning_message": "Uninitialized variable: channels",
    "hash_id": "d16e4f635a04df9a0fe92c49b6816902a92c534f129e467ff7ad5af161ba48d8",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "584",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "d8fb195d77cd9d82d6c4cc652818cdc2dae63f4b",
    "commit_id_repair": "e258288e3525692182f7c08db54d814c4219f9c8",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "588",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "d8fb195d77cd9d82d6c4cc652818cdc2dae63f4b",
    "commit_id_repair": "e258288e3525692182f7c08db54d814c4219f9c8",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "589",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "d8fb195d77cd9d82d6c4cc652818cdc2dae63f4b",
    "commit_id_repair": "e258288e3525692182f7c08db54d814c4219f9c8",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "602",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "d8fb195d77cd9d82d6c4cc652818cdc2dae63f4b",
    "commit_id_repair": "e258288e3525692182f7c08db54d814c4219f9c8",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "609",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "d8fb195d77cd9d82d6c4cc652818cdc2dae63f4b",
    "commit_id_repair": "e258288e3525692182f7c08db54d814c4219f9c8",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "610",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "d8fb195d77cd9d82d6c4cc652818cdc2dae63f4b",
    "commit_id_repair": "e258288e3525692182f7c08db54d814c4219f9c8",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "584",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "99efe1c19ced1e6609f4f98303d85aacf12f1368",
    "commit_id_repair": "04eabc7d8da04b96e9987f7f27047d69067dfd48",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "588",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "99efe1c19ced1e6609f4f98303d85aacf12f1368",
    "commit_id_repair": "04eabc7d8da04b96e9987f7f27047d69067dfd48",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "589",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "99efe1c19ced1e6609f4f98303d85aacf12f1368",
    "commit_id_repair": "04eabc7d8da04b96e9987f7f27047d69067dfd48",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "602",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "99efe1c19ced1e6609f4f98303d85aacf12f1368",
    "commit_id_repair": "04eabc7d8da04b96e9987f7f27047d69067dfd48",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "609",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "99efe1c19ced1e6609f4f98303d85aacf12f1368",
    "commit_id_repair": "04eabc7d8da04b96e9987f7f27047d69067dfd48",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "610",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "99efe1c19ced1e6609f4f98303d85aacf12f1368",
    "commit_id_repair": "04eabc7d8da04b96e9987f7f27047d69067dfd48",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "syntax error",
    "file_path": "tmp_github/cava/input/shmem.c",
    "line_number": "76",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "c02528dbd7a1dad0f9a97166e098944c49d9e83e",
    "commit_id_repair": "9610991b3a90ba676a759f58967164a52b5e33d8",
    "warning_message": "syntax error",
    "hash_id": "0bef327d79ba4016aab9501e550efa08c2d0382a60d2cc57bbd562e04fd4097a",
    "bug_severity": "error",
    "bug_type": "syntaxError"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "584",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "3cc2f9f855bf15798f73bc56c833c687316c02f5",
    "commit_id_repair": "3c85435a886c97ef050676606242f737ec8027b7",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "588",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "3cc2f9f855bf15798f73bc56c833c687316c02f5",
    "commit_id_repair": "3c85435a886c97ef050676606242f737ec8027b7",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "589",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "3cc2f9f855bf15798f73bc56c833c687316c02f5",
    "commit_id_repair": "3c85435a886c97ef050676606242f737ec8027b7",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "602",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "3cc2f9f855bf15798f73bc56c833c687316c02f5",
    "commit_id_repair": "3c85435a886c97ef050676606242f737ec8027b7",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "609",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "3cc2f9f855bf15798f73bc56c833c687316c02f5",
    "commit_id_repair": "3c85435a886c97ef050676606242f737ec8027b7",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/cava/iniparser/src/iniparser.c",
    "line_number": "610",
    "column_number": "16",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "3cc2f9f855bf15798f73bc56c833c687316c02f5",
    "commit_id_repair": "3c85435a886c97ef050676606242f737ec8027b7",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "afccf89563e1622e594baa2b4d7331b899dc3f6432eacf82b930b846e768d8b1",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory leak: audio.source",
    "cwe": "401",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "708",
    "column_number": "6",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "8143270d743e6a4001485c5a66e5123de23f7de3",
    "commit_id_repair": "7a224dfa15fe5fced0886afd8f88f5076cc8fc7d",
    "warning_message": "Memory leak: audio.source",
    "hash_id": "f7aa866b6b03939f2521df2d27728b60289d53da5eceac92b856efed745fe912",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory leak: audio.audio_out_l",
    "cwe": "401",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "694",
    "column_number": "6",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "db060da3b052f0adf083c0bb1c5351e861795862",
    "commit_id_repair": "7fa985fdc663eeabf4b9d07717c44997f0381de7",
    "warning_message": "Memory leak: audio.audio_out_l",
    "hash_id": "03b53928927ba35d117be9b244a91862867be05f52ba8f40c0cbd7145d82ceb8",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Memory leak: audio.audio_out_r",
    "cwe": "401",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "694",
    "column_number": "6",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "db060da3b052f0adf083c0bb1c5351e861795862",
    "commit_id_repair": "7fa985fdc663eeabf4b9d07717c44997f0381de7",
    "warning_message": "Memory leak: audio.audio_out_r",
    "hash_id": "38cf518d3f0d274e8f82ebff6aa8463a80831b2aeaa27d2d42e53badcf6c08a7",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "%d in format string (no. 2) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "768",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "6a07a23fcb5aea4e663513cb35f34d5524b293d8",
    "commit_id_repair": "6e27b5a9c158fc64212186c234a9705123644c1d",
    "warning_message": "%d in format string (no. 2) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "hash_id": "25f19b1c502f0c108efba58ba28d29882614a7534a0247a30df99fda04f9d724",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_sint"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "%x in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/cava/output/terminal_ncurses.c",
    "line_number": "32",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "eed0bcadd93de015966f277e7339e759e6a0a8b2",
    "commit_id_repair": "29dc2b07ca6947762a69caf8eb295f8986d74ddb",
    "warning_message": "%x in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "91b66a34e84ef5c3e4cffb3fe0f4487c543837f8ba5b33cf01d982a6e3aa3fb3",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "%x in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/cava/output/terminal_ncurses.c",
    "line_number": "32",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "eed0bcadd93de015966f277e7339e759e6a0a8b2",
    "commit_id_repair": "29dc2b07ca6947762a69caf8eb295f8986d74ddb",
    "warning_message": "%x in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "c94d88b94e6d059dd2ac10c2954601146dcd4492e9e2df16fd17f871f90beec1",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "%x in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/cava/output/terminal_ncurses.c",
    "line_number": "32",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "eed0bcadd93de015966f277e7339e759e6a0a8b2",
    "commit_id_repair": "29dc2b07ca6947762a69caf8eb295f8986d74ddb",
    "warning_message": "%x in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "ccb6d8167928e0ae6669d528ada6609f598163d3c5910ef73672f655e808958a",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Uninitialized variables: ret.R, ret.G, ret.B",
    "cwe": "457",
    "file_path": "tmp_github/cava/output/terminal_ncurses.c",
    "line_number": "39",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "eed0bcadd93de015966f277e7339e759e6a0a8b2",
    "commit_id_repair": "29dc2b07ca6947762a69caf8eb295f8986d74ddb",
    "warning_message": "Uninitialized variables: ret.R, ret.G, ret.B",
    "hash_id": "fbb667f93e8674abd1b77aae681e959d73ed29f3d5f161e70bd89b5190fb950b",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Uninitialized variables: ret.R, ret.G, ret.B",
    "cwe": "457",
    "file_path": "tmp_github/cava/output/terminal_ncurses.c",
    "line_number": "21",
    "column_number": "13",
    "info": "Assuming condition is false",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "6a3db22ba1ac12cae13b5968949586594278a712",
    "commit_id_repair": "8368fb863dd447192dead47893f5af093537866c",
    "warning_message": "Uninitialized variables: ret.R, ret.G, ret.B",
    "hash_id": "ccc39e58d54c88256a73637102b9e502bcc94afb3ac89ff5342ee29c43f66fa9",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027configHome!\u003dNULL\u0027 is redundant or there is possible null pointer dereference: configHome.",
    "cwe": "476",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "104",
    "column_number": "37",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "0f8c3b06ca47eb240bc1d05d07e7f9c9b8233a7d",
    "commit_id_repair": "abfcfc0a627c4c78c27961db070ccf16467fd29a",
    "warning_message": "Either the condition \u0027configHome!\u003dNULL\u0027 is redundant or there is possible null pointer dereference: configHome.",
    "hash_id": "cfc90f73b7aa9453967e85222d6e54f4d1e883550e7636aac6caf00196516ea5",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Either the condition \u0027configHome!\u003dNULL\u0027 is redundant or there is possible null pointer dereference: configHome.",
    "cwe": "476",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "102",
    "column_number": "19",
    "info": "Assuming that condition \u0027configHome!\u003dNULL\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "0f8c3b06ca47eb240bc1d05d07e7f9c9b8233a7d",
    "commit_id_repair": "abfcfc0a627c4c78c27961db070ccf16467fd29a",
    "warning_message": "Either the condition \u0027configHome!\u003dNULL\u0027 is redundant or there is possible null pointer dereference: configHome.",
    "hash_id": "3de8d6093258eebce8a3d1eae3ebfa5b6ba05d038f4f4201a61d90d4bfae7641",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Null pointer dereference",
    "cwe": "476",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "104",
    "column_number": "37",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "0f8c3b06ca47eb240bc1d05d07e7f9c9b8233a7d",
    "commit_id_repair": "abfcfc0a627c4c78c27961db070ccf16467fd29a",
    "warning_message": "Null pointer dereference",
    "hash_id": "0550d1686ea92c08c0e498644d43e397aa9a77398b22f381cb42d19fefeed002",
    "bug_severity": "error",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index -1, which is out of bounds.",
    "cwe": "786",
    "file_path": "tmp_github/cava/input/fifo.c",
    "line_number": "41",
    "column_number": "18",
    "info": "Negative array index",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "02a1fe0bb10122422eeb3c8075cecc4ee10e933b",
    "commit_id_repair": "9712160d1d82ee0c273ae364b578a171e1982137",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index -1, which is out of bounds.",
    "hash_id": "4df9aa99ac9623be86c53a289f0e782b4ca01e1e7666997cf29cf5814b3486c6",
    "bug_severity": "error",
    "bug_type": "negativeIndex"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index -1, which is out of bounds.",
    "cwe": "786",
    "file_path": "tmp_github/cava/input/fifo.c",
    "line_number": "39",
    "column_number": "13",
    "info": "Assignment \u0027q\u003d0\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "02a1fe0bb10122422eeb3c8075cecc4ee10e933b",
    "commit_id_repair": "9712160d1d82ee0c273ae364b578a171e1982137",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index -1, which is out of bounds.",
    "hash_id": "d81959466d75f9a57f68af255a9d049721839ad9dad57574be70f596d1a1598f",
    "bug_severity": "error",
    "bug_type": "negativeIndex"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index -3, which is out of bounds.",
    "cwe": "786",
    "file_path": "tmp_github/cava/input/fifo.c",
    "line_number": "48",
    "column_number": "18",
    "info": "Negative array index",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "02a1fe0bb10122422eeb3c8075cecc4ee10e933b",
    "commit_id_repair": "9712160d1d82ee0c273ae364b578a171e1982137",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index -3, which is out of bounds.",
    "hash_id": "27a86d0abb96a6b61e3519dabe11a3e34db217cca492dab91dba98dd3a204751",
    "bug_severity": "error",
    "bug_type": "negativeIndex"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index -3, which is out of bounds.",
    "cwe": "786",
    "file_path": "tmp_github/cava/input/fifo.c",
    "line_number": "39",
    "column_number": "13",
    "info": "Assignment \u0027q\u003d0\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "02a1fe0bb10122422eeb3c8075cecc4ee10e933b",
    "commit_id_repair": "9712160d1d82ee0c273ae364b578a171e1982137",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index -3, which is out of bounds.",
    "hash_id": "95b6d8e7542dbcfe2eca5fedc5a6354b7b7c69089afd9372c64b0f7bbe638670",
    "bug_severity": "error",
    "bug_type": "negativeIndex"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index -2, which is out of bounds.",
    "cwe": "786",
    "file_path": "tmp_github/cava/input/fifo.c",
    "line_number": "50",
    "column_number": "16",
    "info": "Negative array index",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "02a1fe0bb10122422eeb3c8075cecc4ee10e933b",
    "commit_id_repair": "9712160d1d82ee0c273ae364b578a171e1982137",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index -2, which is out of bounds.",
    "hash_id": "2038b690e6caf3c3fbaa2b64525ffb5b2432751b868d47d6601145197b87fcc9",
    "bug_severity": "error",
    "bug_type": "negativeIndex"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index -2, which is out of bounds.",
    "cwe": "786",
    "file_path": "tmp_github/cava/input/fifo.c",
    "line_number": "39",
    "column_number": "13",
    "info": "Assignment \u0027q\u003d0\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "02a1fe0bb10122422eeb3c8075cecc4ee10e933b",
    "commit_id_repair": "9712160d1d82ee0c273ae364b578a171e1982137",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index -2, which is out of bounds.",
    "hash_id": "6724971ec853e4bc0d25872a98bed31b3b6c569771279aba62272df836a61526",
    "bug_severity": "error",
    "bug_type": "negativeIndex"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "%lc in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/cava/output/terminal_noncurses.c",
    "line_number": "119",
    "column_number": "36",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "651f72eb15d6ff17406da414a0f9580133c1875d",
    "commit_id_repair": "2651195b640500c13e18e4d6bca84889a7c4c088",
    "warning_message": "%lc in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed int\u0027.",
    "hash_id": "396e1aaca27d03d136e01b492f3a8b38110fc3d4a992dc792dbea3fccf45ea68",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index -1, which is out of bounds.",
    "cwe": "786",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "99",
    "column_number": "18",
    "info": "Negative array index",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "5ec137703628971ad9d0af9788e514ebb2fed19d",
    "commit_id_repair": "4c3f9ae0ee03f7048298480273c82c5c93da3239",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index -1, which is out of bounds.",
    "hash_id": "1b3cb4137ad60427f924ee811568a6f746ba106b7632dfc8334848b2d22de89d",
    "bug_severity": "error",
    "bug_type": "negativeIndex"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index -1, which is out of bounds.",
    "cwe": "786",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "97",
    "column_number": "13",
    "info": "Assignment \u0027q\u003d0\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "5ec137703628971ad9d0af9788e514ebb2fed19d",
    "commit_id_repair": "4c3f9ae0ee03f7048298480273c82c5c93da3239",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index -1, which is out of bounds.",
    "hash_id": "9c299354f064643ac94dd27a03d06568de797cd6e3c41e61fd76b7f2a1989696",
    "bug_severity": "error",
    "bug_type": "negativeIndex"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index -3, which is out of bounds.",
    "cwe": "786",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "106",
    "column_number": "18",
    "info": "Negative array index",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "5ec137703628971ad9d0af9788e514ebb2fed19d",
    "commit_id_repair": "4c3f9ae0ee03f7048298480273c82c5c93da3239",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index -3, which is out of bounds.",
    "hash_id": "9d38a165585eb4d7773d2eaf91e03fe25a3a84d197cf8619e0f6eefdcb1d3a7c",
    "bug_severity": "error",
    "bug_type": "negativeIndex"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index -3, which is out of bounds.",
    "cwe": "786",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "97",
    "column_number": "13",
    "info": "Assignment \u0027q\u003d0\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "5ec137703628971ad9d0af9788e514ebb2fed19d",
    "commit_id_repair": "4c3f9ae0ee03f7048298480273c82c5c93da3239",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index -3, which is out of bounds.",
    "hash_id": "7094e697d09489ca02dacf5046b59b58e0ad85517b0a8dd57950303b66f8513a",
    "bug_severity": "error",
    "bug_type": "negativeIndex"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index -2, which is out of bounds.",
    "cwe": "786",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "108",
    "column_number": "16",
    "info": "Negative array index",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "5ec137703628971ad9d0af9788e514ebb2fed19d",
    "commit_id_repair": "4c3f9ae0ee03f7048298480273c82c5c93da3239",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index -2, which is out of bounds.",
    "hash_id": "8a9fb45be029bf2936ea44f8952312e9e906035005951d19b372d7de4890726e",
    "bug_severity": "error",
    "bug_type": "negativeIndex"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index -2, which is out of bounds.",
    "cwe": "786",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "97",
    "column_number": "13",
    "info": "Assignment \u0027q\u003d0\u0027, assigned value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "5ec137703628971ad9d0af9788e514ebb2fed19d",
    "commit_id_repair": "4c3f9ae0ee03f7048298480273c82c5c93da3239",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index -2, which is out of bounds.",
    "hash_id": "9b729035c815f58d9a7bb590eade6f858622504d86719f9ac64caa2a0d0183e9",
    "bug_severity": "error",
    "bug_type": "negativeIndex"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "%d in format string (no. 2) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "438",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "5ec137703628971ad9d0af9788e514ebb2fed19d",
    "commit_id_repair": "4c3f9ae0ee03f7048298480273c82c5c93da3239",
    "warning_message": "%d in format string (no. 2) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "hash_id": "25f19b1c502f0c108efba58ba28d29882614a7534a0247a30df99fda04f9d724",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_sint"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "%f in format string (no. 7) requires \u0027double\u0027 but the argument type is \u0027int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "672",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "19937a6c0bd9f398d3b264bfd8ec77dda9277bb7",
    "commit_id_repair": "4824e0ff4bfff6019ba7397cc6a7325ffc5bc9fc",
    "warning_message": "%f in format string (no. 7) requires \u0027double\u0027 but the argument type is \u0027int\u0027.",
    "hash_id": "cfee413b6ce829d5c44dab6b859e2af6c6ce863c2033b925f5aae1022188e366",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_float"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "%lc in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "714",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "d819bc463d91d73c734bf3a47df2fee77f377f42",
    "commit_id_repair": "fda69d46eab588a660f8b8cff6a828d458428cd9",
    "warning_message": "%lc in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed int\u0027.",
    "hash_id": "7d2afbd3d5cd19f716efd78258b3a3539317c11088939821dc9a111bf1a3da7c",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "%f in format string (no. 7) requires \u0027double\u0027 but the argument type is \u0027int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "666",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "da9be64f7dc2c463df2db18838e94d85a352f5c7",
    "commit_id_repair": "c3810efdb4e1bb1df71489e5c4715c2f3dbce2e3",
    "warning_message": "%f in format string (no. 7) requires \u0027double\u0027 but the argument type is \u0027int\u0027.",
    "hash_id": "cfee413b6ce829d5c44dab6b859e2af6c6ce863c2033b925f5aae1022188e366",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_float"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "%lc in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "711",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "94102135d3a7d91b8df10189fbefb29425e3f5a3",
    "commit_id_repair": "da9be64f7dc2c463df2db18838e94d85a352f5c7",
    "warning_message": "%lc in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed int\u0027.",
    "hash_id": "7d2afbd3d5cd19f716efd78258b3a3539317c11088939821dc9a111bf1a3da7c",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "%f in format string (no. 7) requires \u0027double\u0027 but the argument type is \u0027int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "665",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "7a5e18199e7a1b106e0a45db91274a31ea29e2bb",
    "commit_id_repair": "ccbe7d32b20c891fe5b30957a00c34ceeea4529b",
    "warning_message": "%f in format string (no. 7) requires \u0027double\u0027 but the argument type is \u0027int\u0027.",
    "hash_id": "cfee413b6ce829d5c44dab6b859e2af6c6ce863c2033b925f5aae1022188e366",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_float"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "%lc in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "711",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "6f3251124d355090a128da5831c9c997a47c8b20",
    "commit_id_repair": "ffbd04c728d14b2f6724f6d0b02f533ebb8fc09c",
    "warning_message": "%lc in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed int\u0027.",
    "hash_id": "7d2afbd3d5cd19f716efd78258b3a3539317c11088939821dc9a111bf1a3da7c",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "193",
    "column_number": "16",
    "info": "Array index out of bounds",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "1c49b01d2f91b9a451eb080b8d191a91765a6fd5",
    "commit_id_repair": "dae38fe1a72c37d0d6a087dfdb872a3967ef780e",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "4edfbafea76ee1f00815a67f9fccf8e042ef2371dcfb96ac9a971d67adb2fc87",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Array \u0027buf[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "168",
    "column_number": "13",
    "info": "Assignment \u0027size\u003d1024\u0027, assigned value is 1024",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "1c49b01d2f91b9a451eb080b8d191a91765a6fd5",
    "commit_id_repair": "dae38fe1a72c37d0d6a087dfdb872a3967ef780e",
    "warning_message": "Array \u0027buf[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "46fc00e4b49f5e0ebb48ba5ed4bfd5086718fc00c20ff078523b6c655ac6c874",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "%lc in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "658",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "20159637b0b294db72d8cf199d25ff9eb87e289b",
    "commit_id_repair": "31269fad13b0f5b92a58b6d88e54254cef74d73b",
    "warning_message": "%lc in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed int\u0027.",
    "hash_id": "7d2afbd3d5cd19f716efd78258b3a3539317c11088939821dc9a111bf1a3da7c",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Uninitialized variable: o",
    "cwe": "457",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "243",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "c422d632ac0f7abf4d9045dc224455e6ec9394c5",
    "commit_id_repair": "dcf64385f77b1f761310c99b6aa99fae0fe40ef6",
    "warning_message": "Uninitialized variable: o",
    "hash_id": "87b9b186bdf5fecbb5c6637d2de5549ecad7fb0940f972fe2344e8cc8b48da77",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "printf format string requires 0 parameters but 1 is given.",
    "cwe": "685",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "425",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "27dbdf47daae44c780db9998c760007b3bf63738",
    "commit_id_repair": "ff6ffe87042ae0e7db4585e235eae7ee83a3950e",
    "warning_message": "printf format string requires 0 parameters but 1 is given.",
    "hash_id": "05512eab511428faf42844dac67f8edf86c8aa1f828fd3a758eba2e6aac93915",
    "bug_severity": "warning",
    "bug_type": "wrongPrintfScanfArgNum"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Uninitialized variable: im",
    "cwe": "457",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "351",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "4647ca7e2a8deda3ed8893d8ed134a61ccb0d6e8",
    "commit_id_repair": "7017b2792f2f681cb4f921983d1533d5de6401ee",
    "warning_message": "Uninitialized variable: im",
    "hash_id": "03cd4560bf8631f7f6d595c18ed73c33ca065e10228d2937195f15a58e098d42",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "Uninitialized variable: im",
    "cwe": "457",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "237",
    "column_number": "55",
    "info": "Assuming condition is false",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "4647ca7e2a8deda3ed8893d8ed134a61ccb0d6e8",
    "commit_id_repair": "7017b2792f2f681cb4f921983d1533d5de6401ee",
    "warning_message": "Uninitialized variable: im",
    "hash_id": "224e1e658c00e3fbf0faba27f5cfab2a1daf14ed33a1f11e2a11da628c2ce21f",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.10",
    "verbose": "printf format string requires 1 parameter but only 0 are given.",
    "cwe": "685",
    "file_path": "tmp_github/cava/cava.c",
    "line_number": "108",
    "column_number": "14",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/karlstav/cava.git",
    "commit_id": "8a7f928d0e91965e6f5cf75b325cdaa7778d511e",
    "commit_id_repair": "bc3aebe3dea09e5eb7348bac542e27d159635d64",
    "warning_message": "printf format string requires 1 parameter but only 0 are given.",
    "hash_id": "ae0f2433db1f8e6f6cd4d0be9249f2a10a959102c7df500e59d206a114462d08",
    "bug_severity": "error",
    "bug_type": "wrongPrintfScanfArgNum"
  }
]