[
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The code contains unhandled character(s) (character code\u003d194). Neither unicode nor extended ascii is supported.",
    "file_path": "tmp_github/linux-kernel-exploits/2017/CVE-2017-1000367/sudopwn.c",
    "line_number": "23",
    "column_number": "52",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "853a4db6c158a17ed78139e0f67497f473c0c8ad",
    "commit_id_repair": "33f527c820615d454feaadb8a50ea38de48772a4",
    "warning_message": "The code contains unhandled character(s) (character code\u003d194). Neither unicode nor extended ascii is supported.",
    "hash_id": "db539cc491c976a4a32010b4f564d08e46bb6027c3a5c8caeb3e304838fb1404",
    "bug_severity": "error",
    "bug_type": "syntaxError"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Null pointer dereference: (unsigned long*)0x0",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2009-2698/36108.c",
    "line_number": "82",
    "column_number": "3",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Null pointer dereference: (unsigned long*)0x0",
    "hash_id": "51142d0a434bf8ea287242623e77f11c6ad5e8dbd75cf776226f3739358ce949",
    "bug_severity": "error",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: pts_path",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2017-1000367/sudopwn.c",
    "line_number": "68",
    "column_number": "19",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Uninitialized variable: pts_path",
    "hash_id": "66e8de64716093fb46c28c62a6a7a6207b23ecbd9a081fa17837569ccaea6860",
    "bug_severity": "error",
    "bug_type": "legacyUninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Variable \u0027target\u0027 is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent64.c",
    "line_number": "74",
    "column_number": "18",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Assert statement modifies \u0027target\u0027.",
    "hash_id": "2fc825e177ff81fc59b44a4f699846da0c50ce61aa3f56577cd1a17baaf87bcb",
    "bug_severity": "warning",
    "bug_type": "assignmentInAssert"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Variable \u0027map\u0027 is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent64.c",
    "line_number": "83",
    "column_number": "14",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Assert statement modifies \u0027map\u0027.",
    "hash_id": "5ed87de6c471bc9bbe901799ec66a3b74914c8fa5a663a3d4159725395584843",
    "bug_severity": "warning",
    "bug_type": "assignmentInAssert"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Variable \u0027code\u0027 is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent64.c",
    "line_number": "90",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Assert statement modifies \u0027code\u0027.",
    "hash_id": "e2be7141f6106ba5332aca97086019d068ea2c82f4ae416583ac826a689c3c64",
    "bug_severity": "warning",
    "bug_type": "assignmentInAssert"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Variable \u0027p\u0027 is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent64.c",
    "line_number": "116",
    "column_number": "12",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Assert statement modifies \u0027p\u0027.",
    "hash_id": "160e9eab2188c012febaf621f2227032f795ec03153433c80c9e9a4846e23e07",
    "bug_severity": "warning",
    "bug_type": "assignmentInAssert"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%d in format string (no. 1) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent64.c",
    "line_number": "112",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%d in format string (no. 1) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "hash_id": "79053528b3cc8b83b4840f01135bbcbdc30084e6032ce7da8ee6b22d7d4e5d25",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_sint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2005-0736/1397.c",
    "line_number": "346",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "4bafda5a6a8d72db3df8ce94147b970ce3cca176cb93390f11ea7c3e7a2a46ba",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2005-0736/1397.c",
    "line_number": "433",
    "column_number": "18",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "4bafda5a6a8d72db3df8ce94147b970ce3cca176cb93390f11ea7c3e7a2a46ba",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2005-0736/1397.c",
    "line_number": "444",
    "column_number": "18",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "4bafda5a6a8d72db3df8ce94147b970ce3cca176cb93390f11ea7c3e7a2a46ba",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%u in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "4d525f12f45d09202a1d4d496a2a6db218413392fce61769e04efc9b9dd32e6a",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%u in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "60ea8e20936050b455e84090e11de8ba30d6a7e940839d83a33c5ac92bfb4623",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 4) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%u in format string (no. 4) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "987dc1ee09260e7244a378ed1c0559816a1c236c911fa3f38721915a2223fd2a",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 5) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%u in format string (no. 5) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "0c055f6cfd14d9674914b3dd2959bab3eec3e0091712b59ac823175f96702545",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 6) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%u in format string (no. 6) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "bdb474aeefa9f1bc610cc044bfd89843ea98cf2e6e777c1500a31c2d34ca7f45",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 7) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%u in format string (no. 7) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "c259de92949c3bee4885f8224008a36eb571d5ab9d238fb7b26cf5511e13c4c2",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "873",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%u in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "635f87900f1c5f60a95e60af7987c65d4db7b7cc4a92b275bdeaaa72bc1b69b3",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%x in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "891",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%x in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "90e3917ce82f1f560425f11fd3fbfc0688f53e438bac84f769ed180e8cd7eabb",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "3d5e2557b30f45d1fe07e76f50dc022c5d647a60501335edfaa69883f74f2cfc",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "480",
    "column_number": "32",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "hash_id": "ae515211b800bff69631cf24d2e3753bef92d5d561ab70ad0c3e9fab82bb6515",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "478",
    "column_number": "5",
    "info": "Assuming that condition \u0027!fp\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "hash_id": "e8137b18aff760940117a3a645967ef340b0c467e6ccd64352c8397515c12de1",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "483",
    "column_number": "38",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "hash_id": "ae515211b800bff69631cf24d2e3753bef92d5d561ab70ad0c3e9fab82bb6515",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "478",
    "column_number": "5",
    "info": "Assuming that condition \u0027!fp\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "hash_id": "e8137b18aff760940117a3a645967ef340b0c467e6ccd64352c8397515c12de1",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Redundant assignment of \u0027addr[0]\u0027 to itself.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "283",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Redundant assignment of \u0027addr[0]\u0027 to itself.",
    "hash_id": "b365ad303d3978a22e1034b9c360e141176e5e088a0d21c69ccd1483a9a94915",
    "bug_severity": "warning",
    "bug_type": "selfAssignment"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Division by zero.",
    "cwe": "369",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent.c",
    "line_number": "158",
    "column_number": "6",
    "info": "Division by zero",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Division by zero.",
    "hash_id": "1c583a63204dcdc5d221bc081cba373aa4c56c6e3914348a6a0feeee1bfa7610",
    "bug_severity": "error",
    "bug_type": "zerodiv"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Division by zero.",
    "cwe": "369",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent.c",
    "line_number": "156",
    "column_number": "4",
    "info": "z is decremented\u0027, new value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Division by zero.",
    "hash_id": "9828b9900dbe7d68df085624c5e256ae7baff09764172282b5d2dbf8cb5272bb",
    "bug_severity": "error",
    "bug_type": "zerodiv"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Division by zero.",
    "cwe": "369",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent.c",
    "line_number": "153",
    "column_number": "12",
    "info": "Assignment \u0027z\u003d1\u0027, assigned value is 1",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Division by zero.",
    "hash_id": "4bbfffbada23a3e0a8df28c8a489a450f94842d3bb69b85fb06ebceef86954e2",
    "bug_severity": "error",
    "bug_type": "zerodiv"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4347/15774.c",
    "line_number": "159",
    "column_number": "10",
    "info": "Returning identical expression \u0027rep\u0027",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "66d521127f34d7759f5ecdfe7da4e0730d04162720028908c0c1a820df008518",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4347/15774.c",
    "line_number": "150",
    "column_number": "6",
    "info": "If condition \u0027rep\u0027 is true, the function will return/exit",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "5bedec36a06eeeec67f9a76749c7d5f4653c488f3e4e62b8477374491824a584",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4347/15774.c",
    "line_number": "108",
    "column_number": "12",
    "info": "\u0027rep\u0027 is assigned value \u00270\u0027 here.",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "65d29fb9b9af165c2f8ba3a2f6fe88ce3520231bd65fb131463a9ed4ac023f5d",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4347/15774.c",
    "line_number": "123",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "e567e055219ffa5d4e3cc88e31ac641f63c57c484ea11c900d4ddf9b2c739746",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4347/15774.c",
    "line_number": "125",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "e567e055219ffa5d4e3cc88e31ac641f63c57c484ea11c900d4ddf9b2c739746",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4347/15774.c",
    "line_number": "140",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "e567e055219ffa5d4e3cc88e31ac641f63c57c484ea11c900d4ddf9b2c739746",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4073/17787.c",
    "line_number": "409",
    "column_number": "104",
    "info": "Array index out of bounds",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "05c5817894896bd400e632ee3a35765625441879ae271fdc69513005dc3688d2",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4073/17787.c",
    "line_number": "406",
    "column_number": "8",
    "info": "upper is assigned \u0027i\u0027 here.",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "e996741d2b8b3a838a269bd62e8444d9924953d737955c3f00f83eb65b85bcfb",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4073/17787.c",
    "line_number": "401",
    "column_number": "17",
    "info": "Assuming condition is false",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "9ba8d1f2bc094cfe5782980b67be64119408bb05bec3683863e12ab5459e1449",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4073/17787.c",
    "line_number": "391",
    "column_number": "2",
    "info": "After for loop, i has value 1024",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "c3501f32b1bfaad942c42cd23b3698fd82d436869632cd5a9c210135a53fb9ce",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4073/17787.c",
    "line_number": "293",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "4604dc1efab3b1e27840de947e64c6e3a521d52413ce0debebf2fecdaa28d7f5",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4073/17787.c",
    "line_number": "295",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "4604dc1efab3b1e27840de947e64c6e3a521d52413ce0debebf2fecdaa28d7f5",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "148",
    "column_number": "24",
    "info": "Returning identical expression \u0027rep\u0027",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "d1cbb72112985162037e6035a471c0e61a65faf39161427cafb58a794c4f6959",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "139",
    "column_number": "13",
    "info": "If condition \u0027rep\u0027 is true, the function will return/exit",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "4dc3b3f08f50f3db7ca81c96f27644589c0813f3f248b9de7c4e73173421546b",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "95",
    "column_number": "19",
    "info": "\u0027rep\u0027 is assigned value \u00270\u0027 here.",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "69add99653e75a5ef525822e683e97b36298dca3eabae69ee1a784e24b9fe648",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "110",
    "column_number": "31",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "c73e2590fa0b340b6dbe6df07df72d0069b669d72c1f56ff6d316e77d4c74b62",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "112",
    "column_number": "31",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "c73e2590fa0b340b6dbe6df07df72d0069b669d72c1f56ff6d316e77d4c74b62",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "127",
    "column_number": "25",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "c73e2590fa0b340b6dbe6df07df72d0069b669d72c1f56ff6d316e77d4c74b62",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Memory leak: newstack",
    "cwe": "401",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "256",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Memory leak: newstack",
    "hash_id": "3efc517de9930d8823dc8ca4613b68f29a975e820c9b2bd98b09abb8d92c2822",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Memory leak: newstack",
    "cwe": "401",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "273",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Memory leak: newstack",
    "hash_id": "3efc517de9930d8823dc8ca4613b68f29a975e820c9b2bd98b09abb8d92c2822",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3301/15023.c",
    "line_number": "58",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "d232c6d0626be9da2d7e913197ade2d7e395810f6ea5aeec127e533b7c3d8ada",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3301/15023.c",
    "line_number": "60",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "d232c6d0626be9da2d7e913197ade2d7e395810f6ea5aeec127e533b7c3d8ada",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3301/15023.c",
    "line_number": "77",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "d232c6d0626be9da2d7e913197ade2d7e395810f6ea5aeec127e533b7c3d8ada",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "385",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%u in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "99f634d0d3362c9ccc4be0fa32dbc2f30127cc7db3f1fe67cbea5a9a04ed9b03",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "385",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%u in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "9662845395b3dfbb48b89c998ca3c81e81aa56282a6782d87e05cdbaf883f6b6",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "333",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "6cd0b1dad5b4c42cc818f17dea50c3451e9fcd2681ce0f7b579ba584dadfa9e7",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "335",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "6cd0b1dad5b4c42cc818f17dea50c3451e9fcd2681ce0f7b579ba584dadfa9e7",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "352",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "6cd0b1dad5b4c42cc818f17dea50c3451e9fcd2681ce0f7b579ba584dadfa9e7",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "385",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "60b36fe81a58b5575e794050375bd3a1f8b791153a2beed928ee71c96ad6d127",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: oldstyle",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "332",
    "column_number": "8",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Uninitialized variable: oldstyle",
    "hash_id": "9c8defb091cfdca08411ebe50de4368758bccb13fc65c653b40381e901a0aeff",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: oldstyle",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "324",
    "column_number": "8",
    "info": "Assuming condition is false",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Uninitialized variable: oldstyle",
    "hash_id": "e656e2fe815c77b060d2bad07f529eb1da56c4594d5144636fe9ad715a748d0f",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "257",
    "column_number": "10",
    "info": "Returning identical expression \u0027rep\u0027",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "0bce0b5b7bc70abed5eee2ced3f626bf28ec04bd6541bd7e2eb480448f42d9dd",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "246",
    "column_number": "6",
    "info": "If condition \u0027rep\u0027 is true, the function will return/exit",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "93a0a5b95535c443e92838fca7f90dd71a1bfaf02d311f7aa23a7b831e1d2f81",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "202",
    "column_number": "17",
    "info": "\u0027rep\u0027 is assigned value \u00270\u0027 here.",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "e7a50c2d3f3724497a5605fdddf9159889fc553d9f35680046a2b797c3ddd1b9",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "217",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "3ab8f6e7db2b405084d5127a98e47035fc849510dcacd3d6cd4a4dbb8a48d7d5",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "219",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "3ab8f6e7db2b405084d5127a98e47035fc849510dcacd3d6cd4a4dbb8a48d7d5",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "236",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "3ab8f6e7db2b405084d5127a98e47035fc849510dcacd3d6cd4a4dbb8a48d7d5",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Expression \u0027-300000000\u0027 has a negative value. That is converted to an unsigned value and used in an unsigned calculation.",
    "cwe": "195",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "312",
    "column_number": "27",
    "info": "Negative value is converted to an unsigned value",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Expression \u0027-300000000\u0027 has a negative value. That is converted to an unsigned value and used in an unsigned calculation.",
    "hash_id": "6ff95fd03a370138d277aa035b5226067997acdc1f777fdbc28d437684ff2adf",
    "bug_severity": "warning",
    "bug_type": "signConversion"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "221",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "hash_id": "978d574ac4f04a98482dd53edd11d236ba7f793c23dd7b5d92b8e63f61e79548",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "221",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "hash_id": "9982195b63f881c50dbde04c4eb986d7563f07c0f6c23712eac27dbfad406547",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "222",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "599fe8590fdef098123171f956810497b778a38852fbd00d42ddbcf37f73ac51",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "223",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "599fe8590fdef098123171f956810497b778a38852fbd00d42ddbcf37f73ac51",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "241",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "hash_id": "978d574ac4f04a98482dd53edd11d236ba7f793c23dd7b5d92b8e63f61e79548",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "241",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "hash_id": "9982195b63f881c50dbde04c4eb986d7563f07c0f6c23712eac27dbfad406547",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "242",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "599fe8590fdef098123171f956810497b778a38852fbd00d42ddbcf37f73ac51",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "243",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "599fe8590fdef098123171f956810497b778a38852fbd00d42ddbcf37f73ac51",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "258",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "hash_id": "978d574ac4f04a98482dd53edd11d236ba7f793c23dd7b5d92b8e63f61e79548",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "258",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "hash_id": "9982195b63f881c50dbde04c4eb986d7563f07c0f6c23712eac27dbfad406547",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "259",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "599fe8590fdef098123171f956810497b778a38852fbd00d42ddbcf37f73ac51",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "269",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "hash_id": "978d574ac4f04a98482dd53edd11d236ba7f793c23dd7b5d92b8e63f61e79548",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "269",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "hash_id": "9982195b63f881c50dbde04c4eb986d7563f07c0f6c23712eac27dbfad406547",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/caps_to_root/15916.c",
    "line_number": "115",
    "column_number": "31",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "5931d50cb6d96922ff210f87ae0f23ce6d2879c175290421d7c7ff9e3eff349b",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/caps_to_root/15916.c",
    "line_number": "117",
    "column_number": "31",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "5931d50cb6d96922ff210f87ae0f23ce6d2879c175290421d7c7ff9e3eff349b",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/caps_to_root/15916.c",
    "line_number": "132",
    "column_number": "25",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "5931d50cb6d96922ff210f87ae0f23ce6d2879c175290421d7c7ff9e3eff349b",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: ret",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/caps_to_root/15916.c",
    "line_number": "113",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Uninitialized variable: ret",
    "hash_id": "79ddfa847afffcde464b7c6d7f49ab189db6552e9d0f83a8a576a24f42cba320",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2016-0728/cve-2016-0728/rootz.c",
    "line_number": "30",
    "column_number": "12",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "28c055fbc527a8f25cc5cc08cc453cfbd7ee5146ef32c7a2522164f649b3658e",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2014-0196/cve-2014-0196.c",
    "line_number": "99",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "cf5aec9d06b62babb4bcc0a7f7228a82ebaf5486fbe1880b5dce4424fbc74c46",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2014-0196/cve-2014-0196.c",
    "line_number": "101",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "cf5aec9d06b62babb4bcc0a7f7228a82ebaf5486fbe1880b5dce4424fbc74c46",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Found an exit path from function with non-void return type that has missing return statement",
    "cwe": "758",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "457",
    "column_number": "0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Found an exit path from function with non-void return type that has missing return statement",
    "hash_id": "839da0ec78363a572c3ff3069a93e75c4c8f8603da3835c6971b2f95089d917c",
    "bug_severity": "error",
    "bug_type": "missingReturn"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "277",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "eb421e277e4986b74255191015ac23d6b0fcc60fb840599a5bdf79d9faba4e50",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "280",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "eb421e277e4986b74255191015ac23d6b0fcc60fb840599a5bdf79d9faba4e50",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: sct_addr",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "296",
    "column_number": "34",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Uninitialized variable: sct_addr",
    "hash_id": "6e2b8a843527d7eba4b3895011a15471f33b6ab2043c3009e9c61998fc13164c",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: sct_addr",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "275",
    "column_number": "18",
    "info": "Assuming condition is false",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "commit_id_repair": "95188259756ec308629aa2791984a074418698ad",
    "warning_message": "Uninitialized variable: sct_addr",
    "hash_id": "87b2b0e26ea48f40072ddf475ac447de5364d55fdfa07392cf30300c8f0d807f",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "No pair for character (\"). Can\u0027t process file. File is either invalid or unicode, which is currently not supported.",
    "file_path": "tmp_github/linux-kernel-exploits/2013/CVE-2013-1858/clown-newuser.c",
    "line_number": "129",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "No pair for character (\"). Can\u0027t process file. File is either invalid or unicode, which is currently not supported.",
    "hash_id": "a31e6336c9344f0ceaeb69899e8f5bec291ecad0495a9c1f63341572c639a43e",
    "bug_severity": "error",
    "bug_type": "syntaxError"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The code contains unhandled character(s) (character code\u003d194). Neither unicode nor extended ascii is supported.",
    "file_path": "tmp_github/linux-kernel-exploits/2016/CVE-2016-5195/dirtyc0w.c",
    "line_number": "23",
    "column_number": "50",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "The code contains unhandled character(s) (character code\u003d194). Neither unicode nor extended ascii is supported.",
    "hash_id": "d2488a95d236229c904bbed4afd00a99311e77e6e1803ac1080584a68ed7a65b",
    "bug_severity": "error",
    "bug_type": "syntaxError"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The code contains unhandled character(s) (character code\u003d194). Neither unicode nor extended ascii is supported.",
    "file_path": "tmp_github/linux-kernel-exploits/2017/CVE-2017-1000367/sudopwn.c",
    "line_number": "23",
    "column_number": "52",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "The code contains unhandled character(s) (character code\u003d194). Neither unicode nor extended ascii is supported.",
    "hash_id": "db539cc491c976a4a32010b4f564d08e46bb6027c3a5c8caeb3e304838fb1404",
    "bug_severity": "error",
    "bug_type": "syntaxError"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Found an exit path from function with non-void return type that has missing return statement",
    "cwe": "758",
    "file_path": "tmp_github/linux-kernel-exploits/2016/CVE-2016-9793/poc.c",
    "line_number": "106",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Found an exit path from function with non-void return type that has missing return statement",
    "hash_id": "70ab5613f05f71117f8a7d64805707a7423702af714a808b4e8bca7c1767e67f",
    "bug_severity": "error",
    "bug_type": "missingReturn"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Null pointer dereference: (unsigned long*)0x0",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/2009/CVE-2009-2698/36108.c",
    "line_number": "82",
    "column_number": "3",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Null pointer dereference: (unsigned long*)0x0",
    "hash_id": "ad5787f31e028c3c5d68e173645cc631dfda6700a91b0371f3252a742ce695f9",
    "bug_severity": "error",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2017/CVE-2017-5123/43029.c",
    "line_number": "50",
    "column_number": "11",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "cfc6b61a5d265ed08d85aabf2fd73d36ec2523573181a1304f215d13836c482d",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2017/CVE-2017-5123/43029.c",
    "line_number": "52",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "cfc6b61a5d265ed08d85aabf2fd73d36ec2523573181a1304f215d13836c482d",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Null pointer dereference",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/2017/CVE-2017-5123/43029.c",
    "line_number": "104",
    "column_number": "9",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Null pointer dereference",
    "hash_id": "450779b0ca61940bb7efe1f7f925b1a02aec3170dbf6fca3684de296c853c150",
    "bug_severity": "error",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Variable \u0027target\u0027 is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2013/CVE-2013-2094/perf_swevent64.c",
    "line_number": "74",
    "column_number": "18",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Assert statement modifies \u0027target\u0027.",
    "hash_id": "0bef2063d6e71e629ee2a8c83a8b633d3f4ed21ce69f81bcf0e1213e164b1289",
    "bug_severity": "warning",
    "bug_type": "assignmentInAssert"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Variable \u0027map\u0027 is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2013/CVE-2013-2094/perf_swevent64.c",
    "line_number": "83",
    "column_number": "14",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Assert statement modifies \u0027map\u0027.",
    "hash_id": "1a9e3013d2e36fe07c872004343c266c0eeeccd405826923041eb64c5a868c1c",
    "bug_severity": "warning",
    "bug_type": "assignmentInAssert"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Variable \u0027code\u0027 is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2013/CVE-2013-2094/perf_swevent64.c",
    "line_number": "90",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Assert statement modifies \u0027code\u0027.",
    "hash_id": "e3561d86b0d45dcfec968900b3a1409c6f717e03c0b64a11a3b8dc112e2119db",
    "bug_severity": "warning",
    "bug_type": "assignmentInAssert"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Variable \u0027p\u0027 is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2013/CVE-2013-2094/perf_swevent64.c",
    "line_number": "116",
    "column_number": "12",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Assert statement modifies \u0027p\u0027.",
    "hash_id": "fc9c085802337b3ca761a1e3f5e6be787c532a4176f01a2b43bdc9ecda53185c",
    "bug_severity": "warning",
    "bug_type": "assignmentInAssert"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%d in format string (no. 1) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2013/CVE-2013-2094/perf_swevent64.c",
    "line_number": "112",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%d in format string (no. 1) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "hash_id": "b92da7c90c7747dccd25bf9eeffbbb3174e142aeebf645ad695cc1917043ae60",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_sint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%u in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "4ceb00a3dbb282a4ee30fb067842ea72c676effb8f934701fcb894caadc8225b",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%u in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "76a476e47b8ea3a04d2eba0ab822d32c4347b2c4dfe849ec7266d6dd5b79ca32",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 4) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%u in format string (no. 4) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "cf6e30cd204f32bb7f369f42009b61f5b9c04962f71b0a002cd88ff8ad123fde",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 5) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%u in format string (no. 5) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "1b3c8845d2a1b0ecd8c4916aed710e4a16a6cd3c13032506b3a4578d362e92fa",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 6) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%u in format string (no. 6) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "5de2fec5efae321d9fe3cd37f52a6f7fe6e732d83e294b4dad865fb4da448467",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 7) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%u in format string (no. 7) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "23ac41059d16d9c828b6bc31eb040ff288f4f78fe8f22285f28b311c29c14c00",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "873",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%u in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "585c7649286126077bc7834de46290545b706f69cb3c1655af855709166eba43",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%x in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "891",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%x in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "99088a1d76296354206d56f526e00989ac1c9cc040162bcab99f958d4ad435d1",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "35870cabaef8b6d7b8ac55804d2327174ae56cac1048a130a330853b3f2941c2",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "480",
    "column_number": "32",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "hash_id": "41671a122cea3a5f81fc66c28acf38de67516a4c78f762f2e973f444b24f9ab0",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "478",
    "column_number": "5",
    "info": "Assuming that condition \u0027!fp\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "hash_id": "4c6115681f24a629b5743cad1c3786da95401493267b07d8d25f95945929a83a",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "483",
    "column_number": "38",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "hash_id": "41671a122cea3a5f81fc66c28acf38de67516a4c78f762f2e973f444b24f9ab0",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "478",
    "column_number": "5",
    "info": "Assuming that condition \u0027!fp\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "hash_id": "4c6115681f24a629b5743cad1c3786da95401493267b07d8d25f95945929a83a",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Redundant assignment of \u0027addr[0]\u0027 to itself.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2004/CVE-2004-1235/744.c",
    "line_number": "283",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Redundant assignment of \u0027addr[0]\u0027 to itself.",
    "hash_id": "e678c74be9a97de2478d303554b45c0cedeade6eff18d7fdc3c979d5a22a5d1b",
    "bug_severity": "warning",
    "bug_type": "selfAssignment"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: u",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/2014/CVE-2014-0038/CVE-2014-0038.c",
    "line_number": "151",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Uninitialized variable: u",
    "hash_id": "d0baa90e0ab815bc7aee6eb8deeb78cf7c4279a6159a237484e7e9bf55dbf41b",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: iovecs",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/2014/CVE-2014-0038/CVE-2014-0038.c",
    "line_number": "207",
    "column_number": "5",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Uninitialized variable: iovecs",
    "hash_id": "29eaf6135d1518001d7eeb3d4ebf078c2c25b8c1fed6df4e79899538e8b687da",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%d in format string (no. 1) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2013/CVE-2013-1763/33336.c",
    "line_number": "121",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%d in format string (no. 1) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "hash_id": "ea9a097d46368bd3226f26f687599e515c2dca223dce13d2282568cdbfe4618e",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_sint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2013/CVE-2013-1763/33336.c",
    "line_number": "64",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "3ba2674bb5517df3874c2faf2ec10279c9ec82a129fe89de4f8be18a7a3c005a",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2013/CVE-2013-1763/33336.c",
    "line_number": "66",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "3ba2674bb5517df3874c2faf2ec10279c9ec82a129fe89de4f8be18a7a3c005a",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Division by zero.",
    "cwe": "369",
    "file_path": "tmp_github/linux-kernel-exploits/2013/CVE-2013-2094/perf_swevent.c",
    "line_number": "158",
    "column_number": "6",
    "info": "Division by zero",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Division by zero.",
    "hash_id": "b7087824aa98d64ae1834c2ff70115551cf912d38600b9b36aaad643621a9fef",
    "bug_severity": "error",
    "bug_type": "zerodiv"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Division by zero.",
    "cwe": "369",
    "file_path": "tmp_github/linux-kernel-exploits/2013/CVE-2013-2094/perf_swevent.c",
    "line_number": "156",
    "column_number": "4",
    "info": "z is decremented\u0027, new value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Division by zero.",
    "hash_id": "2116f2d8db1ffa3661f16216f04963e81b0fee88be828ddba318acd2c6525251",
    "bug_severity": "error",
    "bug_type": "zerodiv"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Division by zero.",
    "cwe": "369",
    "file_path": "tmp_github/linux-kernel-exploits/2013/CVE-2013-2094/perf_swevent.c",
    "line_number": "153",
    "column_number": "12",
    "info": "Assignment \u0027z\u003d1\u0027, assigned value is 1",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Division by zero.",
    "hash_id": "460e3b8b245e9301216726b95096808289cf9f33455b9785f379ab62204a794d",
    "bug_severity": "error",
    "bug_type": "zerodiv"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4347/15774.c",
    "line_number": "159",
    "column_number": "10",
    "info": "Returning identical expression \u0027rep\u0027",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "4519606749065f9581301104228ef5806f28c3359f06db09670523eb3797d1f5",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4347/15774.c",
    "line_number": "150",
    "column_number": "6",
    "info": "If condition \u0027rep\u0027 is true, the function will return/exit",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "86c35003a65c24b05166771088f1c738ef248a3d91c1d6a3e2765a74ecf908f6",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4347/15774.c",
    "line_number": "108",
    "column_number": "12",
    "info": "\u0027rep\u0027 is assigned value \u00270\u0027 here.",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "327a6512aa90d6664492ec2035713241f44fedb0366b2bf7b7635e2f6d554ef2",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4347/15774.c",
    "line_number": "123",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "41f19644447a7d699d28fa0abf3e4f315ee52dc716369ea69cc06b389a6884fc",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4347/15774.c",
    "line_number": "125",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "41f19644447a7d699d28fa0abf3e4f315ee52dc716369ea69cc06b389a6884fc",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4347/15774.c",
    "line_number": "140",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "41f19644447a7d699d28fa0abf3e4f315ee52dc716369ea69cc06b389a6884fc",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/linux-kernel-exploits/2005/CVE-2005-0736/1397.c",
    "line_number": "346",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "dee83897db6ebad22f7b84bdcb0c3572ae28afe10d39ca9e73dfab185f80673c",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/linux-kernel-exploits/2005/CVE-2005-0736/1397.c",
    "line_number": "433",
    "column_number": "18",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "dee83897db6ebad22f7b84bdcb0c3572ae28afe10d39ca9e73dfab185f80673c",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/linux-kernel-exploits/2005/CVE-2005-0736/1397.c",
    "line_number": "444",
    "column_number": "18",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "dee83897db6ebad22f7b84bdcb0c3572ae28afe10d39ca9e73dfab185f80673c",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4073/17787.c",
    "line_number": "409",
    "column_number": "104",
    "info": "Array index out of bounds",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "b31465ff80449a3d61783e5352f2750ad16d2265489cba32535af931c82f520b",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4073/17787.c",
    "line_number": "406",
    "column_number": "8",
    "info": "upper is assigned \u0027i\u0027 here.",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "d3bc971c920cc7453ae8c2b71e4832cf577b0e8b57bf7bbbb1d9ad946884555d",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4073/17787.c",
    "line_number": "401",
    "column_number": "17",
    "info": "Assuming condition is false",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "f5b71a5fa7584d2da721282dfe645c17626d22896beff7dc3c2db0dd37d5ae7b",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4073/17787.c",
    "line_number": "391",
    "column_number": "2",
    "info": "After for loop, i has value 1024",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "17866cd0427e94e0c33847fc6398b1af2773aebf3e95ef98385f278a40f818de",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4073/17787.c",
    "line_number": "293",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "36c6512554774eb6d5db9cf34e785455bf2553a5ca2e343ced1f25a643ec815f",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4073/17787.c",
    "line_number": "295",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "36c6512554774eb6d5db9cf34e785455bf2553a5ca2e343ced1f25a643ec815f",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4258/15704.c",
    "line_number": "148",
    "column_number": "24",
    "info": "Returning identical expression \u0027rep\u0027",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "65173deab4f8dd1970610bebe3ee9f933acb4a8180e171ed873b1ede62709110",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4258/15704.c",
    "line_number": "139",
    "column_number": "13",
    "info": "If condition \u0027rep\u0027 is true, the function will return/exit",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "430a6ce1a6f78b515d6570830077b97fb0314337731d602871a75e53a65fa255",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4258/15704.c",
    "line_number": "95",
    "column_number": "19",
    "info": "\u0027rep\u0027 is assigned value \u00270\u0027 here.",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "812b500e10a6b646fd80858609fa4da96ac6bd4f84102ff42005c911b7ce42ca",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4258/15704.c",
    "line_number": "110",
    "column_number": "31",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "c1fc97721cbc912ff20156126b083ac9236d61fbf13887ffff553e75dee50f88",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4258/15704.c",
    "line_number": "112",
    "column_number": "31",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "c1fc97721cbc912ff20156126b083ac9236d61fbf13887ffff553e75dee50f88",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4258/15704.c",
    "line_number": "127",
    "column_number": "25",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "c1fc97721cbc912ff20156126b083ac9236d61fbf13887ffff553e75dee50f88",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Memory leak: newstack",
    "cwe": "401",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4258/15704.c",
    "line_number": "256",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Memory leak: newstack",
    "hash_id": "f0718414704d4c5d4c61315dd57e7abac1b90fa9f3fe860ddf73047a0ae9f897",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Memory leak: newstack",
    "cwe": "401",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-4258/15704.c",
    "line_number": "273",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Memory leak: newstack",
    "hash_id": "f0718414704d4c5d4c61315dd57e7abac1b90fa9f3fe860ddf73047a0ae9f897",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-3301/15023.c",
    "line_number": "58",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "5b4d24a7c3b8838cbedad77cae052628b44230599e3a2fa25a2788e1eac1f735",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-3301/15023.c",
    "line_number": "60",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "5b4d24a7c3b8838cbedad77cae052628b44230599e3a2fa25a2788e1eac1f735",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-3301/15023.c",
    "line_number": "77",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "5b4d24a7c3b8838cbedad77cae052628b44230599e3a2fa25a2788e1eac1f735",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-3437/15150.c",
    "line_number": "257",
    "column_number": "10",
    "info": "Returning identical expression \u0027rep\u0027",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "62716620975daa323b4183b08104f9b756d088bdc97d25ac10b4324c595794c8",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-3437/15150.c",
    "line_number": "246",
    "column_number": "6",
    "info": "If condition \u0027rep\u0027 is true, the function will return/exit",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "cc1df97f65e6dad6b639a53059cae9adc79ec696b187282d628dc44f66547457",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-3437/15150.c",
    "line_number": "202",
    "column_number": "17",
    "info": "\u0027rep\u0027 is assigned value \u00270\u0027 here.",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "cab2597fed793b6436bbaca2ef3bf0c4673add9a8e25b7aa2d75b9092ab21319",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-3437/15150.c",
    "line_number": "217",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "33b3293a1f6202a321a85775c1ab1686e855c70757b1d85b19a722792e0d484b",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-3437/15150.c",
    "line_number": "219",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "33b3293a1f6202a321a85775c1ab1686e855c70757b1d85b19a722792e0d484b",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-3437/15150.c",
    "line_number": "236",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "33b3293a1f6202a321a85775c1ab1686e855c70757b1d85b19a722792e0d484b",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Expression \u0027-300000000\u0027 has a negative value. That is converted to an unsigned value and used in an unsigned calculation.",
    "cwe": "195",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-3437/15150.c",
    "line_number": "312",
    "column_number": "27",
    "info": "Negative value is converted to an unsigned value",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Expression \u0027-300000000\u0027 has a negative value. That is converted to an unsigned value and used in an unsigned calculation.",
    "hash_id": "285d7bccedf9461a9f62ce8863451ce101896890d2644bcbfa8ff62c7acd21df",
    "bug_severity": "warning",
    "bug_type": "signConversion"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2004/caps_to_root/15916.c",
    "line_number": "115",
    "column_number": "31",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "4e24764de119180046173a9578a9f1cd7937b365da6d21826a263068f45d2535",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2004/caps_to_root/15916.c",
    "line_number": "117",
    "column_number": "31",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "4e24764de119180046173a9578a9f1cd7937b365da6d21826a263068f45d2535",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2004/caps_to_root/15916.c",
    "line_number": "132",
    "column_number": "25",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "4e24764de119180046173a9578a9f1cd7937b365da6d21826a263068f45d2535",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: ret",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/2004/caps_to_root/15916.c",
    "line_number": "113",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Uninitialized variable: ret",
    "hash_id": "25197f4b17c0aa4a00720a52ff7b8109c0114041b6639ed7a0fd436f752ff958",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-2959/14814.c",
    "line_number": "385",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%u in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "914677c5c5f10cffadf3cd269398a4993595491ce95a44ee7b6bf1d69038ae25",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-2959/14814.c",
    "line_number": "385",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%u in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "1858a45528e8bcafbd170df2703e9a8ee9162be90409fcaaa6a85871c3c75f2c",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-2959/14814.c",
    "line_number": "333",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "44ca7cf96ce033c9a007712cc0fa47bb8b1c5201ec6d1ee88ba5b69eb4ffb96b",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-2959/14814.c",
    "line_number": "335",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "44ca7cf96ce033c9a007712cc0fa47bb8b1c5201ec6d1ee88ba5b69eb4ffb96b",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-2959/14814.c",
    "line_number": "352",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "44ca7cf96ce033c9a007712cc0fa47bb8b1c5201ec6d1ee88ba5b69eb4ffb96b",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-2959/14814.c",
    "line_number": "385",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "da2e3bc08bf2ce6f01050e2282e768341d5a0ccd43fe74b6ea2493f3fd6487e4",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: oldstyle",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-2959/14814.c",
    "line_number": "332",
    "column_number": "8",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Uninitialized variable: oldstyle",
    "hash_id": "9e711257fc6da3408f71d20b2d789ab190afcd3936583e868b84b34dfd0ded29",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: oldstyle",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/2010/CVE-2010-2959/14814.c",
    "line_number": "324",
    "column_number": "8",
    "info": "Assuming condition is false",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Uninitialized variable: oldstyle",
    "hash_id": "2a258a09f4d5257ebc1631266e57443506e15708f5d906b59546f889396014fe",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2008/CVE-2008-0900/5092.c",
    "line_number": "221",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "hash_id": "69296536c92c3d4c433d8202454a068a65ef7f4efdd2ee3e407635dd7a95d172",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2008/CVE-2008-0900/5092.c",
    "line_number": "221",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "hash_id": "98addd527b012883a09cd0ff185c0b905e75eae2a91f67c8853a0451690a953d",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2008/CVE-2008-0900/5092.c",
    "line_number": "222",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "ee7ba86de33d069975dc07ce7458ac5551a8060727f234982e2170fa3bd4a2d7",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2008/CVE-2008-0900/5092.c",
    "line_number": "223",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "ee7ba86de33d069975dc07ce7458ac5551a8060727f234982e2170fa3bd4a2d7",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2008/CVE-2008-0900/5092.c",
    "line_number": "241",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "hash_id": "69296536c92c3d4c433d8202454a068a65ef7f4efdd2ee3e407635dd7a95d172",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2008/CVE-2008-0900/5092.c",
    "line_number": "241",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "hash_id": "98addd527b012883a09cd0ff185c0b905e75eae2a91f67c8853a0451690a953d",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2008/CVE-2008-0900/5092.c",
    "line_number": "242",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "ee7ba86de33d069975dc07ce7458ac5551a8060727f234982e2170fa3bd4a2d7",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2008/CVE-2008-0900/5092.c",
    "line_number": "243",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "ee7ba86de33d069975dc07ce7458ac5551a8060727f234982e2170fa3bd4a2d7",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2008/CVE-2008-0900/5092.c",
    "line_number": "258",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "hash_id": "69296536c92c3d4c433d8202454a068a65ef7f4efdd2ee3e407635dd7a95d172",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2008/CVE-2008-0900/5092.c",
    "line_number": "258",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "hash_id": "98addd527b012883a09cd0ff185c0b905e75eae2a91f67c8853a0451690a953d",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2008/CVE-2008-0900/5092.c",
    "line_number": "259",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "ee7ba86de33d069975dc07ce7458ac5551a8060727f234982e2170fa3bd4a2d7",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2008/CVE-2008-0900/5092.c",
    "line_number": "269",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "hash_id": "69296536c92c3d4c433d8202454a068a65ef7f4efdd2ee3e407635dd7a95d172",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/2008/CVE-2008-0900/5092.c",
    "line_number": "269",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "hash_id": "98addd527b012883a09cd0ff185c0b905e75eae2a91f67c8853a0451690a953d",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2014/CVE-2014-0196/cve-2014-0196.c",
    "line_number": "99",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "791ba4a9cec8f9a8bb37e980a6cad17fcdda7423d80533e76eddb057a984606c",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2014/CVE-2014-0196/cve-2014-0196.c",
    "line_number": "101",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "791ba4a9cec8f9a8bb37e980a6cad17fcdda7423d80533e76eddb057a984606c",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2016/CVE-2016-0728/cve-2016-0728/rootz.c",
    "line_number": "30",
    "column_number": "12",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "95f03edf0add51eb18000af5f7d523c17550b97ec1c69680ca2b15ce41e63c2e",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Found an exit path from function with non-void return type that has missing return statement",
    "cwe": "758",
    "file_path": "tmp_github/linux-kernel-exploits/2009/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "457",
    "column_number": "0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Found an exit path from function with non-void return type that has missing return statement",
    "hash_id": "f7005078bf199c6a23585b728b1c1963b1cb1dfcac0e16e87e263075f2d3eda1",
    "bug_severity": "error",
    "bug_type": "missingReturn"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2009/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "277",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "561a047d61f314d8a9b5e1501c15b88355c5117b1159f5342232f41fc9979f26",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/2009/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "280",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "561a047d61f314d8a9b5e1501c15b88355c5117b1159f5342232f41fc9979f26",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: sct_addr",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/2009/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "296",
    "column_number": "34",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Uninitialized variable: sct_addr",
    "hash_id": "2bfc7e759a716f9d7bc2f084cc5652b63f1955bab909757560f02743cc47e94e",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: sct_addr",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/2009/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "275",
    "column_number": "18",
    "info": "Assuming condition is false",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "9ee88fe4d7d918f5713f29c64adf68ed7990a94c",
    "commit_id_repair": "9aee2959ae6e4714e075eb8626b0bd99676f9af2",
    "warning_message": "Uninitialized variable: sct_addr",
    "hash_id": "21f5675ed94276485606832a5e96927271597b8bcdfa96bfc3d454500689fb08",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The code contains unhandled character(s) (character code\u003d194). Neither unicode nor extended ascii is supported.",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2016-5195/dirtyc0w.c",
    "line_number": "23",
    "column_number": "50",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "The code contains unhandled character(s) (character code\u003d194). Neither unicode nor extended ascii is supported.",
    "hash_id": "acf33e3701733124d9451590e158775d386e5b25d9bc2b05cc947e41fee353f0",
    "bug_severity": "error",
    "bug_type": "syntaxError"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The code contains unhandled character(s) (character code\u003d194). Neither unicode nor extended ascii is supported.",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2017-1000367/sudopwn.c",
    "line_number": "23",
    "column_number": "52",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "The code contains unhandled character(s) (character code\u003d194). Neither unicode nor extended ascii is supported.",
    "hash_id": "59a67ebdbe69ce790cc3274d96d2e29236cfc0ee47a842b02c978d0da6df7556",
    "bug_severity": "error",
    "bug_type": "syntaxError"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Null pointer dereference: (unsigned long*)0x0",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2009-2698/36108.c",
    "line_number": "82",
    "column_number": "3",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Null pointer dereference: (unsigned long*)0x0",
    "hash_id": "51142d0a434bf8ea287242623e77f11c6ad5e8dbd75cf776226f3739358ce949",
    "bug_severity": "error",
    "bug_type": "nullPointer"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Variable \u0027target\u0027 is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent64.c",
    "line_number": "74",
    "column_number": "18",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Assert statement modifies \u0027target\u0027.",
    "hash_id": "2fc825e177ff81fc59b44a4f699846da0c50ce61aa3f56577cd1a17baaf87bcb",
    "bug_severity": "warning",
    "bug_type": "assignmentInAssert"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Variable \u0027map\u0027 is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent64.c",
    "line_number": "83",
    "column_number": "14",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Assert statement modifies \u0027map\u0027.",
    "hash_id": "5ed87de6c471bc9bbe901799ec66a3b74914c8fa5a663a3d4159725395584843",
    "bug_severity": "warning",
    "bug_type": "assignmentInAssert"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Variable \u0027code\u0027 is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent64.c",
    "line_number": "90",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Assert statement modifies \u0027code\u0027.",
    "hash_id": "e2be7141f6106ba5332aca97086019d068ea2c82f4ae416583ac826a689c3c64",
    "bug_severity": "warning",
    "bug_type": "assignmentInAssert"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Variable \u0027p\u0027 is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent64.c",
    "line_number": "116",
    "column_number": "12",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Assert statement modifies \u0027p\u0027.",
    "hash_id": "160e9eab2188c012febaf621f2227032f795ec03153433c80c9e9a4846e23e07",
    "bug_severity": "warning",
    "bug_type": "assignmentInAssert"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%d in format string (no. 1) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent64.c",
    "line_number": "112",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%d in format string (no. 1) requires \u0027int\u0027 but the argument type is \u0027unsigned int\u0027.",
    "hash_id": "79053528b3cc8b83b4840f01135bbcbdc30084e6032ce7da8ee6b22d7d4e5d25",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_sint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4347/15774.c",
    "line_number": "159",
    "column_number": "10",
    "info": "Returning identical expression \u0027rep\u0027",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "66d521127f34d7759f5ecdfe7da4e0730d04162720028908c0c1a820df008518",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4347/15774.c",
    "line_number": "150",
    "column_number": "6",
    "info": "If condition \u0027rep\u0027 is true, the function will return/exit",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "5bedec36a06eeeec67f9a76749c7d5f4653c488f3e4e62b8477374491824a584",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4347/15774.c",
    "line_number": "108",
    "column_number": "12",
    "info": "\u0027rep\u0027 is assigned value \u00270\u0027 here.",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "65d29fb9b9af165c2f8ba3a2f6fe88ce3520231bd65fb131463a9ed4ac023f5d",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4347/15774.c",
    "line_number": "123",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "e567e055219ffa5d4e3cc88e31ac641f63c57c484ea11c900d4ddf9b2c739746",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4347/15774.c",
    "line_number": "125",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "e567e055219ffa5d4e3cc88e31ac641f63c57c484ea11c900d4ddf9b2c739746",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4347/15774.c",
    "line_number": "140",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "e567e055219ffa5d4e3cc88e31ac641f63c57c484ea11c900d4ddf9b2c739746",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Division by zero.",
    "cwe": "369",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent.c",
    "line_number": "158",
    "column_number": "6",
    "info": "Division by zero",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Division by zero.",
    "hash_id": "1c583a63204dcdc5d221bc081cba373aa4c56c6e3914348a6a0feeee1bfa7610",
    "bug_severity": "error",
    "bug_type": "zerodiv"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Division by zero.",
    "cwe": "369",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent.c",
    "line_number": "156",
    "column_number": "4",
    "info": "z is decremented\u0027, new value is 0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Division by zero.",
    "hash_id": "9828b9900dbe7d68df085624c5e256ae7baff09764172282b5d2dbf8cb5272bb",
    "bug_severity": "error",
    "bug_type": "zerodiv"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Division by zero.",
    "cwe": "369",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2013-2094/perf_swevent.c",
    "line_number": "153",
    "column_number": "12",
    "info": "Assignment \u0027z\u003d1\u0027, assigned value is 1",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Division by zero.",
    "hash_id": "4bbfffbada23a3e0a8df28c8a489a450f94842d3bb69b85fb06ebceef86954e2",
    "bug_severity": "error",
    "bug_type": "zerodiv"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4073/17787.c",
    "line_number": "409",
    "column_number": "104",
    "info": "Array index out of bounds",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "05c5817894896bd400e632ee3a35765625441879ae271fdc69513005dc3688d2",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4073/17787.c",
    "line_number": "406",
    "column_number": "8",
    "info": "upper is assigned \u0027i\u0027 here.",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "e996741d2b8b3a838a269bd62e8444d9924953d737955c3f00f83eb65b85bcfb",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4073/17787.c",
    "line_number": "401",
    "column_number": "17",
    "info": "Assuming condition is false",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "9ba8d1f2bc094cfe5782980b67be64119408bb05bec3683863e12ab5459e1449",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "cwe": "788",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4073/17787.c",
    "line_number": "391",
    "column_number": "2",
    "info": "After for loop, i has value 1024",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Array \u0027region-\u003eaddrs[1024]\u0027 accessed at index 1024, which is out of bounds.",
    "hash_id": "c3501f32b1bfaad942c42cd23b3698fd82d436869632cd5a9c210135a53fb9ce",
    "bug_severity": "error",
    "bug_type": "arrayIndexOutOfBounds"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4073/17787.c",
    "line_number": "293",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "4604dc1efab3b1e27840de947e64c6e3a521d52413ce0debebf2fecdaa28d7f5",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4073/17787.c",
    "line_number": "295",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "4604dc1efab3b1e27840de947e64c6e3a521d52413ce0debebf2fecdaa28d7f5",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%u in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "4d525f12f45d09202a1d4d496a2a6db218413392fce61769e04efc9b9dd32e6a",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%u in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "60ea8e20936050b455e84090e11de8ba30d6a7e940839d83a33c5ac92bfb4623",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 4) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%u in format string (no. 4) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "987dc1ee09260e7244a378ed1c0559816a1c236c911fa3f38721915a2223fd2a",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 5) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%u in format string (no. 5) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "0c055f6cfd14d9674914b3dd2959bab3eec3e0091712b59ac823175f96702545",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 6) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%u in format string (no. 6) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "bdb474aeefa9f1bc610cc044bfd89843ea98cf2e6e777c1500a31c2d34ca7f45",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 7) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%u in format string (no. 7) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "c259de92949c3bee4885f8224008a36eb571d5ab9d238fb7b26cf5511e13c4c2",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "873",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%u in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "635f87900f1c5f60a95e60af7987c65d4db7b7cc4a92b275bdeaaa72bc1b69b3",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%x in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "891",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%x in format string (no. 1) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "90e3917ce82f1f560425f11fd3fbfc0688f53e438bac84f769ed180e8cd7eabb",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "485",
    "column_number": "7",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "3d5e2557b30f45d1fe07e76f50dc022c5d647a60501335edfaa69883f74f2cfc",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "480",
    "column_number": "32",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "hash_id": "ae515211b800bff69631cf24d2e3753bef92d5d561ab70ad0c3e9fab82bb6515",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "478",
    "column_number": "5",
    "info": "Assuming that condition \u0027!fp\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "hash_id": "e8137b18aff760940117a3a645967ef340b0c467e6ccd64352c8397515c12de1",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "483",
    "column_number": "38",
    "info": "Null pointer dereference",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "hash_id": "ae515211b800bff69631cf24d2e3753bef92d5d561ab70ad0c3e9fab82bb6515",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "cwe": "476",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "478",
    "column_number": "5",
    "info": "Assuming that condition \u0027!fp\u0027 is not redundant",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Either the condition \u0027!fp\u0027 is redundant or there is possible null pointer dereference: fp.",
    "hash_id": "e8137b18aff760940117a3a645967ef340b0c467e6ccd64352c8397515c12de1",
    "bug_severity": "warning",
    "bug_type": "nullPointerRedundantCheck"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Redundant assignment of \u0027addr[0]\u0027 to itself.",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2004-1235/744.c",
    "line_number": "283",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Redundant assignment of \u0027addr[0]\u0027 to itself.",
    "hash_id": "b365ad303d3978a22e1034b9c360e141176e5e088a0d21c69ccd1483a9a94915",
    "bug_severity": "warning",
    "bug_type": "selfAssignment"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3301/15023.c",
    "line_number": "58",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "d232c6d0626be9da2d7e913197ade2d7e395810f6ea5aeec127e533b7c3d8ada",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3301/15023.c",
    "line_number": "60",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "d232c6d0626be9da2d7e913197ade2d7e395810f6ea5aeec127e533b7c3d8ada",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3301/15023.c",
    "line_number": "77",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "d232c6d0626be9da2d7e913197ade2d7e395810f6ea5aeec127e533b7c3d8ada",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2005-0736/1397.c",
    "line_number": "346",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "4bafda5a6a8d72db3df8ce94147b970ce3cca176cb93390f11ea7c3e7a2a46ba",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2005-0736/1397.c",
    "line_number": "433",
    "column_number": "18",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "4bafda5a6a8d72db3df8ce94147b970ce3cca176cb93390f11ea7c3e7a2a46ba",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "The obsolete function \u0027alloca\u0027 is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function \u0027alloca\u0027 is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2005-0736/1397.c",
    "line_number": "444",
    "column_number": "18",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Obsolete function \u0027alloca\u0027 called. In C99 and later it is recommended to use a variable length array instead.",
    "hash_id": "4bafda5a6a8d72db3df8ce94147b970ce3cca176cb93390f11ea7c3e7a2a46ba",
    "bug_severity": "warning",
    "bug_type": "allocaCalled"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "148",
    "column_number": "24",
    "info": "Returning identical expression \u0027rep\u0027",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "d1cbb72112985162037e6035a471c0e61a65faf39161427cafb58a794c4f6959",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "139",
    "column_number": "13",
    "info": "If condition \u0027rep\u0027 is true, the function will return/exit",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "4dc3b3f08f50f3db7ca81c96f27644589c0813f3f248b9de7c4e73173421546b",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "95",
    "column_number": "19",
    "info": "\u0027rep\u0027 is assigned value \u00270\u0027 here.",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "69add99653e75a5ef525822e683e97b36298dca3eabae69ee1a784e24b9fe648",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "110",
    "column_number": "31",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "c73e2590fa0b340b6dbe6df07df72d0069b669d72c1f56ff6d316e77d4c74b62",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "112",
    "column_number": "31",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "c73e2590fa0b340b6dbe6df07df72d0069b669d72c1f56ff6d316e77d4c74b62",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "127",
    "column_number": "25",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "c73e2590fa0b340b6dbe6df07df72d0069b669d72c1f56ff6d316e77d4c74b62",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Memory leak: newstack",
    "cwe": "401",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "256",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Memory leak: newstack",
    "hash_id": "3efc517de9930d8823dc8ca4613b68f29a975e820c9b2bd98b09abb8d92c2822",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Memory leak: newstack",
    "cwe": "401",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-4258/15704.c",
    "line_number": "273",
    "column_number": "17",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Memory leak: newstack",
    "hash_id": "3efc517de9930d8823dc8ca4613b68f29a975e820c9b2bd98b09abb8d92c2822",
    "bug_severity": "error",
    "bug_type": "memleak"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "385",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%u in format string (no. 2) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "99f634d0d3362c9ccc4be0fa32dbc2f30127cc7db3f1fe67cbea5a9a04ed9b03",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%u in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "385",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%u in format string (no. 3) requires \u0027unsigned int *\u0027 but the argument type is \u0027signed int *\u0027.",
    "hash_id": "9662845395b3dfbb48b89c998ca3c81e81aa56282a6782d87e05cdbaf883f6b6",
    "bug_severity": "warning",
    "bug_type": "invalidScanfArgType_int"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "333",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "6cd0b1dad5b4c42cc818f17dea50c3451e9fcd2681ce0f7b579ba584dadfa9e7",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "335",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "6cd0b1dad5b4c42cc818f17dea50c3451e9fcd2681ce0f7b579ba584dadfa9e7",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "352",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "6cd0b1dad5b4c42cc818f17dea50c3451e9fcd2681ce0f7b579ba584dadfa9e7",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "sscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "385",
    "column_number": "3",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "sscanf() without field width limits can crash with huge input data.",
    "hash_id": "60b36fe81a58b5575e794050375bd3a1f8b791153a2beed928ee71c96ad6d127",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: oldstyle",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "332",
    "column_number": "8",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Uninitialized variable: oldstyle",
    "hash_id": "9c8defb091cfdca08411ebe50de4368758bccb13fc65c653b40381e901a0aeff",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: oldstyle",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-2959/14814.c",
    "line_number": "324",
    "column_number": "8",
    "info": "Assuming condition is false",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Uninitialized variable: oldstyle",
    "hash_id": "e656e2fe815c77b060d2bad07f529eb1da56c4594d5144636fe9ad715a748d0f",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "257",
    "column_number": "10",
    "info": "Returning identical expression \u0027rep\u0027",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "0bce0b5b7bc70abed5eee2ced3f626bf28ec04bd6541bd7e2eb480448f42d9dd",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "246",
    "column_number": "6",
    "info": "If condition \u0027rep\u0027 is true, the function will return/exit",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "93a0a5b95535c443e92838fca7f90dd71a1bfaf02d311f7aa23a7b831e1d2f81",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "cwe": "398",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "202",
    "column_number": "17",
    "info": "\u0027rep\u0027 is assigned value \u00270\u0027 here.",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Identical condition and return expression \u0027rep\u0027, return value is always 0",
    "hash_id": "e7a50c2d3f3724497a5605fdddf9159889fc553d9f35680046a2b797c3ddd1b9",
    "bug_severity": "warning",
    "bug_type": "identicalConditionAfterEarlyExit"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "217",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "3ab8f6e7db2b405084d5127a98e47035fc849510dcacd3d6cd4a4dbb8a48d7d5",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "219",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "3ab8f6e7db2b405084d5127a98e47035fc849510dcacd3d6cd4a4dbb8a48d7d5",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "236",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "3ab8f6e7db2b405084d5127a98e47035fc849510dcacd3d6cd4a4dbb8a48d7d5",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Expression \u0027-300000000\u0027 has a negative value. That is converted to an unsigned value and used in an unsigned calculation.",
    "cwe": "195",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2010-3437/15150.c",
    "line_number": "312",
    "column_number": "27",
    "info": "Negative value is converted to an unsigned value",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Expression \u0027-300000000\u0027 has a negative value. That is converted to an unsigned value and used in an unsigned calculation.",
    "hash_id": "6ff95fd03a370138d277aa035b5226067997acdc1f777fdbc28d437684ff2adf",
    "bug_severity": "warning",
    "bug_type": "signConversion"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/caps_to_root/15916.c",
    "line_number": "115",
    "column_number": "31",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "5931d50cb6d96922ff210f87ae0f23ce6d2879c175290421d7c7ff9e3eff349b",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/caps_to_root/15916.c",
    "line_number": "117",
    "column_number": "31",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "5931d50cb6d96922ff210f87ae0f23ce6d2879c175290421d7c7ff9e3eff349b",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/caps_to_root/15916.c",
    "line_number": "132",
    "column_number": "25",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "5931d50cb6d96922ff210f87ae0f23ce6d2879c175290421d7c7ff9e3eff349b",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: ret",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/caps_to_root/15916.c",
    "line_number": "113",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Uninitialized variable: ret",
    "hash_id": "79ddfa847afffcde464b7c6d7f49ab189db6552e9d0f83a8a576a24f42cba320",
    "bug_severity": "error",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "221",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "hash_id": "978d574ac4f04a98482dd53edd11d236ba7f793c23dd7b5d92b8e63f61e79548",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "221",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "hash_id": "9982195b63f881c50dbde04c4eb986d7563f07c0f6c23712eac27dbfad406547",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "222",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "599fe8590fdef098123171f956810497b778a38852fbd00d42ddbcf37f73ac51",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "223",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "599fe8590fdef098123171f956810497b778a38852fbd00d42ddbcf37f73ac51",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "241",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "hash_id": "978d574ac4f04a98482dd53edd11d236ba7f793c23dd7b5d92b8e63f61e79548",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "241",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "hash_id": "9982195b63f881c50dbde04c4eb986d7563f07c0f6c23712eac27dbfad406547",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "242",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "599fe8590fdef098123171f956810497b778a38852fbd00d42ddbcf37f73ac51",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "243",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "599fe8590fdef098123171f956810497b778a38852fbd00d42ddbcf37f73ac51",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "258",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "hash_id": "978d574ac4f04a98482dd53edd11d236ba7f793c23dd7b5d92b8e63f61e79548",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "258",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "hash_id": "9982195b63f881c50dbde04c4eb986d7563f07c0f6c23712eac27dbfad406547",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "259",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027page *\u0027.",
    "hash_id": "599fe8590fdef098123171f956810497b778a38852fbd00d42ddbcf37f73ac51",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "269",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%lx in format string (no. 1) requires \u0027unsigned long\u0027 but the argument type is \u0027signed char *\u0027.",
    "hash_id": "978d574ac4f04a98482dd53edd11d236ba7f793c23dd7b5d92b8e63f61e79548",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "cwe": "686",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2008-0900/5092.c",
    "line_number": "269",
    "column_number": "2",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "%lx in format string (no. 2) requires \u0027unsigned long\u0027 but the argument type is \u0027const char *\u0027.",
    "hash_id": "9982195b63f881c50dbde04c4eb986d7563f07c0f6c23712eac27dbfad406547",
    "bug_severity": "warning",
    "bug_type": "invalidPrintfArgType_uint"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2016-0728/cve-2016-0728/rootz.c",
    "line_number": "30",
    "column_number": "12",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "28c055fbc527a8f25cc5cc08cc453cfbd7ee5146ef32c7a2522164f649b3658e",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2014-0196/cve-2014-0196.c",
    "line_number": "99",
    "column_number": "9",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "cf5aec9d06b62babb4bcc0a7f7228a82ebaf5486fbe1880b5dce4424fbc74c46",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2014-0196/cve-2014-0196.c",
    "line_number": "101",
    "column_number": "4",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "cf5aec9d06b62babb4bcc0a7f7228a82ebaf5486fbe1880b5dce4424fbc74c46",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Found an exit path from function with non-void return type that has missing return statement",
    "cwe": "758",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "457",
    "column_number": "0",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Found an exit path from function with non-void return type that has missing return statement",
    "hash_id": "839da0ec78363a572c3ff3069a93e75c4c8f8603da3835c6971b2f95089d917c",
    "bug_severity": "error",
    "bug_type": "missingReturn"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "277",
    "column_number": "15",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "eb421e277e4986b74255191015ac23d6b0fcc60fb840599a5bdf79d9faba4e50",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "fscanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.\\012\\012Sample program that can crash:\\012\\012#include \u003cstdio.h\u003e\\012int main()\\012{\\012    char c[5];\\012    scanf(\"%s\", c);\\012    return 0;\\012}\\012\\012Typing in 5 or more characters may make the program crash. The correct usage here is \u0027scanf(\"%4s\", c);\u0027, as the maximum field width does not include the terminating null byte.\\012Source: http://linux.die.net/man/3/scanf\\012Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
    "cwe": "119",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "280",
    "column_number": "10",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "fscanf() without field width limits can crash with huge input data.",
    "hash_id": "eb421e277e4986b74255191015ac23d6b0fcc60fb840599a5bdf79d9faba4e50",
    "bug_severity": "warning",
    "bug_type": "invalidscanf"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: sct_addr",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "296",
    "column_number": "34",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Uninitialized variable: sct_addr",
    "hash_id": "6e2b8a843527d7eba4b3895011a15471f33b6ab2043c3009e9c61998fc13164c",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: sct_addr",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2009-3547/pipe.c_32bit.c",
    "line_number": "275",
    "column_number": "18",
    "info": "Assuming condition is false",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "4dca098e7491efc83903494d7c00f24c843aae99",
    "commit_id_repair": "467c1ca5e5cdb021b2138108fb1d460c983359b0",
    "warning_message": "Uninitialized variable: sct_addr",
    "hash_id": "87b2b0e26ea48f40072ddf475ac447de5364d55fdfa07392cf30300c8f0d807f",
    "bug_severity": "warning",
    "bug_type": "uninitvar"
  },
  {
    "cppcheck_version": "2.13 dev",
    "verbose": "Uninitialized variable: pts_path",
    "cwe": "457",
    "file_path": "tmp_github/linux-kernel-exploits/CVE-2017-1000367/sudopwn.c",
    "line_number": "68",
    "column_number": "19",
    "tool_name": "cppcheck",
    "git_link": "https://github.com/SecWiki/linux-kernel-exploits.git",
    "commit_id": "5dd8f0d2e7e68a8e5e3474ff26b49fb56974319f",
    "commit_id_repair": "2574c737428ab2957228fe8acfaeff97a859b7c6",
    "warning_message": "Uninitialized variable: pts_path",
    "hash_id": "66e8de64716093fb46c28c62a6a7a6207b23ecbd9a081fa17837569ccaea6860",
    "bug_severity": "error",
    "bug_type": "legacyUninitvar"
  }
]