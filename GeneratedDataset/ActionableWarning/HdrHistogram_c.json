[
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027pc\u0027 can be declared as pointer to const",
    "cwe": "398",
    "info": "Variable \u0027pc\u0027 can be declared as pointer to const",
    "hashId": "3c56c210df7e97dd631dba55903c6f5571369d3eb17186e63c4967a700677bb5",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027pc\u0027 can be declared as pointer to const",
    "warningSeverity": "style",
    "warningType": "constVariablePointer",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_histogram_log.c",
    "lineNumber": "111",
    "columnNumber": "20",
    "commitId": "741c421acdab694f02e9826c99dd2a6beb77df75",
    "commitChildId": "446d70dc5447f8072d342c9013368f12aa603b81",
    "commitTitle": "Remove some unused code.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/446d70dc5447f8072d342c9013368f12aa603b81",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/741c421acdab694f02e9826c99dd2a6beb77df75/src/hdr_histogram_log.c#L111",
    "gitDiffText": "diff --git a/src/hdr_histogram_log.c b/src/hdr_histogram_log.c\nindex 1615118..b6a7154 100644\n--- a/src/hdr_histogram_log.c\n+++ b/src/hdr_histogram_log.c\n@@ -105,50 +105,6 @@\n     return 0;\n }\n \n-void hex_dump (char *desc, void *addr, int len) {\n-    int i;\n-    unsigned char buff[17];\n-    unsigned char *pc \u003d (unsigned char*)addr;\n-\n-    // Output description if given.\n-    if (desc !\u003d NULL)\n-        printf (\"%s:\\n\", desc);\n-\n-    // Process every byte in the data.\n-    for (i \u003d 0; i \u003c len; i++) {\n-        // Multiple of 16 means new line (with line offset).\n-\n-        if ((i % 16) \u003d\u003d 0) {\n-            // Just don\u0027t print ASCII for the zeroth line.\n-            if (i !\u003d 0)\n-                printf (\"  %s\\n\", buff);\n-\n-            // Output the offset.\n-            printf (\"  %04x \", i);\n-        }\n-\n-        // Now the hex code for the specific character.\n-        printf (\" %02x\", pc[i]);\n-\n-        // And store a printable ASCII character for later.\n-        if ((pc[i] \u003c 0x20) || (pc[i] \u003e 0x7e))\n-            buff[i % 16] \u003d \u0027.\u0027;\n-        else\n-            buff[i % 16] \u003d pc[i];\n-        buff[(i % 16) + 1] \u003d \u0027\\0\u0027;\n-    }\n-\n-    // Pad out last line if not exactly 16 characters.\n-    while ((i % 16) !\u003d 0) {\n-        printf (\"   \");\n-        i++;\n-    }\n-\n-    // And print the final ASCII bit.\n-    printf (\"  %s\\n\", buff);\n-}\n-\n-\n // ########     ###     ######  ########     #######  ##\n // ##     ##   ## ##   ##    ## ##          ##     ## ##    ##\n // ##     ##  ##   ##  ##       ##          ##        ##    ##\n@@ -652,7 +608,6 @@\n             r \u003d inflate(\u0026strm, Z_FINISH);\n         }\n     }\n-    (void)inflateEnd(\u0026strm);\n \n     for (int i \u003d 0; i \u003c h-\u003ecounts_len; i++)\n     {\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Parameter \u0027desc\u0027 can be declared as pointer to const",
    "cwe": "398",
    "info": "Parameter \u0027desc\u0027 can be declared as pointer to const",
    "hashId": "16d46faab317f8ed80d18e5a1ab32097c5a8c8a022ff6eea21cef286c10f0b8d",
    "toolName": "cppcheck",
    "warningMessage": "Parameter \u0027desc\u0027 can be declared as pointer to const",
    "warningSeverity": "style",
    "warningType": "constParameterPointer",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_histogram_log.c",
    "lineNumber": "108",
    "columnNumber": "22",
    "commitId": "741c421acdab694f02e9826c99dd2a6beb77df75",
    "commitChildId": "446d70dc5447f8072d342c9013368f12aa603b81",
    "commitTitle": "Remove some unused code.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/446d70dc5447f8072d342c9013368f12aa603b81",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/741c421acdab694f02e9826c99dd2a6beb77df75/src/hdr_histogram_log.c#L108",
    "gitDiffText": "diff --git a/src/hdr_histogram_log.c b/src/hdr_histogram_log.c\nindex 1615118..b6a7154 100644\n--- a/src/hdr_histogram_log.c\n+++ b/src/hdr_histogram_log.c\n@@ -105,50 +105,6 @@\n     return 0;\n }\n \n-void hex_dump (char *desc, void *addr, int len) {\n-    int i;\n-    unsigned char buff[17];\n-    unsigned char *pc \u003d (unsigned char*)addr;\n-\n-    // Output description if given.\n-    if (desc !\u003d NULL)\n-        printf (\"%s:\\n\", desc);\n-\n-    // Process every byte in the data.\n-    for (i \u003d 0; i \u003c len; i++) {\n-        // Multiple of 16 means new line (with line offset).\n-\n-        if ((i % 16) \u003d\u003d 0) {\n-            // Just don\u0027t print ASCII for the zeroth line.\n-            if (i !\u003d 0)\n-                printf (\"  %s\\n\", buff);\n-\n-            // Output the offset.\n-            printf (\"  %04x \", i);\n-        }\n-\n-        // Now the hex code for the specific character.\n-        printf (\" %02x\", pc[i]);\n-\n-        // And store a printable ASCII character for later.\n-        if ((pc[i] \u003c 0x20) || (pc[i] \u003e 0x7e))\n-            buff[i % 16] \u003d \u0027.\u0027;\n-        else\n-            buff[i % 16] \u003d pc[i];\n-        buff[(i % 16) + 1] \u003d \u0027\\0\u0027;\n-    }\n-\n-    // Pad out last line if not exactly 16 characters.\n-    while ((i % 16) !\u003d 0) {\n-        printf (\"   \");\n-        i++;\n-    }\n-\n-    // And print the final ASCII bit.\n-    printf (\"  %s\\n\", buff);\n-}\n-\n-\n // ########     ###     ######  ########     #######  ##\n // ##     ##   ## ##   ##    ## ##          ##     ## ##    ##\n // ##     ##  ##   ##  ##       ##          ##        ##    ##\n@@ -652,7 +608,6 @@\n             r \u003d inflate(\u0026strm, Z_FINISH);\n         }\n     }\n-    (void)inflateEnd(\u0026strm);\n \n     for (int i \u003d 0; i \u003c h-\u003ecounts_len; i++)\n     {\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Uninitialized variable: buff",
    "cwe": "457",
    "hashId": "5b6f184a2f504c9ca6ced3767fccde127bfbc0dd7b3f7cf5b2809eaa31b4b80e",
    "toolName": "cppcheck",
    "warningMessage": "Uninitialized variable: buff",
    "warningSeverity": "warning",
    "warningType": "uninitvar",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_histogram_log.c",
    "lineNumber": "148",
    "columnNumber": "23",
    "commitId": "741c421acdab694f02e9826c99dd2a6beb77df75",
    "commitChildId": "446d70dc5447f8072d342c9013368f12aa603b81",
    "commitTitle": "Remove some unused code.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/446d70dc5447f8072d342c9013368f12aa603b81",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/741c421acdab694f02e9826c99dd2a6beb77df75/src/hdr_histogram_log.c#L148",
    "gitDiffText": "diff --git a/src/hdr_histogram_log.c b/src/hdr_histogram_log.c\nindex 1615118..b6a7154 100644\n--- a/src/hdr_histogram_log.c\n+++ b/src/hdr_histogram_log.c\n@@ -105,50 +105,6 @@\n     return 0;\n }\n \n-void hex_dump (char *desc, void *addr, int len) {\n-    int i;\n-    unsigned char buff[17];\n-    unsigned char *pc \u003d (unsigned char*)addr;\n-\n-    // Output description if given.\n-    if (desc !\u003d NULL)\n-        printf (\"%s:\\n\", desc);\n-\n-    // Process every byte in the data.\n-    for (i \u003d 0; i \u003c len; i++) {\n-        // Multiple of 16 means new line (with line offset).\n-\n-        if ((i % 16) \u003d\u003d 0) {\n-            // Just don\u0027t print ASCII for the zeroth line.\n-            if (i !\u003d 0)\n-                printf (\"  %s\\n\", buff);\n-\n-            // Output the offset.\n-            printf (\"  %04x \", i);\n-        }\n-\n-        // Now the hex code for the specific character.\n-        printf (\" %02x\", pc[i]);\n-\n-        // And store a printable ASCII character for later.\n-        if ((pc[i] \u003c 0x20) || (pc[i] \u003e 0x7e))\n-            buff[i % 16] \u003d \u0027.\u0027;\n-        else\n-            buff[i % 16] \u003d pc[i];\n-        buff[(i % 16) + 1] \u003d \u0027\\0\u0027;\n-    }\n-\n-    // Pad out last line if not exactly 16 characters.\n-    while ((i % 16) !\u003d 0) {\n-        printf (\"   \");\n-        i++;\n-    }\n-\n-    // And print the final ASCII bit.\n-    printf (\"  %s\\n\", buff);\n-}\n-\n-\n // ########     ###     ######  ########     #######  ##\n // ##     ##   ## ##   ##    ## ##          ##     ## ##    ##\n // ##     ##  ##   ##  ##       ##          ##        ##    ##\n@@ -652,7 +608,6 @@\n             r \u003d inflate(\u0026strm, Z_FINISH);\n         }\n     }\n-    (void)inflateEnd(\u0026strm);\n \n     for (int i \u003d 0; i \u003c h-\u003ecounts_len; i++)\n     {\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Uninitialized variable: buff",
    "cwe": "457",
    "info": "Assuming condition is false",
    "hashId": "5b6f184a2f504c9ca6ced3767fccde127bfbc0dd7b3f7cf5b2809eaa31b4b80e",
    "toolName": "cppcheck",
    "warningMessage": "Uninitialized variable: buff",
    "warningSeverity": "warning",
    "warningType": "uninitvar",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_histogram_log.c",
    "lineNumber": "118",
    "columnNumber": "19",
    "commitId": "741c421acdab694f02e9826c99dd2a6beb77df75",
    "commitChildId": "446d70dc5447f8072d342c9013368f12aa603b81",
    "commitTitle": "Remove some unused code.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/446d70dc5447f8072d342c9013368f12aa603b81",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/741c421acdab694f02e9826c99dd2a6beb77df75/src/hdr_histogram_log.c#L118",
    "gitDiffText": "diff --git a/src/hdr_histogram_log.c b/src/hdr_histogram_log.c\nindex 1615118..b6a7154 100644\n--- a/src/hdr_histogram_log.c\n+++ b/src/hdr_histogram_log.c\n@@ -105,50 +105,6 @@\n     return 0;\n }\n \n-void hex_dump (char *desc, void *addr, int len) {\n-    int i;\n-    unsigned char buff[17];\n-    unsigned char *pc \u003d (unsigned char*)addr;\n-\n-    // Output description if given.\n-    if (desc !\u003d NULL)\n-        printf (\"%s:\\n\", desc);\n-\n-    // Process every byte in the data.\n-    for (i \u003d 0; i \u003c len; i++) {\n-        // Multiple of 16 means new line (with line offset).\n-\n-        if ((i % 16) \u003d\u003d 0) {\n-            // Just don\u0027t print ASCII for the zeroth line.\n-            if (i !\u003d 0)\n-                printf (\"  %s\\n\", buff);\n-\n-            // Output the offset.\n-            printf (\"  %04x \", i);\n-        }\n-\n-        // Now the hex code for the specific character.\n-        printf (\" %02x\", pc[i]);\n-\n-        // And store a printable ASCII character for later.\n-        if ((pc[i] \u003c 0x20) || (pc[i] \u003e 0x7e))\n-            buff[i % 16] \u003d \u0027.\u0027;\n-        else\n-            buff[i % 16] \u003d pc[i];\n-        buff[(i % 16) + 1] \u003d \u0027\\0\u0027;\n-    }\n-\n-    // Pad out last line if not exactly 16 characters.\n-    while ((i % 16) !\u003d 0) {\n-        printf (\"   \");\n-        i++;\n-    }\n-\n-    // And print the final ASCII bit.\n-    printf (\"  %s\\n\", buff);\n-}\n-\n-\n // ########     ###     ######  ########     #######  ##\n // ##     ##   ## ##   ##    ## ##          ##     ## ##    ##\n // ##     ##  ##   ##  ##       ##          ##        ##    ##\n@@ -652,7 +608,6 @@\n             r \u003d inflate(\u0026strm, Z_FINISH);\n         }\n     }\n-    (void)inflateEnd(\u0026strm);\n \n     for (int i \u003d 0; i \u003c h-\u003ecounts_len; i++)\n     {\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027line\u0027 can be declared as pointer to const",
    "cwe": "398",
    "info": "Variable \u0027line\u0027 can be declared as pointer to const",
    "hashId": "30f14a834900e289f5616634afec94f151a74c986d06aed07fc2843bc1890438",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027line\u0027 can be declared as pointer to const",
    "warningSeverity": "style",
    "warningType": "constVariablePointer",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_histogram_log.c",
    "lineNumber": "1006",
    "columnNumber": "8",
    "commitId": "67c2a57334434d70ff5142295cd5b0c8dc9b1e7a",
    "commitChildId": "3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "commitTitle": "[C] Small formatting cleanups.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/67c2a57334434d70ff5142295cd5b0c8dc9b1e7a/src/hdr_histogram_log.c#L1006",
    "gitDiffText": "diff --git a/test/hdr_histogram_log_test.c b/test/hdr_histogram_log_test.c\nindex a9b9270..162aa03 100644\n--- a/test/hdr_histogram_log_test.c\n+++ b/test/hdr_histogram_log_test.c\n@@ -552,21 +552,21 @@\n \n static char* test_string_encode_decode()\n {\n-\tstruct hdr_histogram *histogram, *hdr_new \u003d NULL;\n-\thdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n+    struct hdr_histogram *histogram, *hdr_new \u003d NULL;\n+    hdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n \n-\tfor (int i \u003d 1; i \u003c 100; i++) {\n-\t\thdr_record_value(histogram, i*i);\n-\t}\n+    for (int i \u003d 1; i \u003c 100; i++) {\n+        hdr_record_value(histogram, i*i);\n+    }\n \n-\tchar *data;\n+    char *data;\n \n-\tmu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n-\tmu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n+    mu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n+    mu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n \n-\tmu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n+    mu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n \n-\treturn 0;\n+    return 0;\n }\n \n static struct mu_result all_tests()\n@@ -590,7 +590,7 @@\n     mu_run_test(log_reader_aggregates_into_single_histogram);\n     mu_run_test(log_reader_fails_with_incorrect_version);\n \n-\tmu_run_test(test_string_encode_decode);\n+    mu_run_test(test_string_encode_decode);\n \n     free(raw_histogram);\n     free(cor_histogram);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027line\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "f4ffa9ab88fd4351d55cf0c2a95311fce687bb41b772bfea081caf35c628bf9a",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027line\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_histogram_log.c",
    "lineNumber": "1006",
    "columnNumber": "8",
    "commitId": "67c2a57334434d70ff5142295cd5b0c8dc9b1e7a",
    "commitChildId": "3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "commitTitle": "[C] Small formatting cleanups.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/67c2a57334434d70ff5142295cd5b0c8dc9b1e7a/src/hdr_histogram_log.c#L1006",
    "gitDiffText": "diff --git a/test/hdr_histogram_log_test.c b/test/hdr_histogram_log_test.c\nindex a9b9270..162aa03 100644\n--- a/test/hdr_histogram_log_test.c\n+++ b/test/hdr_histogram_log_test.c\n@@ -552,21 +552,21 @@\n \n static char* test_string_encode_decode()\n {\n-\tstruct hdr_histogram *histogram, *hdr_new \u003d NULL;\n-\thdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n+    struct hdr_histogram *histogram, *hdr_new \u003d NULL;\n+    hdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n \n-\tfor (int i \u003d 1; i \u003c 100; i++) {\n-\t\thdr_record_value(histogram, i*i);\n-\t}\n+    for (int i \u003d 1; i \u003c 100; i++) {\n+        hdr_record_value(histogram, i*i);\n+    }\n \n-\tchar *data;\n+    char *data;\n \n-\tmu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n-\tmu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n+    mu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n+    mu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n \n-\tmu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n+    mu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n \n-\treturn 0;\n+    return 0;\n }\n \n static struct mu_result all_tests()\n@@ -590,7 +590,7 @@\n     mu_run_test(log_reader_aggregates_into_single_histogram);\n     mu_run_test(log_reader_fails_with_incorrect_version);\n \n-\tmu_run_test(test_string_encode_decode);\n+    mu_run_test(test_string_encode_decode);\n \n     free(raw_histogram);\n     free(cor_histogram);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027line_len\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "4b11fce39a900077539a629f8b880c46ba903e622ec121b89b3221acd91fb62f",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027line_len\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_histogram_log.c",
    "lineNumber": "1007",
    "columnNumber": "9",
    "commitId": "67c2a57334434d70ff5142295cd5b0c8dc9b1e7a",
    "commitChildId": "3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "commitTitle": "[C] Small formatting cleanups.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/67c2a57334434d70ff5142295cd5b0c8dc9b1e7a/src/hdr_histogram_log.c#L1007",
    "gitDiffText": "diff --git a/test/hdr_histogram_log_test.c b/test/hdr_histogram_log_test.c\nindex a9b9270..162aa03 100644\n--- a/test/hdr_histogram_log_test.c\n+++ b/test/hdr_histogram_log_test.c\n@@ -552,21 +552,21 @@\n \n static char* test_string_encode_decode()\n {\n-\tstruct hdr_histogram *histogram, *hdr_new \u003d NULL;\n-\thdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n+    struct hdr_histogram *histogram, *hdr_new \u003d NULL;\n+    hdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n \n-\tfor (int i \u003d 1; i \u003c 100; i++) {\n-\t\thdr_record_value(histogram, i*i);\n-\t}\n+    for (int i \u003d 1; i \u003c 100; i++) {\n+        hdr_record_value(histogram, i*i);\n+    }\n \n-\tchar *data;\n+    char *data;\n \n-\tmu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n-\tmu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n+    mu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n+    mu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n \n-\tmu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n+    mu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n \n-\treturn 0;\n+    return 0;\n }\n \n static struct mu_result all_tests()\n@@ -590,7 +590,7 @@\n     mu_run_test(log_reader_aggregates_into_single_histogram);\n     mu_run_test(log_reader_fails_with_incorrect_version);\n \n-\tmu_run_test(test_string_encode_decode);\n+    mu_run_test(test_string_encode_decode);\n \n     free(raw_histogram);\n     free(cor_histogram);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027begin_s\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "b61272a821c1b81e8a91eecb495814a943d1cc8cf90d2b3fa5ccd6a2dee91a12",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027begin_s\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_histogram_log.c",
    "lineNumber": "1010",
    "columnNumber": "6",
    "commitId": "67c2a57334434d70ff5142295cd5b0c8dc9b1e7a",
    "commitChildId": "3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "commitTitle": "[C] Small formatting cleanups.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/67c2a57334434d70ff5142295cd5b0c8dc9b1e7a/src/hdr_histogram_log.c#L1010",
    "gitDiffText": "diff --git a/test/hdr_histogram_log_test.c b/test/hdr_histogram_log_test.c\nindex a9b9270..162aa03 100644\n--- a/test/hdr_histogram_log_test.c\n+++ b/test/hdr_histogram_log_test.c\n@@ -552,21 +552,21 @@\n \n static char* test_string_encode_decode()\n {\n-\tstruct hdr_histogram *histogram, *hdr_new \u003d NULL;\n-\thdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n+    struct hdr_histogram *histogram, *hdr_new \u003d NULL;\n+    hdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n \n-\tfor (int i \u003d 1; i \u003c 100; i++) {\n-\t\thdr_record_value(histogram, i*i);\n-\t}\n+    for (int i \u003d 1; i \u003c 100; i++) {\n+        hdr_record_value(histogram, i*i);\n+    }\n \n-\tchar *data;\n+    char *data;\n \n-\tmu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n-\tmu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n+    mu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n+    mu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n \n-\tmu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n+    mu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n \n-\treturn 0;\n+    return 0;\n }\n \n static struct mu_result all_tests()\n@@ -590,7 +590,7 @@\n     mu_run_test(log_reader_aggregates_into_single_histogram);\n     mu_run_test(log_reader_fails_with_incorrect_version);\n \n-\tmu_run_test(test_string_encode_decode);\n+    mu_run_test(test_string_encode_decode);\n \n     free(raw_histogram);\n     free(cor_histogram);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027begin_ms\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "c2301594081c5e87d18c37b0d48f27cf95f5a2df3f956be971017e3ff8a4aa4d",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027begin_ms\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_histogram_log.c",
    "lineNumber": "1011",
    "columnNumber": "6",
    "commitId": "67c2a57334434d70ff5142295cd5b0c8dc9b1e7a",
    "commitChildId": "3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "commitTitle": "[C] Small formatting cleanups.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/67c2a57334434d70ff5142295cd5b0c8dc9b1e7a/src/hdr_histogram_log.c#L1011",
    "gitDiffText": "diff --git a/test/hdr_histogram_log_test.c b/test/hdr_histogram_log_test.c\nindex a9b9270..162aa03 100644\n--- a/test/hdr_histogram_log_test.c\n+++ b/test/hdr_histogram_log_test.c\n@@ -552,21 +552,21 @@\n \n static char* test_string_encode_decode()\n {\n-\tstruct hdr_histogram *histogram, *hdr_new \u003d NULL;\n-\thdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n+    struct hdr_histogram *histogram, *hdr_new \u003d NULL;\n+    hdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n \n-\tfor (int i \u003d 1; i \u003c 100; i++) {\n-\t\thdr_record_value(histogram, i*i);\n-\t}\n+    for (int i \u003d 1; i \u003c 100; i++) {\n+        hdr_record_value(histogram, i*i);\n+    }\n \n-\tchar *data;\n+    char *data;\n \n-\tmu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n-\tmu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n+    mu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n+    mu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n \n-\tmu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n+    mu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n \n-\treturn 0;\n+    return 0;\n }\n \n static struct mu_result all_tests()\n@@ -590,7 +590,7 @@\n     mu_run_test(log_reader_aggregates_into_single_histogram);\n     mu_run_test(log_reader_fails_with_incorrect_version);\n \n-\tmu_run_test(test_string_encode_decode);\n+    mu_run_test(test_string_encode_decode);\n \n     free(raw_histogram);\n     free(cor_histogram);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027end_s\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "8fd57d7e9a26371c5ae9a5c0ae68f6716979e57d5b0f3f49fbd23b185bbaee3d",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027end_s\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_histogram_log.c",
    "lineNumber": "1012",
    "columnNumber": "6",
    "commitId": "67c2a57334434d70ff5142295cd5b0c8dc9b1e7a",
    "commitChildId": "3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "commitTitle": "[C] Small formatting cleanups.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/67c2a57334434d70ff5142295cd5b0c8dc9b1e7a/src/hdr_histogram_log.c#L1012",
    "gitDiffText": "diff --git a/test/hdr_histogram_log_test.c b/test/hdr_histogram_log_test.c\nindex a9b9270..162aa03 100644\n--- a/test/hdr_histogram_log_test.c\n+++ b/test/hdr_histogram_log_test.c\n@@ -552,21 +552,21 @@\n \n static char* test_string_encode_decode()\n {\n-\tstruct hdr_histogram *histogram, *hdr_new \u003d NULL;\n-\thdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n+    struct hdr_histogram *histogram, *hdr_new \u003d NULL;\n+    hdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n \n-\tfor (int i \u003d 1; i \u003c 100; i++) {\n-\t\thdr_record_value(histogram, i*i);\n-\t}\n+    for (int i \u003d 1; i \u003c 100; i++) {\n+        hdr_record_value(histogram, i*i);\n+    }\n \n-\tchar *data;\n+    char *data;\n \n-\tmu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n-\tmu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n+    mu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n+    mu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n \n-\tmu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n+    mu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n \n-\treturn 0;\n+    return 0;\n }\n \n static struct mu_result all_tests()\n@@ -590,7 +590,7 @@\n     mu_run_test(log_reader_aggregates_into_single_histogram);\n     mu_run_test(log_reader_fails_with_incorrect_version);\n \n-\tmu_run_test(test_string_encode_decode);\n+    mu_run_test(test_string_encode_decode);\n \n     free(raw_histogram);\n     free(cor_histogram);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027end_ms\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "c494f2e93ecdc38f571134552739c8f4ecda6f329025d6fa727b2accaa51ff1d",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027end_ms\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_histogram_log.c",
    "lineNumber": "1013",
    "columnNumber": "6",
    "commitId": "67c2a57334434d70ff5142295cd5b0c8dc9b1e7a",
    "commitChildId": "3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "commitTitle": "[C] Small formatting cleanups.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/67c2a57334434d70ff5142295cd5b0c8dc9b1e7a/src/hdr_histogram_log.c#L1013",
    "gitDiffText": "diff --git a/test/hdr_histogram_log_test.c b/test/hdr_histogram_log_test.c\nindex a9b9270..162aa03 100644\n--- a/test/hdr_histogram_log_test.c\n+++ b/test/hdr_histogram_log_test.c\n@@ -552,21 +552,21 @@\n \n static char* test_string_encode_decode()\n {\n-\tstruct hdr_histogram *histogram, *hdr_new \u003d NULL;\n-\thdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n+    struct hdr_histogram *histogram, *hdr_new \u003d NULL;\n+    hdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n \n-\tfor (int i \u003d 1; i \u003c 100; i++) {\n-\t\thdr_record_value(histogram, i*i);\n-\t}\n+    for (int i \u003d 1; i \u003c 100; i++) {\n+        hdr_record_value(histogram, i*i);\n+    }\n \n-\tchar *data;\n+    char *data;\n \n-\tmu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n-\tmu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n+    mu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n+    mu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n \n-\tmu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n+    mu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n \n-\treturn 0;\n+    return 0;\n }\n \n static struct mu_result all_tests()\n@@ -590,7 +590,7 @@\n     mu_run_test(log_reader_aggregates_into_single_histogram);\n     mu_run_test(log_reader_fails_with_incorrect_version);\n \n-\tmu_run_test(test_string_encode_decode);\n+    mu_run_test(test_string_encode_decode);\n \n     free(raw_histogram);\n     free(cor_histogram);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027interval_max_s\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "06c0d9b2962b3f344ac92b8c6e5a6530a8ae37465d4e99751b028977ef5146ca",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027interval_max_s\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_histogram_log.c",
    "lineNumber": "1014",
    "columnNumber": "6",
    "commitId": "67c2a57334434d70ff5142295cd5b0c8dc9b1e7a",
    "commitChildId": "3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "commitTitle": "[C] Small formatting cleanups.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/67c2a57334434d70ff5142295cd5b0c8dc9b1e7a/src/hdr_histogram_log.c#L1014",
    "gitDiffText": "diff --git a/test/hdr_histogram_log_test.c b/test/hdr_histogram_log_test.c\nindex a9b9270..162aa03 100644\n--- a/test/hdr_histogram_log_test.c\n+++ b/test/hdr_histogram_log_test.c\n@@ -552,21 +552,21 @@\n \n static char* test_string_encode_decode()\n {\n-\tstruct hdr_histogram *histogram, *hdr_new \u003d NULL;\n-\thdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n+    struct hdr_histogram *histogram, *hdr_new \u003d NULL;\n+    hdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n \n-\tfor (int i \u003d 1; i \u003c 100; i++) {\n-\t\thdr_record_value(histogram, i*i);\n-\t}\n+    for (int i \u003d 1; i \u003c 100; i++) {\n+        hdr_record_value(histogram, i*i);\n+    }\n \n-\tchar *data;\n+    char *data;\n \n-\tmu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n-\tmu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n+    mu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n+    mu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n \n-\tmu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n+    mu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n \n-\treturn 0;\n+    return 0;\n }\n \n static struct mu_result all_tests()\n@@ -590,7 +590,7 @@\n     mu_run_test(log_reader_aggregates_into_single_histogram);\n     mu_run_test(log_reader_fails_with_incorrect_version);\n \n-\tmu_run_test(test_string_encode_decode);\n+    mu_run_test(test_string_encode_decode);\n \n     free(raw_histogram);\n     free(cor_histogram);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027interval_max_ms\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "e384ad00507310a1da96ce312c5eec2f75602b6c71189cae874cd73c56e28ddf",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027interval_max_ms\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_histogram_log.c",
    "lineNumber": "1015",
    "columnNumber": "6",
    "commitId": "67c2a57334434d70ff5142295cd5b0c8dc9b1e7a",
    "commitChildId": "3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "commitTitle": "[C] Small formatting cleanups.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/3793e234e110a6f1a74c9455c4d3632dc0e6df0f",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/67c2a57334434d70ff5142295cd5b0c8dc9b1e7a/src/hdr_histogram_log.c#L1015",
    "gitDiffText": "diff --git a/test/hdr_histogram_log_test.c b/test/hdr_histogram_log_test.c\nindex a9b9270..162aa03 100644\n--- a/test/hdr_histogram_log_test.c\n+++ b/test/hdr_histogram_log_test.c\n@@ -552,21 +552,21 @@\n \n static char* test_string_encode_decode()\n {\n-\tstruct hdr_histogram *histogram, *hdr_new \u003d NULL;\n-\thdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n+    struct hdr_histogram *histogram, *hdr_new \u003d NULL;\n+    hdr_alloc(3600L * 1000 * 1000, 3, \u0026histogram);\n \n-\tfor (int i \u003d 1; i \u003c 100; i++) {\n-\t\thdr_record_value(histogram, i*i);\n-\t}\n+    for (int i \u003d 1; i \u003c 100; i++) {\n+        hdr_record_value(histogram, i*i);\n+    }\n \n-\tchar *data;\n+    char *data;\n \n-\tmu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n-\tmu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n+    mu_assert(\"failed to encode histogram data\", hdr_log_encode(histogram, \u0026data) \u003d\u003d 0);\n+    mu_assert(\"failed to decode histogram data\", hdr_log_decode(\u0026hdr_new, data, strlen(data)) \u003d\u003d 0);\n \n-\tmu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n+    mu_assert(\"failed to be equal histogram after encode/decode\", hdr_mean(histogram) \u003d\u003d hdr_mean(hdr_new));\n \n-\treturn 0;\n+    return 0;\n }\n \n static struct mu_result all_tests()\n@@ -590,7 +590,7 @@\n     mu_run_test(log_reader_aggregates_into_single_histogram);\n     mu_run_test(log_reader_fails_with_incorrect_version);\n \n-\tmu_run_test(test_string_encode_decode);\n+    mu_run_test(test_string_encode_decode);\n \n     free(raw_histogram);\n     free(cor_histogram);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Include file: \u003chdr_atomic_histogram.h\u003e not found. Please note: Cppcheck does not need standard library headers to get proper results.",
    "hashId": "b38548ae942d6d3b1f5f89a6b004827bb4b6981577b40e83db956f8e4f1c9db8",
    "toolName": "cppcheck",
    "warningMessage": "Include file: \u003chdr_atomic_histogram.h\u003e not found. Please note: Cppcheck does not need standard library headers to get proper results.",
    "warningSeverity": "information",
    "warningType": "missingIncludeSystem",
    "filePath": "tmp_github\\HdrHistogram_c\\test\\hdr_histogram_perf.c",
    "lineNumber": "12",
    "columnNumber": "0",
    "commitId": "cff971e839f1ccad3bfa89325c4a59b3ebc438f2",
    "commitChildId": "82e2ee859dcb128d25b60e7498e348db9e1ccee9",
    "commitTitle": "[C] Remove atomic histogram and associated code.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/82e2ee859dcb128d25b60e7498e348db9e1ccee9",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/cff971e839f1ccad3bfa89325c4a59b3ebc438f2/test/hdr_histogram_perf.c#L12",
    "gitDiffText": "diff --git a/test/hdr_histogram_test.c b/test/hdr_histogram_test.c\nindex 960e740..47b04e0 100644\n--- a/test/hdr_histogram_test.c\n+++ b/test/hdr_histogram_test.c\n@@ -108,7 +108,7 @@\n \n     mu_assert(\"Failed to allocate hdr_histogram\", r \u003d\u003d 0);\n     mu_assert(\"Failed to allocate hdr_histogram\", h !\u003d NULL);\n-    mu_assert(\"Size is incorrect\", compare_int64(s, 1704064));\n+    mu_assert(\"Size is incorrect\", compare_int64(s, 1704040));\n \n     free(h);\n \n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Found an exit path from function with non-void return type that has missing return statement",
    "cwe": "758",
    "hashId": "55bcd0eecd2316d04ede125a0aa920e3ef70ae683b651318d218a5e45ef3d3cd",
    "toolName": "cppcheck",
    "warningMessage": "Found an exit path from function with non-void return type that has missing return statement",
    "warningSeverity": "error",
    "warningType": "missingReturn",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_dbl_histogram.c",
    "lineNumber": "134",
    "columnNumber": "5",
    "commitId": "d49e91abb96f06d6e89cd32d8e482be21b1e4eb4",
    "commitChildId": "cff971e839f1ccad3bfa89325c4a59b3ebc438f2",
    "commitTitle": "[C] More work on hdr_dbl_histogram, range adjustment now works and now have a couple of passing unit tests.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/cff971e839f1ccad3bfa89325c4a59b3ebc438f2",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/d49e91abb96f06d6e89cd32d8e482be21b1e4eb4/src/hdr_dbl_histogram.c#L134",
    "gitDiffText": "diff --git a/test/hdr_dbl_histogram_test.c b/test/hdr_dbl_histogram_test.c\nindex faa18f3..6ba5454 100644\n--- a/test/hdr_dbl_histogram_test.c\n+++ b/test/hdr_dbl_histogram_test.c\n@@ -69,8 +69,8 @@\n \n static struct mu_result all_tests()\n {\n-    //mu_run_test(test_construct_argument_ranges);\n-    //mu_run_test(test_construction_argument_gets);\n+    mu_run_test(test_construct_argument_ranges);\n+    mu_run_test(test_construction_argument_gets);\n \n     mu_ok;\n }\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027shift_amount\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "1edd42ff5ab820a86baf60283f0a1b57784c1d917aba585842865ff24b2f6918",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027shift_amount\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\hdr_dbl_histogram.c",
    "lineNumber": "130",
    "columnNumber": "34",
    "commitId": "d49e91abb96f06d6e89cd32d8e482be21b1e4eb4",
    "commitChildId": "cff971e839f1ccad3bfa89325c4a59b3ebc438f2",
    "commitTitle": "[C] More work on hdr_dbl_histogram, range adjustment now works and now have a couple of passing unit tests.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/cff971e839f1ccad3bfa89325c4a59b3ebc438f2",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/d49e91abb96f06d6e89cd32d8e482be21b1e4eb4/src/hdr_dbl_histogram.c#L130",
    "gitDiffText": "diff --git a/test/hdr_dbl_histogram_test.c b/test/hdr_dbl_histogram_test.c\nindex faa18f3..6ba5454 100644\n--- a/test/hdr_dbl_histogram_test.c\n+++ b/test/hdr_dbl_histogram_test.c\n@@ -69,8 +69,8 @@\n \n static struct mu_result all_tests()\n {\n-    //mu_run_test(test_construct_argument_ranges);\n-    //mu_run_test(test_construction_argument_gets);\n+    mu_run_test(test_construct_argument_ranges);\n+    mu_run_test(test_construction_argument_gets);\n \n     mu_ok;\n }\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Returning an address value in a function with integer (int/long/etc) return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit address down to 32-bit integer. The safe way is to always return an integer.",
    "cwe": "758",
    "hashId": "a1848e63794ca588c5a00fabd87d6bbec2824bff76617eaac65e8a873ba2f566",
    "toolName": "cppcheck",
    "warningMessage": "Returning an address value in a function with integer return type is not portable.",
    "warningSeverity": "portability",
    "warningType": "CastAddressToIntegerAtReturn",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_dbl_histogram_test.c",
    "lineNumber": "41",
    "columnNumber": "5",
    "commitId": "3ca7629b51cd0f24b7cd900cf5692c3185202997",
    "commitChildId": "38773c8de4109fa9c2036b8ca703bd7ed2617bb8",
    "commitTitle": "[C] Add atomic histogram.  Clean up warnings.  Materialise imports on headers.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/38773c8de4109fa9c2036b8ca703bd7ed2617bb8",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/3ca7629b51cd0f24b7cd900cf5692c3185202997/src/test/c/hdr_dbl_histogram_test.c#L41",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_test.c b/src/test/c/hdr_histogram_test.c\nindex 6cfccb6..edb7cfc 100644\n--- a/src/test/c/hdr_histogram_test.c\n+++ b/src/test/c/hdr_histogram_test.c\n@@ -484,23 +484,5 @@\n \n     printf(\"Tests run: %d\\n\", tests_run);\n \n-    return result.message;\n-}\n-\n-// int main(int argc, char **argv)\n-// {\n-//     struct mu_result result \u003d all_tests();\n-\n-//     if (result.message !\u003d 0)\n-//     {\n-//         printf(\"%s(): %s\\n\", result.test, result.message);\n-//     }\n-//     else\n-//     {\n-//         printf(\"ALL TESTS PASSED\\n\");\n-//     }\n-\n-//     printf(\"Tests run: %d\\n\", tests_run);\n-\n-//     return result.message !\u003d 0;\n-// }\n+    return (int) result.message;\n+}\n\\ No newline at end of file\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Returning an address value in a function with integer (int/long/etc) return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit address down to 32-bit integer. The safe way is to always return an integer.",
    "cwe": "758",
    "hashId": "5bc6ee08d1710ac540473152c271f3af78e9d6f6d3a9dc1b5e596c9f75f2409b",
    "toolName": "cppcheck",
    "warningMessage": "Returning an address value in a function with integer return type is not portable.",
    "warningSeverity": "portability",
    "warningType": "CastAddressToIntegerAtReturn",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_test.c",
    "lineNumber": "487",
    "columnNumber": "5",
    "commitId": "3ca7629b51cd0f24b7cd900cf5692c3185202997",
    "commitChildId": "38773c8de4109fa9c2036b8ca703bd7ed2617bb8",
    "commitTitle": "[C] Add atomic histogram.  Clean up warnings.  Materialise imports on headers.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/38773c8de4109fa9c2036b8ca703bd7ed2617bb8",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/3ca7629b51cd0f24b7cd900cf5692c3185202997/src/test/c/hdr_histogram_test.c#L487",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_test.c b/src/test/c/hdr_histogram_test.c\nindex 6cfccb6..edb7cfc 100644\n--- a/src/test/c/hdr_histogram_test.c\n+++ b/src/test/c/hdr_histogram_test.c\n@@ -484,23 +484,5 @@\n \n     printf(\"Tests run: %d\\n\", tests_run);\n \n-    return result.message;\n-}\n-\n-// int main(int argc, char **argv)\n-// {\n-//     struct mu_result result \u003d all_tests();\n-\n-//     if (result.message !\u003d 0)\n-//     {\n-//         printf(\"%s(): %s\\n\", result.test, result.message);\n-//     }\n-//     else\n-//     {\n-//         printf(\"ALL TESTS PASSED\\n\");\n-//     }\n-\n-//     printf(\"Tests run: %d\\n\", tests_run);\n-\n-//     return result.message !\u003d 0;\n-// }\n+    return (int) result.message;\n+}\n\\ No newline at end of file\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Returning an address value in a function with integer (int/long/etc) return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit address down to 32-bit integer. The safe way is to always return an integer.",
    "cwe": "758",
    "hashId": "64d921b2f85fd0c768c6cc353d34d76277d1389a17019fa9a803756f3ff86c9f",
    "toolName": "cppcheck",
    "warningMessage": "Returning an address value in a function with integer return type is not portable.",
    "warningSeverity": "portability",
    "warningType": "CastAddressToIntegerAtReturn",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_log_test.c",
    "lineNumber": "594",
    "columnNumber": "5",
    "commitId": "3ca7629b51cd0f24b7cd900cf5692c3185202997",
    "commitChildId": "38773c8de4109fa9c2036b8ca703bd7ed2617bb8",
    "commitTitle": "[C] Add atomic histogram.  Clean up warnings.  Materialise imports on headers.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/38773c8de4109fa9c2036b8ca703bd7ed2617bb8",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/3ca7629b51cd0f24b7cd900cf5692c3185202997/src/test/c/hdr_histogram_log_test.c#L594",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_test.c b/src/test/c/hdr_histogram_test.c\nindex 6cfccb6..edb7cfc 100644\n--- a/src/test/c/hdr_histogram_test.c\n+++ b/src/test/c/hdr_histogram_test.c\n@@ -484,23 +484,5 @@\n \n     printf(\"Tests run: %d\\n\", tests_run);\n \n-    return result.message;\n-}\n-\n-// int main(int argc, char **argv)\n-// {\n-//     struct mu_result result \u003d all_tests();\n-\n-//     if (result.message !\u003d 0)\n-//     {\n-//         printf(\"%s(): %s\\n\", result.test, result.message);\n-//     }\n-//     else\n-//     {\n-//         printf(\"ALL TESTS PASSED\\n\");\n-//     }\n-\n-//     printf(\"Tests run: %d\\n\", tests_run);\n-\n-//     return result.message !\u003d 0;\n-// }\n+    return (int) result.message;\n+}\n\\ No newline at end of file\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Include file: \u003cx86intrin.h\u003e not found. Please note: Cppcheck does not need standard library headers to get proper results.",
    "hashId": "702f627a1047daaeae5e055b3cbba24325028a459c1bec798a8c4299c8126ba3",
    "toolName": "cppcheck",
    "warningMessage": "Include file: \u003cx86intrin.h\u003e not found. Please note: Cppcheck does not need standard library headers to get proper results.",
    "warningSeverity": "information",
    "warningType": "missingIncludeSystem",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram.c",
    "lineNumber": "10",
    "columnNumber": "0",
    "commitId": "d5f59e5714a9326d97caa6a7c333f77c8c6d7b07",
    "commitChildId": "77523edf627e5cb7ca794c932671df524013ef88",
    "commitTitle": "[C] Small warning fixes, add CTest support.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/77523edf627e5cb7ca794c932671df524013ef88",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/d5f59e5714a9326d97caa6a7c333f77c8c6d7b07/src/main/c/hdr_histogram.c#L10",
    "gitDiffText": "diff --git a/src/test/c/main_test.c b/src/test/c/main_test.c\nindex ff7256d..d0519b8 100644\n--- a/src/test/c/main_test.c\n+++ b/src/test/c/main_test.c\n@@ -10,7 +10,10 @@\n \n int main(int argc, char **argv)\n {\n-    hdr_histogram_run_tests();\n-    hdr_histogram_log_run_tests();\n-    hdr_dbl_histogram_run_tests();\n+    int result \u003d 0;\n+    result +\u003d hdr_histogram_run_tests();\n+    result +\u003d hdr_histogram_log_run_tests();\n+    result +\u003d hdr_dbl_histogram_run_tests();\n+\n+    return result;\n }\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Include file: \u003csys/stat.h\u003e not found. Please note: Cppcheck does not need standard library headers to get proper results.",
    "hashId": "2da4cf3816a26bae39a68a8b9a07f4b7d2dcace7972f143fe6459c37e33665ef",
    "toolName": "cppcheck",
    "warningMessage": "Include file: \u003csys/stat.h\u003e not found. Please note: Cppcheck does not need standard library headers to get proper results.",
    "warningSeverity": "information",
    "warningType": "missingIncludeSystem",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "15",
    "columnNumber": "0",
    "commitId": "d5f59e5714a9326d97caa6a7c333f77c8c6d7b07",
    "commitChildId": "77523edf627e5cb7ca794c932671df524013ef88",
    "commitTitle": "[C] Small warning fixes, add CTest support.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/77523edf627e5cb7ca794c932671df524013ef88",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/d5f59e5714a9326d97caa6a7c333f77c8c6d7b07/src/main/c/hdr_histogram_log.c#L15",
    "gitDiffText": "diff --git a/src/test/c/main_test.c b/src/test/c/main_test.c\nindex ff7256d..d0519b8 100644\n--- a/src/test/c/main_test.c\n+++ b/src/test/c/main_test.c\n@@ -10,7 +10,10 @@\n \n int main(int argc, char **argv)\n {\n-    hdr_histogram_run_tests();\n-    hdr_histogram_log_run_tests();\n-    hdr_dbl_histogram_run_tests();\n+    int result \u003d 0;\n+    result +\u003d hdr_histogram_run_tests();\n+    result +\u003d hdr_histogram_log_run_tests();\n+    result +\u003d hdr_dbl_histogram_run_tests();\n+\n+    return result;\n }\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Include file: \u003cendian.h\u003e not found. Please note: Cppcheck does not need standard library headers to get proper results.",
    "hashId": "b21e85b6f3faa5d8f153af0199c4085ed77e163dd59b0e0b9c2ed73b699ad794",
    "toolName": "cppcheck",
    "warningMessage": "Include file: \u003cendian.h\u003e not found. Please note: Cppcheck does not need standard library headers to get proper results.",
    "warningSeverity": "information",
    "warningType": "missingIncludeSystem",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "44",
    "columnNumber": "0",
    "commitId": "d5f59e5714a9326d97caa6a7c333f77c8c6d7b07",
    "commitChildId": "77523edf627e5cb7ca794c932671df524013ef88",
    "commitTitle": "[C] Small warning fixes, add CTest support.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/77523edf627e5cb7ca794c932671df524013ef88",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/d5f59e5714a9326d97caa6a7c333f77c8c6d7b07/src/main/c/hdr_histogram_log.c#L44",
    "gitDiffText": "diff --git a/src/test/c/main_test.c b/src/test/c/main_test.c\nindex ff7256d..d0519b8 100644\n--- a/src/test/c/main_test.c\n+++ b/src/test/c/main_test.c\n@@ -10,7 +10,10 @@\n \n int main(int argc, char **argv)\n {\n-    hdr_histogram_run_tests();\n-    hdr_histogram_log_run_tests();\n-    hdr_dbl_histogram_run_tests();\n+    int result \u003d 0;\n+    result +\u003d hdr_histogram_run_tests();\n+    result +\u003d hdr_histogram_log_run_tests();\n+    result +\u003d hdr_dbl_histogram_run_tests();\n+\n+    return result;\n }\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "%ld in format string (no. 5) requires \u0027long\u0027 but the argument type is \u0027signed long long\u0027.",
    "cwe": "686",
    "hashId": "33dda5f2c1f0a182b56420f5b8a4ff277c0d4a8028ef01397e91b4c33a055566",
    "toolName": "cppcheck",
    "warningMessage": "%ld in format string (no. 5) requires \u0027long\u0027 but the argument type is \u0027signed long long\u0027.",
    "warningSeverity": "warning",
    "warningType": "invalidPrintfArgType_sint",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "767",
    "columnNumber": "9",
    "commitId": "d073caf61e137808b2e6b1d8ad1a0fd9ae85c62b",
    "commitChildId": "0017aa8f889d7bd379a8d3260419cc01dbe86f44",
    "commitTitle": "[C] Fix multiple build errors/warning on Mac OS X",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/0017aa8f889d7bd379a8d3260419cc01dbe86f44",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/d073caf61e137808b2e6b1d8ad1a0fd9ae85c62b/src/main/c/hdr_histogram_log.c#L767",
    "gitDiffText": "diff --git a/src/test/c/CMakeLists.txt b/src/test/c/CMakeLists.txt\nindex f3226fe..715989b 100644\n--- a/src/test/c/CMakeLists.txt\n+++ b/src/test/c/CMakeLists.txt\n@@ -1,9 +1,16 @@\n-\n+INCLUDE(CheckLibraryExists)\n \n add_executable(testing hdr_histogram_test.c hdr_histogram_log_test.c hdr_dbl_histogram_test.c main_test.c)\n-target_link_libraries(testing hdr_histogram m rt z)\n-install(TARGETS testing DESTINATION bin)\n-\n add_executable(perftest hdr_histogram_perf.c)\n-target_link_libraries(perftest hdr_histogram m rt z)\n+\n+target_link_libraries(testing hdr_histogram m z)\n+target_link_libraries(perftest hdr_histogram m z)\n+\n+CHECK_LIBRARY_EXISTS(rt clock_gettime \"\" RT_EXISTS)\n+if (RT_EXISTS)\n+    target_link_libraries(testing rt)\n+    target_link_libraries(perftest rt)\n+endif (RT_EXISTS)\n+\n+install(TARGETS testing DESTINATION bin)\n install(TARGETS perftest DESTINATION bin)\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Resource leak: f",
    "cwe": "775",
    "hashId": "76c98440f63962c0089282939f9b486c36a28f1bb1111c56996d11c2d5aacbca",
    "toolName": "cppcheck",
    "warningMessage": "Resource leak: f",
    "warningSeverity": "error",
    "warningType": "resourceLeak",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\examples\\c\\hdr_decoder.c",
    "lineNumber": "41",
    "columnNumber": "9",
    "commitId": "6e2bef119a6fe4a761f07b92d6bd9779dff25610",
    "commitChildId": "758d93d565fc68a8ee73f4a7dac5d6523e20ccb3",
    "commitTitle": "[C] Update hdr_decoder example to support stdin.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/758d93d565fc68a8ee73f4a7dac5d6523e20ccb3",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/6e2bef119a6fe4a761f07b92d6bd9779dff25610/src/examples/c/hdr_decoder.c#L41",
    "gitDiffText": "diff --git a/src/examples/c/hdr_decoder.c b/src/examples/c/hdr_decoder.c\nindex 811a6d1..fbb5d07 100644\n--- a/src/examples/c/hdr_decoder.c\n+++ b/src/examples/c/hdr_decoder.c\n@@ -18,13 +18,16 @@\n int main(int argc, char** argv)\n {\n     int rc \u003d 0;\n-    if (argc \u003c 2)\n-    {\n-        fprintf(stderr, \"Usage: %s \u003cfilename\u003e\\n\", argv[0]);\n-        return -1;\n-    }\n+    FILE* f;\n \n-    FILE* f \u003d fopen(argv[1], \"r\");\n+    if (argc \u003d\u003d 1)\n+    {\n+        f \u003d stdin;\n+    }\n+    else\n+    {\n+        f \u003d fopen(argv[1], \"r\");\n+    }\n \n     if (!f)\n     {\n@@ -32,8 +35,6 @@\n         return -1;\n     }\n \n-    printf(\"Processing file (%s)\\n\", argv[1]);\n-\n     struct hdr_log_reader reader;\n     if (hdr_log_reader_init(\u0026reader))\n     {\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Include file: \u003chdr_writer_reader_phaser.h\u003e not found. Please note: Cppcheck does not need standard library headers to get proper results.",
    "hashId": "4c1e22f8d9f13360eccc1cf63843a218b07947416469312450e4c0ed41d3247f",
    "toolName": "cppcheck",
    "warningMessage": "Include file: \u003chdr_writer_reader_phaser.h\u003e not found. Please note: Cppcheck does not need standard library headers to get proper results.",
    "warningSeverity": "information",
    "warningType": "missingIncludeSystem",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\examples\\c\\hiccup.c",
    "lineNumber": "18",
    "columnNumber": "0",
    "commitId": "d4ec15de1ab74cb02883d53f45d97367c9ff6ffa",
    "commitChildId": "6cfd04978a0b972dfe8b01e1bb6a799fc5b5e142",
    "commitTitle": "[C] Add hdr_interval_recorder and update hiccup example to use it.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/6cfd04978a0b972dfe8b01e1bb6a799fc5b5e142",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/d4ec15de1ab74cb02883d53f45d97367c9ff6ffa/src/examples/c/hiccup.c#L18",
    "gitDiffText": "diff --git a/src/main/c/hdr_writer_reader_phaser.h b/src/main/c/hdr_writer_reader_phaser.h\nindex 22bc8f3..036856c 100644\n--- a/src/main/c/hdr_writer_reader_phaser.h\n+++ b/src/main/c/hdr_writer_reader_phaser.h\n@@ -4,6 +4,9 @@\n  * as explained at http://creativecommons.org/publicdomain/zero/1.0/\n  */\n \n+#ifndef HDR_WRITER_READER_PHASER_H\n+#define HDR_WRITER_READER_PHASER_H 1\n+\n #include \u003cstdbool.h\u003e\n #include \u003cstdlib.h\u003e\n \n@@ -152,4 +155,6 @@\n         }\n     }\n     while (!caught_up);\n-}\n\\ No newline at end of file\n+}\n+\n+#endif\n\\ No newline at end of file\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "The scope of the variable \u0027h\u0027 can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for \u0027i\u0027 can be reduced:\\012void f(int x)\\012{\\012    int i \u003d 0;\\012    if (x) {\\012        // it\u0027s safe to move \u0027int i \u003d 0;\u0027 here\\012        for (int n \u003d 0; n \u003c 10; ++n) {\\012            // it is possible but not safe to move \u0027int i \u003d 0;\u0027 here\\012            do_something(\u0026i);\\012        }\\012    }\\012}\\012When you see this message it is always safe to reduce the variable scope 1 level.",
    "cwe": "398",
    "hashId": "5609d1619a3ad86062c7056eec088d7f186f280f40811a1306ab54b2c83b1dd2",
    "toolName": "cppcheck",
    "warningMessage": "The scope of the variable \u0027h\u0027 can be reduced.",
    "warningSeverity": "style",
    "warningType": "variableScope",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\examples\\c\\hiccup.c",
    "lineNumber": "44",
    "columnNumber": "27",
    "commitId": "d4ec15de1ab74cb02883d53f45d97367c9ff6ffa",
    "commitChildId": "6cfd04978a0b972dfe8b01e1bb6a799fc5b5e142",
    "commitTitle": "[C] Add hdr_interval_recorder and update hiccup example to use it.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/6cfd04978a0b972dfe8b01e1bb6a799fc5b5e142",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/d4ec15de1ab74cb02883d53f45d97367c9ff6ffa/src/examples/c/hiccup.c#L44",
    "gitDiffText": "diff --git a/src/main/c/hdr_writer_reader_phaser.h b/src/main/c/hdr_writer_reader_phaser.h\nindex 22bc8f3..036856c 100644\n--- a/src/main/c/hdr_writer_reader_phaser.h\n+++ b/src/main/c/hdr_writer_reader_phaser.h\n@@ -4,6 +4,9 @@\n  * as explained at http://creativecommons.org/publicdomain/zero/1.0/\n  */\n \n+#ifndef HDR_WRITER_READER_PHASER_H\n+#define HDR_WRITER_READER_PHASER_H 1\n+\n #include \u003cstdbool.h\u003e\n #include \u003cstdlib.h\u003e\n \n@@ -152,4 +155,6 @@\n         }\n     }\n     while (!caught_up);\n-}\n\\ No newline at end of file\n+}\n+\n+#endif\n\\ No newline at end of file\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027u_a\u0027 can be declared as pointer to const",
    "cwe": "398",
    "info": "Variable \u0027u_a\u0027 can be declared as pointer to const",
    "hashId": "7efd281e0e0e730f8d78e7184beb7dbb0e7f3059ef39e1d04c793dcb7627a8bb",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027u_a\u0027 can be declared as pointer to const",
    "warningSeverity": "style",
    "warningType": "constVariablePointer",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_log_test.c",
    "lineNumber": "96",
    "columnNumber": "14",
    "commitId": "c1332a7209794847a203a8adb69b7e2fee3c7cc3",
    "commitChildId": "ee970ba15ae72dbe52567edb743d96da70a68c18",
    "commitTitle": "[C] Track and restore min/max values on histogram.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/ee970ba15ae72dbe52567edb743d96da70a68c18",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/c1332a7209794847a203a8adb69b7e2fee3c7cc3/src/test/c/hdr_histogram_log_test.c#L96",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_test.c b/src/test/c/hdr_histogram_test.c\nindex 7217935..e461d81 100644\n--- a/src/test/c/hdr_histogram_test.c\n+++ b/src/test/c/hdr_histogram_test.c\n@@ -119,7 +119,7 @@\n \n     mu_assert(\"Failed to allocate hdr_histogram\", r \u003d\u003d 0);\n     mu_assert(\"Failed to allocate hdr_histogram\", h !\u003d NULL);\n-    mu_assert(\"Size is incorrect\", s \u003d\u003d 1704008);\n+    mu_assert(\"Size is incorrect\", s \u003d\u003d 1704024);\n \n     free(h);\n \n@@ -447,10 +447,6 @@\n                     hdr_lowest_equivalent_value(cor_histogram, expected_99th),\n                     hdr_lowest_equivalent_value(scaled_cor_histogram, scaled_99th)));\n \n-    mu_assert(\n-            \"Max should be equivalent\",\n-            compare_int64(hdr_max(cor_histogram) * 512, hdr_max(scaled_cor_histogram)));\n-\n     return 0;\n }\n \n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027u_b\u0027 can be declared as pointer to const",
    "cwe": "398",
    "info": "Variable \u0027u_b\u0027 can be declared as pointer to const",
    "hashId": "74fbdfb12a1f70f7bcaca9f718c71d374a92b88682bde4413f5e78efd49017dc",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027u_b\u0027 can be declared as pointer to const",
    "warningSeverity": "style",
    "warningType": "constVariablePointer",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_log_test.c",
    "lineNumber": "97",
    "columnNumber": "14",
    "commitId": "c1332a7209794847a203a8adb69b7e2fee3c7cc3",
    "commitChildId": "ee970ba15ae72dbe52567edb743d96da70a68c18",
    "commitTitle": "[C] Track and restore min/max values on histogram.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/ee970ba15ae72dbe52567edb743d96da70a68c18",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/c1332a7209794847a203a8adb69b7e2fee3c7cc3/src/test/c/hdr_histogram_log_test.c#L97",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_test.c b/src/test/c/hdr_histogram_test.c\nindex 7217935..e461d81 100644\n--- a/src/test/c/hdr_histogram_test.c\n+++ b/src/test/c/hdr_histogram_test.c\n@@ -119,7 +119,7 @@\n \n     mu_assert(\"Failed to allocate hdr_histogram\", r \u003d\u003d 0);\n     mu_assert(\"Failed to allocate hdr_histogram\", h !\u003d NULL);\n-    mu_assert(\"Size is incorrect\", s \u003d\u003d 1704008);\n+    mu_assert(\"Size is incorrect\", s \u003d\u003d 1704024);\n \n     free(h);\n \n@@ -447,10 +447,6 @@\n                     hdr_lowest_equivalent_value(cor_histogram, expected_99th),\n                     hdr_lowest_equivalent_value(scaled_cor_histogram, scaled_99th)));\n \n-    mu_assert(\n-            \"Max should be equivalent\",\n-            compare_int64(hdr_max(cor_histogram) * 512, hdr_max(scaled_cor_histogram)));\n-\n     return 0;\n }\n \n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "int result is returned as long long value. If the return value is long long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example \u0027return a*b;\u0027 \u003d\u003e \u0027return (long)a*b\u0027.",
    "cwe": "197",
    "hashId": "a609de0564e7480e2c8d592d7f44024903f07662fe090b0a5cfffb7949afba2e",
    "toolName": "cppcheck",
    "warningMessage": "int result is returned as long long value. If the return value is long long to avoid loss of information, then you have loss of information.",
    "warningSeverity": "style",
    "warningType": "truncLongCastReturn",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram.c",
    "lineNumber": "93",
    "columnNumber": "5",
    "commitId": "43382524c82d844f4500c89600edb10559976345",
    "commitChildId": "9abf30a332f54e668192f12869d6b7a4c63d6667",
    "commitTitle": "[C] Fix overflow/conversion errors.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/9abf30a332f54e668192f12869d6b7a4c63d6667",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/43382524c82d844f4500c89600edb10559976345/src/main/c/hdr_histogram.c#L93",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_test.c b/src/test/c/hdr_histogram_test.c\nindex c03bc51..6e272b0 100644\n--- a/src/test/c/hdr_histogram_test.c\n+++ b/src/test/c/hdr_histogram_test.c\n@@ -126,6 +126,35 @@\n     return 0;\n }\n \n+static char* test_create_with_large_values()\n+{\n+    struct hdr_histogram* h \u003d NULL;\n+    int r \u003d hdr_init(20000000, 100000000, 5, \u0026h);\n+    mu_assert(\"Didn\u0027t create\", r \u003d\u003d 0);\n+\n+    hdr_record_value(h, 100000000);\n+    hdr_record_value(h, 20000000);\n+    hdr_record_value(h, 30000000);\n+\n+    mu_assert(\n+        \"50.0% Percentile\",\n+        hdr_values_are_equivalent(h, 20000000, hdr_value_at_percentile(h, 50.0)));\n+\n+    mu_assert(\n+        \"83.33% Percentile\",\n+        hdr_values_are_equivalent(h, 30000000, hdr_value_at_percentile(h, 83.33)));\n+\n+    mu_assert(\n+        \"83.34% Percentile\",\n+        hdr_values_are_equivalent(h, 100000000, hdr_value_at_percentile(h, 83.34)));\n+\n+    mu_assert(\n+        \"99.0% Percentile\",\n+        hdr_values_are_equivalent(h, 100000000, hdr_value_at_percentile(h, 99.0)));\n+\n+    return 0;\n+}\n+\n static char* test_invalid_significant_figures()\n {\n     struct hdr_histogram* h \u003d NULL;\n@@ -418,6 +447,7 @@\n static struct mu_result all_tests()\n {\n     mu_run_test(test_create);\n+    mu_run_test(test_create_with_large_values);\n     mu_run_test(test_invalid_significant_figures);\n     mu_run_test(test_total_count);\n     mu_run_test(test_get_min_value);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027expected_nsec\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "72a77b5e0fe07533c4d757d4a0c9e76083dff1a13e9b218878dde1f6dbc571ea",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027expected_nsec\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_log_test.c",
    "lineNumber": "409",
    "columnNumber": "24",
    "commitId": "f062a81688c0d6a5c64a5e98d71e436d3640c540",
    "commitChildId": "67be4b32d4032b3f801893222e6d4d9284de31c4",
    "commitTitle": "[C] Use more standard C error codes.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/67be4b32d4032b3f801893222e6d4d9284de31c4",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/f062a81688c0d6a5c64a5e98d71e436d3640c540/src/test/c/hdr_histogram_log_test.c#L409",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_test.c b/src/test/c/hdr_histogram_test.c\nindex e92fa4e..c03bc51 100644\n--- a/src/test/c/hdr_histogram_test.c\n+++ b/src/test/c/hdr_histogram_test.c\n@@ -131,11 +131,11 @@\n     struct hdr_histogram* h \u003d NULL;\n \n     int r \u003d hdr_alloc(36000000, -1, \u0026h);\n-    mu_assert(\"Result was not -1\",      r \u003d\u003d -1);\n+    mu_assert(\"Result was not EINVAL\", r \u003d\u003d EINVAL);\n     mu_assert(\"Histogram was not null\", h \u003d\u003d 0);\n \n     r \u003d hdr_alloc(36000000, 6, \u0026h);\n-    mu_assert(\"Result was not -1\",      r \u003d\u003d -1);\n+    mu_assert(\"Result was not EINVAL\", r \u003d\u003d EINVAL);\n     mu_assert(\"Histogram was not null\", h \u003d\u003d 0);\n \n     return 0;\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Found an exit path from function with non-void return type that has missing return statement",
    "cwe": "758",
    "hashId": "69c2afddc18b2a79d7e887871102d12936c0341c868013093c48d9da36a07011",
    "toolName": "cppcheck",
    "warningMessage": "Found an exit path from function with non-void return type that has missing return statement",
    "warningSeverity": "error",
    "warningType": "missingReturn",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_log_test.c",
    "lineNumber": "49",
    "columnNumber": "5",
    "commitId": "16dc8dc1b5f5767a05eb03bb944ffd4c60c085fa",
    "commitChildId": "5cc579f8cb55e397374f9ed79936f3009c9c324d",
    "commitTitle": "[C] Implemented log file reader.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/5cc579f8cb55e397374f9ed79936f3009c9c324d",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/16dc8dc1b5f5767a05eb03bb944ffd4c60c085fa/src/test/c/hdr_histogram_log_test.c#L49",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex be86f4f..d677c91 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -52,6 +52,7 @@\n     char b_str[128];\n \n     printf(\"%s !\u003d %s\\n\", ctime_r(\u0026a, a_str), ctime_r(\u0026b, b_str));\n+    return false;\n }\n \n static bool compare_string(const char* a, const char* b, int len)\n@@ -381,8 +382,8 @@\n \n     log_file \u003d fopen(file_name, \"r\");\n \n-    struct hdr_histogram* read_cor_histogram;\n-    struct hdr_histogram* read_raw_histogram;\n+    struct hdr_histogram* read_cor_histogram \u003d NULL;\n+    struct hdr_histogram* read_raw_histogram \u003d NULL;\n     long expected_nsec \u003d (timestamp.tv_nsec / 1000000) * 1000000;\n \n     rc \u003d hdr_log_read_header(\u0026reader, log_file);\n@@ -407,6 +408,9 @@\n         \"Histograms do not match\",\n         compare_histogram(raw_histogram, read_raw_histogram));\n \n+    fclose(log_file);\n+    remove(file_name);\n+\n     return 0;\n }\n \n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "%d in format string (no. 1) requires \u0027int *\u0027 but the argument type is \u0027signed long long *\u0027.",
    "cwe": "686",
    "hashId": "b88cde2610293871c3ea4f9a9aa3048023a3e3acd95b07a18eecb9da9eaef14b",
    "toolName": "cppcheck",
    "warningMessage": "%d in format string (no. 1) requires \u0027int *\u0027 but the argument type is \u0027signed long long *\u0027.",
    "warningSeverity": "warning",
    "warningType": "invalidScanfArgType_int",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "599",
    "columnNumber": "9",
    "commitId": "16af898975cf2d951bb21adbdb0718d888ce498b",
    "commitChildId": "16dc8dc1b5f5767a05eb03bb944ffd4c60c085fa",
    "commitTitle": "[C] Implemented reading log header.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/16dc8dc1b5f5767a05eb03bb944ffd4c60c085fa",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/16af898975cf2d951bb21adbdb0718d888ce498b/src/main/c/hdr_histogram_log.c#L599",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 54209d0..be86f4f 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -19,6 +19,41 @@\n #include \u003chdr_histogram_log.h\u003e\n #include \"minunit.h\"\n \n+static bool compare_int(int a, int b)\n+{\n+    if (a \u003d\u003d b)\n+    {\n+        return true;\n+    }\n+\n+    printf(\"%d !\u003d %d\\n\", a, b);\n+    return false;\n+}\n+\n+static bool compare_long(long a, long b)\n+{\n+    if (a \u003d\u003d b)\n+    {\n+        return true;\n+    }\n+\n+    printf(\"%ld !\u003d %ld\\n\", a, b);\n+    return false;\n+}\n+\n+static time_t compare_time_t(time_t a, time_t b)\n+{\n+    if (a \u003d\u003d b)\n+    {\n+        return true;\n+    }\n+\n+    char a_str[128];\n+    char b_str[128];\n+\n+    printf(\"%s !\u003d %s\\n\", ctime_r(\u0026a, a_str), ctime_r(\u0026b, b_str));\n+}\n+\n static bool compare_string(const char* a, const char* b, int len)\n {\n     if (strncmp(a, b, len) \u003d\u003d 0)\n@@ -316,18 +351,6 @@\n     return 0;\n }\n \n-static char* test_parse_log()\n-{\n-    // const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n-    const char* file_name \u003d \"histogram.log\";\n-    struct hdr_histogram* h;\n-    FILE* log_file \u003d fopen(file_name, \"r\");\n-\n-    hdr_parse_log(log_file, \u0026h);\n-\n-    return 0;\n-}\n-\n static char* writes_and_reads_log()\n {\n     const char* file_name \u003d \"histogram.log\";\n@@ -353,11 +376,24 @@\n     hdr_log_write(\u0026writer, log_file, \u0026timestamp, \u0026interval, raw_histogram);\n     mu_assert(\"Failed raw write\", validate_return_code(rc));\n \n+    fflush(log_file);\n+    fclose(log_file);\n+\n+    log_file \u003d fopen(file_name, \"r\");\n+\n     struct hdr_histogram* read_cor_histogram;\n     struct hdr_histogram* read_raw_histogram;\n+    long expected_nsec \u003d (timestamp.tv_nsec / 1000000) * 1000000;\n \n     rc \u003d hdr_log_read_header(\u0026reader, log_file);\n     mu_assert(\"Failed header read\", validate_return_code(rc));\n+    mu_assert(\"Incorrect major version\", compare_int(reader.major_version, 1));\n+    mu_assert(\"Incorrect minor version\", compare_int(reader.minor_version, 1));\n+    mu_assert(\"Incorrect timestamp (sec)\",\n+        compare_time_t(reader.start_timestamp.tv_sec, timestamp.tv_sec));\n+    mu_assert(\"Incorrect timestamp (nsec)\",\n+        compare_long(reader.start_timestamp.tv_nsec, expected_nsec));\n+\n     rc \u003d hdr_log_read(\u0026reader, log_file, \u0026read_cor_histogram);\n     mu_assert(\"Failed corrected read\", validate_return_code(rc));\n     rc \u003d hdr_log_read(\u0026reader, log_file, \u0026read_raw_histogram);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "%d in format string (no. 2) requires \u0027int *\u0027 but the argument type is \u0027signed long long *\u0027.",
    "cwe": "686",
    "hashId": "f950b48c984553ba74e700c4f07656296ecfe8fabf151b527c16ce09e884eccc",
    "toolName": "cppcheck",
    "warningMessage": "%d in format string (no. 2) requires \u0027int *\u0027 but the argument type is \u0027signed long long *\u0027.",
    "warningSeverity": "warning",
    "warningType": "invalidScanfArgType_int",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "599",
    "columnNumber": "9",
    "commitId": "16af898975cf2d951bb21adbdb0718d888ce498b",
    "commitChildId": "16dc8dc1b5f5767a05eb03bb944ffd4c60c085fa",
    "commitTitle": "[C] Implemented reading log header.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/16dc8dc1b5f5767a05eb03bb944ffd4c60c085fa",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/16af898975cf2d951bb21adbdb0718d888ce498b/src/main/c/hdr_histogram_log.c#L599",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 54209d0..be86f4f 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -19,6 +19,41 @@\n #include \u003chdr_histogram_log.h\u003e\n #include \"minunit.h\"\n \n+static bool compare_int(int a, int b)\n+{\n+    if (a \u003d\u003d b)\n+    {\n+        return true;\n+    }\n+\n+    printf(\"%d !\u003d %d\\n\", a, b);\n+    return false;\n+}\n+\n+static bool compare_long(long a, long b)\n+{\n+    if (a \u003d\u003d b)\n+    {\n+        return true;\n+    }\n+\n+    printf(\"%ld !\u003d %ld\\n\", a, b);\n+    return false;\n+}\n+\n+static time_t compare_time_t(time_t a, time_t b)\n+{\n+    if (a \u003d\u003d b)\n+    {\n+        return true;\n+    }\n+\n+    char a_str[128];\n+    char b_str[128];\n+\n+    printf(\"%s !\u003d %s\\n\", ctime_r(\u0026a, a_str), ctime_r(\u0026b, b_str));\n+}\n+\n static bool compare_string(const char* a, const char* b, int len)\n {\n     if (strncmp(a, b, len) \u003d\u003d 0)\n@@ -316,18 +351,6 @@\n     return 0;\n }\n \n-static char* test_parse_log()\n-{\n-    // const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n-    const char* file_name \u003d \"histogram.log\";\n-    struct hdr_histogram* h;\n-    FILE* log_file \u003d fopen(file_name, \"r\");\n-\n-    hdr_parse_log(log_file, \u0026h);\n-\n-    return 0;\n-}\n-\n static char* writes_and_reads_log()\n {\n     const char* file_name \u003d \"histogram.log\";\n@@ -353,11 +376,24 @@\n     hdr_log_write(\u0026writer, log_file, \u0026timestamp, \u0026interval, raw_histogram);\n     mu_assert(\"Failed raw write\", validate_return_code(rc));\n \n+    fflush(log_file);\n+    fclose(log_file);\n+\n+    log_file \u003d fopen(file_name, \"r\");\n+\n     struct hdr_histogram* read_cor_histogram;\n     struct hdr_histogram* read_raw_histogram;\n+    long expected_nsec \u003d (timestamp.tv_nsec / 1000000) * 1000000;\n \n     rc \u003d hdr_log_read_header(\u0026reader, log_file);\n     mu_assert(\"Failed header read\", validate_return_code(rc));\n+    mu_assert(\"Incorrect major version\", compare_int(reader.major_version, 1));\n+    mu_assert(\"Incorrect minor version\", compare_int(reader.minor_version, 1));\n+    mu_assert(\"Incorrect timestamp (sec)\",\n+        compare_time_t(reader.start_timestamp.tv_sec, timestamp.tv_sec));\n+    mu_assert(\"Incorrect timestamp (nsec)\",\n+        compare_long(reader.start_timestamp.tv_nsec, expected_nsec));\n+\n     rc \u003d hdr_log_read(\u0026reader, log_file, \u0026read_cor_histogram);\n     mu_assert(\"Failed corrected read\", validate_return_code(rc));\n     rc \u003d hdr_log_read(\u0026reader, log_file, \u0026read_raw_histogram);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027line\u0027 can be declared as pointer to const",
    "cwe": "398",
    "info": "Variable \u0027line\u0027 can be declared as pointer to const",
    "hashId": "eec2b69a17cbde37005a64d0951caf9899529794c903f94af8b3f52b874df719",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027line\u0027 can be declared as pointer to const",
    "warningSeverity": "style",
    "warningType": "constVariablePointer",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "615",
    "columnNumber": "15",
    "commitId": "16af898975cf2d951bb21adbdb0718d888ce498b",
    "commitChildId": "16dc8dc1b5f5767a05eb03bb944ffd4c60c085fa",
    "commitTitle": "[C] Implemented reading log header.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/16dc8dc1b5f5767a05eb03bb944ffd4c60c085fa",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/16af898975cf2d951bb21adbdb0718d888ce498b/src/main/c/hdr_histogram_log.c#L615",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 54209d0..be86f4f 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -19,6 +19,41 @@\n #include \u003chdr_histogram_log.h\u003e\n #include \"minunit.h\"\n \n+static bool compare_int(int a, int b)\n+{\n+    if (a \u003d\u003d b)\n+    {\n+        return true;\n+    }\n+\n+    printf(\"%d !\u003d %d\\n\", a, b);\n+    return false;\n+}\n+\n+static bool compare_long(long a, long b)\n+{\n+    if (a \u003d\u003d b)\n+    {\n+        return true;\n+    }\n+\n+    printf(\"%ld !\u003d %ld\\n\", a, b);\n+    return false;\n+}\n+\n+static time_t compare_time_t(time_t a, time_t b)\n+{\n+    if (a \u003d\u003d b)\n+    {\n+        return true;\n+    }\n+\n+    char a_str[128];\n+    char b_str[128];\n+\n+    printf(\"%s !\u003d %s\\n\", ctime_r(\u0026a, a_str), ctime_r(\u0026b, b_str));\n+}\n+\n static bool compare_string(const char* a, const char* b, int len)\n {\n     if (strncmp(a, b, len) \u003d\u003d 0)\n@@ -316,18 +351,6 @@\n     return 0;\n }\n \n-static char* test_parse_log()\n-{\n-    // const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n-    const char* file_name \u003d \"histogram.log\";\n-    struct hdr_histogram* h;\n-    FILE* log_file \u003d fopen(file_name, \"r\");\n-\n-    hdr_parse_log(log_file, \u0026h);\n-\n-    return 0;\n-}\n-\n static char* writes_and_reads_log()\n {\n     const char* file_name \u003d \"histogram.log\";\n@@ -353,11 +376,24 @@\n     hdr_log_write(\u0026writer, log_file, \u0026timestamp, \u0026interval, raw_histogram);\n     mu_assert(\"Failed raw write\", validate_return_code(rc));\n \n+    fflush(log_file);\n+    fclose(log_file);\n+\n+    log_file \u003d fopen(file_name, \"r\");\n+\n     struct hdr_histogram* read_cor_histogram;\n     struct hdr_histogram* read_raw_histogram;\n+    long expected_nsec \u003d (timestamp.tv_nsec / 1000000) * 1000000;\n \n     rc \u003d hdr_log_read_header(\u0026reader, log_file);\n     mu_assert(\"Failed header read\", validate_return_code(rc));\n+    mu_assert(\"Incorrect major version\", compare_int(reader.major_version, 1));\n+    mu_assert(\"Incorrect minor version\", compare_int(reader.minor_version, 1));\n+    mu_assert(\"Incorrect timestamp (sec)\",\n+        compare_time_t(reader.start_timestamp.tv_sec, timestamp.tv_sec));\n+    mu_assert(\"Incorrect timestamp (nsec)\",\n+        compare_long(reader.start_timestamp.tv_nsec, expected_nsec));\n+\n     rc \u003d hdr_log_read(\u0026reader, log_file, \u0026read_cor_histogram);\n     mu_assert(\"Failed corrected read\", validate_return_code(rc));\n     rc \u003d hdr_log_read(\u0026reader, log_file, \u0026read_raw_histogram);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "The scope of the variable \u0027available_counts\u0027 can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for \u0027i\u0027 can be reduced:\\012void f(int x)\\012{\\012    int i \u003d 0;\\012    if (x) {\\012        // it\u0027s safe to move \u0027int i \u003d 0;\u0027 here\\012        for (int n \u003d 0; n \u003c 10; ++n) {\\012            // it is possible but not safe to move \u0027int i \u003d 0;\u0027 here\\012            do_something(\u0026i);\\012        }\\012    }\\012}\\012When you see this message it is always safe to reduce the variable scope 1 level.",
    "cwe": "398",
    "hashId": "0e72b2022bfff48fb1badd789950ca4f4438293e662eb71f77739c7da6ce565d",
    "toolName": "cppcheck",
    "warningMessage": "The scope of the variable \u0027available_counts\u0027 can be reduced.",
    "warningSeverity": "style",
    "warningType": "variableScope",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "553",
    "columnNumber": "9",
    "commitId": "15dfecb5894a25f302e49f3e1e5bad342e950c40",
    "commitChildId": "da475e1df362738df84ed6073427d77af9883bca",
    "commitTitle": "[C] Use macro to clean up error handling code.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/da475e1df362738df84ed6073427d77af9883bca",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/15dfecb5894a25f302e49f3e1e5bad342e950c40/src/main/c/hdr_histogram_log.c#L553",
    "gitDiffText": "diff --git a/src/main/c/hdr_histogram_log.c b/src/main/c/hdr_histogram_log.c\nindex 19a506f..e86d374 100644\n--- a/src/main/c/hdr_histogram_log.c\n+++ b/src/main/c/hdr_histogram_log.c\n@@ -386,8 +386,7 @@\n \n     if ((buf \u003d (uint8_t*) malloc(len * sizeof(uint8_t))) \u003d\u003d NULL)\n     {\n-        result \u003d ENOMEM;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, ENOMEM);\n     }\n \n     if (deflateInit(\u0026strm, 4) !\u003d Z_OK)\n@@ -415,8 +414,7 @@\n \n     if (deflate(\u0026strm, Z_NO_FLUSH) !\u003d Z_OK)\n     {\n-        result \u003d HDR_DEFLATE_FAIL;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_DEFLATE_FAIL);\n     }\n \n     do\n@@ -428,8 +426,7 @@\n             uint8_t* new_buf \u003d (uint8_t*) realloc(buf, new_len * sizeof(uint8_t));\n             if (NULL \u003d\u003d new_buf)\n             {\n-                result \u003d ENOMEM;\n-                goto cleanup;\n+                FAIL_AND_CLEANUP(cleanup, result, ENOMEM);\n             }\n \n             buf \u003d new_buf;\n@@ -437,10 +434,10 @@\n             strm.avail_out \u003d len;\n             len \u003d new_len;\n \n+            // Flush the zlib stream.  Breaks with this.\n             if (deflate(\u0026strm, Z_SYNC_FLUSH) !\u003d Z_OK)\n             {\n-                result \u003d HDR_DEFLATE_FAIL;\n-                goto cleanup;\n+                FAIL_AND_CLEANUP(cleanup, result, HDR_DEFLATE_FAIL);\n             }\n         }\n \n@@ -457,8 +454,7 @@\n         r \u003d deflate(\u0026strm, flush);\n         if (r !\u003d Z_OK \u0026\u0026 r !\u003d Z_STREAM_END)\n         {\n-            result \u003d HDR_DEFLATE_FAIL;\n-            goto cleanup;\n+            FAIL_AND_CLEANUP(cleanup, result, HDR_DEFLATE_FAIL);\n         }\n     }\n     while (r !\u003d Z_STREAM_END);\n@@ -493,8 +489,7 @@\n \n     if (length \u003c sizeof(struct _compression_flyweight) || *histogram !\u003d NULL)\n     {\n-        result \u003d EINVAL;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, EINVAL);\n     }\n \n     struct _compression_flyweight* compression_flyweight \u003d (struct _compression_flyweight*) buffer;\n@@ -502,8 +497,7 @@\n \n     if (COMPRESSION_COOKIE !\u003d be32toh(compression_flyweight-\u003ecookie))\n     {\n-        result \u003d HDR_COMPRESSION_COOKIE_MISMATCH;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_COMPRESSION_COOKIE_MISMATCH);\n     }\n \n     int32_t compressed_length \u003d be32toh(compression_flyweight-\u003elength);\n@@ -512,8 +506,7 @@\n \n     if (inflateInit(\u0026strm) !\u003d Z_OK)\n     {\n-        result \u003d HDR_INFLATE_INIT_FAIL;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_INFLATE_FAIL);\n     }\n \n     strm.next_in \u003d compression_flyweight-\u003edata;\n@@ -523,14 +516,12 @@\n \n     if (inflate(\u0026strm, Z_SYNC_FLUSH) !\u003d Z_OK)\n     {\n-        result \u003d HDR_INFLATE_FAIL;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_INFLATE_FAIL);\n     }\n \n     if (ENCODING_COOKIE !\u003d be32toh(encoding_flyweight.cookie))\n     {\n-        result \u003d HDR_ENCODING_COOKIE_MISMATCH;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_ENCODING_COOKIE_MISMATCH);\n     }\n \n     int64_t lowest_trackable_value \u003d be64toh(encoding_flyweight.lowest_trackable_value);\n@@ -543,8 +534,7 @@\n         significant_figures,\n         \u0026h) !\u003d 0)\n     {\n-        result \u003d ENOMEM;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, ENOMEM);\n     }\n \n     h-\u003etotal_count \u003d be64toh(encoding_flyweight.total_count);\n@@ -561,8 +551,7 @@\n \n         if (Z_STREAM_END !\u003d r \u0026\u0026 Z_OK !\u003d r)\n         {\n-            result \u003d HDR_INFLATE_FAIL;\n-            break;\n+            FAIL_AND_CLEANUP(cleanup, result, HDR_INFLATE_FAIL);\n         }\n \n         available_counts \u003d counts_per_chunk - (strm.avail_out / sizeof(int64_t));\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027available_counts\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "77d7fac0651fd6cead8c4cc0435af0115ad76fe91e9fb7cadadd1922cf43f41f",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027available_counts\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "553",
    "columnNumber": "26",
    "commitId": "15dfecb5894a25f302e49f3e1e5bad342e950c40",
    "commitChildId": "da475e1df362738df84ed6073427d77af9883bca",
    "commitTitle": "[C] Use macro to clean up error handling code.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/da475e1df362738df84ed6073427d77af9883bca",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/15dfecb5894a25f302e49f3e1e5bad342e950c40/src/main/c/hdr_histogram_log.c#L553",
    "gitDiffText": "diff --git a/src/main/c/hdr_histogram_log.c b/src/main/c/hdr_histogram_log.c\nindex 19a506f..e86d374 100644\n--- a/src/main/c/hdr_histogram_log.c\n+++ b/src/main/c/hdr_histogram_log.c\n@@ -386,8 +386,7 @@\n \n     if ((buf \u003d (uint8_t*) malloc(len * sizeof(uint8_t))) \u003d\u003d NULL)\n     {\n-        result \u003d ENOMEM;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, ENOMEM);\n     }\n \n     if (deflateInit(\u0026strm, 4) !\u003d Z_OK)\n@@ -415,8 +414,7 @@\n \n     if (deflate(\u0026strm, Z_NO_FLUSH) !\u003d Z_OK)\n     {\n-        result \u003d HDR_DEFLATE_FAIL;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_DEFLATE_FAIL);\n     }\n \n     do\n@@ -428,8 +426,7 @@\n             uint8_t* new_buf \u003d (uint8_t*) realloc(buf, new_len * sizeof(uint8_t));\n             if (NULL \u003d\u003d new_buf)\n             {\n-                result \u003d ENOMEM;\n-                goto cleanup;\n+                FAIL_AND_CLEANUP(cleanup, result, ENOMEM);\n             }\n \n             buf \u003d new_buf;\n@@ -437,10 +434,10 @@\n             strm.avail_out \u003d len;\n             len \u003d new_len;\n \n+            // Flush the zlib stream.  Breaks with this.\n             if (deflate(\u0026strm, Z_SYNC_FLUSH) !\u003d Z_OK)\n             {\n-                result \u003d HDR_DEFLATE_FAIL;\n-                goto cleanup;\n+                FAIL_AND_CLEANUP(cleanup, result, HDR_DEFLATE_FAIL);\n             }\n         }\n \n@@ -457,8 +454,7 @@\n         r \u003d deflate(\u0026strm, flush);\n         if (r !\u003d Z_OK \u0026\u0026 r !\u003d Z_STREAM_END)\n         {\n-            result \u003d HDR_DEFLATE_FAIL;\n-            goto cleanup;\n+            FAIL_AND_CLEANUP(cleanup, result, HDR_DEFLATE_FAIL);\n         }\n     }\n     while (r !\u003d Z_STREAM_END);\n@@ -493,8 +489,7 @@\n \n     if (length \u003c sizeof(struct _compression_flyweight) || *histogram !\u003d NULL)\n     {\n-        result \u003d EINVAL;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, EINVAL);\n     }\n \n     struct _compression_flyweight* compression_flyweight \u003d (struct _compression_flyweight*) buffer;\n@@ -502,8 +497,7 @@\n \n     if (COMPRESSION_COOKIE !\u003d be32toh(compression_flyweight-\u003ecookie))\n     {\n-        result \u003d HDR_COMPRESSION_COOKIE_MISMATCH;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_COMPRESSION_COOKIE_MISMATCH);\n     }\n \n     int32_t compressed_length \u003d be32toh(compression_flyweight-\u003elength);\n@@ -512,8 +506,7 @@\n \n     if (inflateInit(\u0026strm) !\u003d Z_OK)\n     {\n-        result \u003d HDR_INFLATE_INIT_FAIL;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_INFLATE_FAIL);\n     }\n \n     strm.next_in \u003d compression_flyweight-\u003edata;\n@@ -523,14 +516,12 @@\n \n     if (inflate(\u0026strm, Z_SYNC_FLUSH) !\u003d Z_OK)\n     {\n-        result \u003d HDR_INFLATE_FAIL;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_INFLATE_FAIL);\n     }\n \n     if (ENCODING_COOKIE !\u003d be32toh(encoding_flyweight.cookie))\n     {\n-        result \u003d HDR_ENCODING_COOKIE_MISMATCH;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_ENCODING_COOKIE_MISMATCH);\n     }\n \n     int64_t lowest_trackable_value \u003d be64toh(encoding_flyweight.lowest_trackable_value);\n@@ -543,8 +534,7 @@\n         significant_figures,\n         \u0026h) !\u003d 0)\n     {\n-        result \u003d ENOMEM;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, ENOMEM);\n     }\n \n     h-\u003etotal_count \u003d be64toh(encoding_flyweight.total_count);\n@@ -561,8 +551,7 @@\n \n         if (Z_STREAM_END !\u003d r \u0026\u0026 Z_OK !\u003d r)\n         {\n-            result \u003d HDR_INFLATE_FAIL;\n-            break;\n+            FAIL_AND_CLEANUP(cleanup, result, HDR_INFLATE_FAIL);\n         }\n \n         available_counts \u003d counts_per_chunk - (strm.avail_out / sizeof(int64_t));\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027counts_tally\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "a8c34c6d171580c582196751705a1a61a76b192309bc95f09dcd42bce0244e4c",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027counts_tally\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "572",
    "columnNumber": "26",
    "commitId": "15dfecb5894a25f302e49f3e1e5bad342e950c40",
    "commitChildId": "da475e1df362738df84ed6073427d77af9883bca",
    "commitTitle": "[C] Use macro to clean up error handling code.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/da475e1df362738df84ed6073427d77af9883bca",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/15dfecb5894a25f302e49f3e1e5bad342e950c40/src/main/c/hdr_histogram_log.c#L572",
    "gitDiffText": "diff --git a/src/main/c/hdr_histogram_log.c b/src/main/c/hdr_histogram_log.c\nindex 19a506f..e86d374 100644\n--- a/src/main/c/hdr_histogram_log.c\n+++ b/src/main/c/hdr_histogram_log.c\n@@ -386,8 +386,7 @@\n \n     if ((buf \u003d (uint8_t*) malloc(len * sizeof(uint8_t))) \u003d\u003d NULL)\n     {\n-        result \u003d ENOMEM;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, ENOMEM);\n     }\n \n     if (deflateInit(\u0026strm, 4) !\u003d Z_OK)\n@@ -415,8 +414,7 @@\n \n     if (deflate(\u0026strm, Z_NO_FLUSH) !\u003d Z_OK)\n     {\n-        result \u003d HDR_DEFLATE_FAIL;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_DEFLATE_FAIL);\n     }\n \n     do\n@@ -428,8 +426,7 @@\n             uint8_t* new_buf \u003d (uint8_t*) realloc(buf, new_len * sizeof(uint8_t));\n             if (NULL \u003d\u003d new_buf)\n             {\n-                result \u003d ENOMEM;\n-                goto cleanup;\n+                FAIL_AND_CLEANUP(cleanup, result, ENOMEM);\n             }\n \n             buf \u003d new_buf;\n@@ -437,10 +434,10 @@\n             strm.avail_out \u003d len;\n             len \u003d new_len;\n \n+            // Flush the zlib stream.  Breaks with this.\n             if (deflate(\u0026strm, Z_SYNC_FLUSH) !\u003d Z_OK)\n             {\n-                result \u003d HDR_DEFLATE_FAIL;\n-                goto cleanup;\n+                FAIL_AND_CLEANUP(cleanup, result, HDR_DEFLATE_FAIL);\n             }\n         }\n \n@@ -457,8 +454,7 @@\n         r \u003d deflate(\u0026strm, flush);\n         if (r !\u003d Z_OK \u0026\u0026 r !\u003d Z_STREAM_END)\n         {\n-            result \u003d HDR_DEFLATE_FAIL;\n-            goto cleanup;\n+            FAIL_AND_CLEANUP(cleanup, result, HDR_DEFLATE_FAIL);\n         }\n     }\n     while (r !\u003d Z_STREAM_END);\n@@ -493,8 +489,7 @@\n \n     if (length \u003c sizeof(struct _compression_flyweight) || *histogram !\u003d NULL)\n     {\n-        result \u003d EINVAL;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, EINVAL);\n     }\n \n     struct _compression_flyweight* compression_flyweight \u003d (struct _compression_flyweight*) buffer;\n@@ -502,8 +497,7 @@\n \n     if (COMPRESSION_COOKIE !\u003d be32toh(compression_flyweight-\u003ecookie))\n     {\n-        result \u003d HDR_COMPRESSION_COOKIE_MISMATCH;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_COMPRESSION_COOKIE_MISMATCH);\n     }\n \n     int32_t compressed_length \u003d be32toh(compression_flyweight-\u003elength);\n@@ -512,8 +506,7 @@\n \n     if (inflateInit(\u0026strm) !\u003d Z_OK)\n     {\n-        result \u003d HDR_INFLATE_INIT_FAIL;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_INFLATE_FAIL);\n     }\n \n     strm.next_in \u003d compression_flyweight-\u003edata;\n@@ -523,14 +516,12 @@\n \n     if (inflate(\u0026strm, Z_SYNC_FLUSH) !\u003d Z_OK)\n     {\n-        result \u003d HDR_INFLATE_FAIL;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_INFLATE_FAIL);\n     }\n \n     if (ENCODING_COOKIE !\u003d be32toh(encoding_flyweight.cookie))\n     {\n-        result \u003d HDR_ENCODING_COOKIE_MISMATCH;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, HDR_ENCODING_COOKIE_MISMATCH);\n     }\n \n     int64_t lowest_trackable_value \u003d be64toh(encoding_flyweight.lowest_trackable_value);\n@@ -543,8 +534,7 @@\n         significant_figures,\n         \u0026h) !\u003d 0)\n     {\n-        result \u003d ENOMEM;\n-        goto cleanup;\n+        FAIL_AND_CLEANUP(cleanup, result, ENOMEM);\n     }\n \n     h-\u003etotal_count \u003d be64toh(encoding_flyweight.total_count);\n@@ -561,8 +551,7 @@\n \n         if (Z_STREAM_END !\u003d r \u0026\u0026 Z_OK !\u003d r)\n         {\n-            result \u003d HDR_INFLATE_FAIL;\n-            break;\n+            FAIL_AND_CLEANUP(cleanup, result, HDR_INFLATE_FAIL);\n         }\n \n         available_counts \u003d counts_per_chunk - (strm.avail_out / sizeof(int64_t));\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "%d in format string (no. 1) requires \u0027int\u0027 but the argument type is \u0027size_t {aka unsigned long long}\u0027.",
    "cwe": "686",
    "hashId": "e3b1c28099cc70f9f0b1f1e7c74f7fc5c0af407631dac65b7b03ca5a782f68e0",
    "toolName": "cppcheck",
    "warningMessage": "%d in format string (no. 1) requires \u0027int\u0027 but the argument type is \u0027size_t {aka unsigned long long}\u0027.",
    "warningSeverity": "portability",
    "warningType": "invalidPrintfArgType_sint",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_log_test.c",
    "lineNumber": "66",
    "columnNumber": "5",
    "commitId": "9932fb5072ca3753121cca97d453e97cae0ba3c8",
    "commitChildId": "15dfecb5894a25f302e49f3e1e5bad342e950c40",
    "commitTitle": "[C] Fixed stream based compressed encoding.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/15dfecb5894a25f302e49f3e1e5bad342e950c40",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/9932fb5072ca3753121cca97d453e97cae0ba3c8/src/test/c/hdr_histogram_log_test.c#L66",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 6731c36..c468737 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -10,6 +10,7 @@\n #include \u003cmath.h\u003e\n #include \u003cstring.h\u003e\n #include \u003cerrno.h\u003e\n+#include \u003cinttypes.h\u003e\n \n #include \u003cstdio.h\u003e\n #include \u003chdr_histogram.h\u003e\n@@ -63,7 +64,7 @@\n         return true;\n     }\n \n-    printf(\"Sizes a: %d, b: %d\\n\", a_size, b_size);\n+    printf(\"Sizes a: %zu, b: %zu\\n\", a_size, b_size);\n \n     struct hdr_iter iter_a;\n     struct hdr_iter iter_b;\n@@ -71,19 +72,19 @@\n     hdr_iter_init(\u0026iter_a, a);\n     hdr_iter_init(\u0026iter_b, b);\n \n-    int i \u003d 0;\n     while (hdr_iter_next(\u0026iter_a) \u0026\u0026 hdr_iter_next(\u0026iter_b))\n     {\n         if (iter_a.count_at_index !\u003d iter_b.count_at_index ||\n             iter_a.value_from_index !\u003d iter_b.value_from_index)\n         {\n             printf(\n-                \"A - value: %d, count: %d, B - value: %d, count: %d\\n\",\n+                \"A - value: %\"PRIu64\", count: %\"PRIu64\", B - value: %\"PRIu64\", count: %\"PRIu64\"\\n\",\n                 iter_a.value_from_index, iter_a.count_at_index,\n                 iter_b.value_from_index, iter_b.count_at_index);\n         }\n     }\n \n+    return false;\n }\n \n static struct hdr_histogram* raw_histogram \u003d NULL;\n@@ -91,14 +92,13 @@\n \n static void load_histograms()\n {\n-    int i;\n     free(raw_histogram);\n     free(cor_histogram);\n \n     hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n     hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n \n-    for (i \u003d 0; i \u003c 10000; i++)\n+    for (int i \u003d 0; i \u003c 10000; i++)\n     {\n         hdr_record_value(raw_histogram, 1000L);\n         hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "%d in format string (no. 2) requires \u0027int\u0027 but the argument type is \u0027size_t {aka unsigned long long}\u0027.",
    "cwe": "686",
    "hashId": "019cd3a1dc6d00edcc0bb29cde1b508f1dd520e29e34ca8cc33ff0d2d27da410",
    "toolName": "cppcheck",
    "warningMessage": "%d in format string (no. 2) requires \u0027int\u0027 but the argument type is \u0027size_t {aka unsigned long long}\u0027.",
    "warningSeverity": "portability",
    "warningType": "invalidPrintfArgType_sint",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_log_test.c",
    "lineNumber": "66",
    "columnNumber": "5",
    "commitId": "9932fb5072ca3753121cca97d453e97cae0ba3c8",
    "commitChildId": "15dfecb5894a25f302e49f3e1e5bad342e950c40",
    "commitTitle": "[C] Fixed stream based compressed encoding.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/15dfecb5894a25f302e49f3e1e5bad342e950c40",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/9932fb5072ca3753121cca97d453e97cae0ba3c8/src/test/c/hdr_histogram_log_test.c#L66",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 6731c36..c468737 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -10,6 +10,7 @@\n #include \u003cmath.h\u003e\n #include \u003cstring.h\u003e\n #include \u003cerrno.h\u003e\n+#include \u003cinttypes.h\u003e\n \n #include \u003cstdio.h\u003e\n #include \u003chdr_histogram.h\u003e\n@@ -63,7 +64,7 @@\n         return true;\n     }\n \n-    printf(\"Sizes a: %d, b: %d\\n\", a_size, b_size);\n+    printf(\"Sizes a: %zu, b: %zu\\n\", a_size, b_size);\n \n     struct hdr_iter iter_a;\n     struct hdr_iter iter_b;\n@@ -71,19 +72,19 @@\n     hdr_iter_init(\u0026iter_a, a);\n     hdr_iter_init(\u0026iter_b, b);\n \n-    int i \u003d 0;\n     while (hdr_iter_next(\u0026iter_a) \u0026\u0026 hdr_iter_next(\u0026iter_b))\n     {\n         if (iter_a.count_at_index !\u003d iter_b.count_at_index ||\n             iter_a.value_from_index !\u003d iter_b.value_from_index)\n         {\n             printf(\n-                \"A - value: %d, count: %d, B - value: %d, count: %d\\n\",\n+                \"A - value: %\"PRIu64\", count: %\"PRIu64\", B - value: %\"PRIu64\", count: %\"PRIu64\"\\n\",\n                 iter_a.value_from_index, iter_a.count_at_index,\n                 iter_b.value_from_index, iter_b.count_at_index);\n         }\n     }\n \n+    return false;\n }\n \n static struct hdr_histogram* raw_histogram \u003d NULL;\n@@ -91,14 +92,13 @@\n \n static void load_histograms()\n {\n-    int i;\n     free(raw_histogram);\n     free(cor_histogram);\n \n     hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n     hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n \n-    for (i \u003d 0; i \u003c 10000; i++)\n+    for (int i \u003d 0; i \u003c 10000; i++)\n     {\n         hdr_record_value(raw_histogram, 1000L);\n         hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027i\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "a650d96a162d55dc650be4796486f383ee732d78205f789020b8242bbaeeb449",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027i\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_log_test.c",
    "lineNumber": "74",
    "columnNumber": "11",
    "commitId": "9932fb5072ca3753121cca97d453e97cae0ba3c8",
    "commitChildId": "15dfecb5894a25f302e49f3e1e5bad342e950c40",
    "commitTitle": "[C] Fixed stream based compressed encoding.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/15dfecb5894a25f302e49f3e1e5bad342e950c40",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/9932fb5072ca3753121cca97d453e97cae0ba3c8/src/test/c/hdr_histogram_log_test.c#L74",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 6731c36..c468737 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -10,6 +10,7 @@\n #include \u003cmath.h\u003e\n #include \u003cstring.h\u003e\n #include \u003cerrno.h\u003e\n+#include \u003cinttypes.h\u003e\n \n #include \u003cstdio.h\u003e\n #include \u003chdr_histogram.h\u003e\n@@ -63,7 +64,7 @@\n         return true;\n     }\n \n-    printf(\"Sizes a: %d, b: %d\\n\", a_size, b_size);\n+    printf(\"Sizes a: %zu, b: %zu\\n\", a_size, b_size);\n \n     struct hdr_iter iter_a;\n     struct hdr_iter iter_b;\n@@ -71,19 +72,19 @@\n     hdr_iter_init(\u0026iter_a, a);\n     hdr_iter_init(\u0026iter_b, b);\n \n-    int i \u003d 0;\n     while (hdr_iter_next(\u0026iter_a) \u0026\u0026 hdr_iter_next(\u0026iter_b))\n     {\n         if (iter_a.count_at_index !\u003d iter_b.count_at_index ||\n             iter_a.value_from_index !\u003d iter_b.value_from_index)\n         {\n             printf(\n-                \"A - value: %d, count: %d, B - value: %d, count: %d\\n\",\n+                \"A - value: %\"PRIu64\", count: %\"PRIu64\", B - value: %\"PRIu64\", count: %\"PRIu64\"\\n\",\n                 iter_a.value_from_index, iter_a.count_at_index,\n                 iter_b.value_from_index, iter_b.count_at_index);\n         }\n     }\n \n+    return false;\n }\n \n static struct hdr_histogram* raw_histogram \u003d NULL;\n@@ -91,14 +92,13 @@\n \n static void load_histograms()\n {\n-    int i;\n     free(raw_histogram);\n     free(cor_histogram);\n \n     hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n     hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n \n-    for (i \u003d 0; i \u003c 10000; i++)\n+    for (int i \u003d 0; i \u003c 10000; i++)\n     {\n         hdr_record_value(raw_histogram, 1000L);\n         hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027flyweight\u0027 can be declared as pointer to const",
    "cwe": "398",
    "info": "Variable \u0027flyweight\u0027 can be declared as pointer to const",
    "hashId": "5eb78abb13421ee046849b720fee75e8994d25e8d71a81011053390183e194bf",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027flyweight\u0027 can be declared as pointer to const",
    "warningSeverity": "style",
    "warningType": "constVariablePointer",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "518",
    "columnNumber": "36",
    "commitId": "11a0ad78a51b594b53b0decc1b8b84d9d32eaa26",
    "commitChildId": "6052f1b15dc591adf04b6b96a81b0a913f1b9631",
    "commitTitle": "[C] Refactoring - remove unused method.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/6052f1b15dc591adf04b6b96a81b0a913f1b9631",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/11a0ad78a51b594b53b0decc1b8b84d9d32eaa26/src/main/c/hdr_histogram_log.c#L518",
    "gitDiffText": "diff --git a/src/main/c/hdr_histogram_log.c b/src/main/c/hdr_histogram_log.c\nindex 5678f26..48d1f7e 100644\n--- a/src/main/c/hdr_histogram_log.c\n+++ b/src/main/c/hdr_histogram_log.c\n@@ -513,12 +513,6 @@\n     return ret;\n }\n \n-int32_t hdr_get_compressed_length(uint8_t* buffer)\n-{\n-    struct _compression_flyweight* flyweight \u003d (struct _compression_flyweight*) buffer;\n-    return flyweight-\u003elength;\n-}\n-\n struct _log_header\n {\n     int major_version;\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Buffer is accessed out of bounds: compressed_histogram",
    "cwe": "788",
    "info": "Buffer overrun",
    "hashId": "a5871f930b8785278521d8395cb60a20667f354eead612a8d10122a748a35236",
    "toolName": "cppcheck",
    "warningMessage": "Buffer is accessed out of bounds: compressed_histogram",
    "warningSeverity": "error",
    "warningType": "bufferAccessOutOfBounds",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "590",
    "columnNumber": "16",
    "commitId": "3e71f578534fac2437f8cb9b512df478a866da7a",
    "commitChildId": "061df667cdeba527c4673d8f9df1db0aa5d55701",
    "commitTitle": "[C] Make hdr_decode_compressed completely stream based.  Comment out deprecated tests.  Use more standard C error codes.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/061df667cdeba527c4673d8f9df1db0aa5d55701",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/3e71f578534fac2437f8cb9b512df478a866da7a/src/main/c/hdr_histogram_log.c#L590",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex bffa16c..665228a 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -27,103 +27,103 @@\n     return false;\n }\n \n-static struct hdr_histogram* raw_histogram \u003d NULL;\n-static struct hdr_histogram* cor_histogram \u003d NULL;\n+// static struct hdr_histogram* raw_histogram \u003d NULL;\n+// static struct hdr_histogram* cor_histogram \u003d NULL;\n \n-static void load_histograms()\n-{\n-    int i;\n-    if (raw_histogram)\n-    {\n-        free(raw_histogram);\n-    }\n+// static void load_histograms()\n+// {\n+//     int i;\n+//     if (raw_histogram)\n+//     {\n+//         free(raw_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n \n-    if (cor_histogram)\n-    {\n-        free(cor_histogram);\n-    }\n+//     if (cor_histogram)\n+//     {\n+//         free(cor_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n \n-    for (i \u003d 0; i \u003c 10000; i++)\n-    {\n-        hdr_record_value(raw_histogram, 1000L);\n-        hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n-    }\n+//     for (i \u003d 0; i \u003c 10000; i++)\n+//     {\n+//         hdr_record_value(raw_histogram, 1000L);\n+//         hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n+//     }\n \n-    hdr_record_value(raw_histogram, 100000000L);\n-    hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n-}\n+//     hdr_record_value(raw_histogram, 100000000L);\n+//     hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n+// }\n \n-static char* test_encode_and_decode()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n \n-    size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result !\u003d 0);\n-    mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n+//     mu_assert(\"Did not encode\", encode_result !\u003d 0);\n+//     mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n \n-    int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n+//     int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n \n-    if (compare_result !\u003d 0)\n-    {\n-        uint8_t* a \u003d (uint8_t*) cor_histogram;\n-        uint8_t* b \u003d (uint8_t*) loaded_histogram;\n-        for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n-        {\n-            if (a[i] !\u003d b[i])\n-            {\n-                printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n-            }\n-        }\n-    }\n+//     if (compare_result !\u003d 0)\n+//     {\n+//         uint8_t* a \u003d (uint8_t*) cor_histogram;\n+//         uint8_t* b \u003d (uint8_t*) loaded_histogram;\n+//         for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n+//         {\n+//             if (a[i] !\u003d b[i])\n+//             {\n+//                 printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n+//             }\n+//         }\n+//     }\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n \n-static char* test_encode_and_decode_compressed()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode_compressed()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n \n-    size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n+//     mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n \n-    int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n+//     int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n \n-    if (decode_result !\u003d 0)\n-    {\n-        printf(\"%s\\n\", hdr_strerror(decode_result));\n-    }\n-    mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n+//     if (decode_result !\u003d 0)\n+//     {\n+//         printf(\"%s\\n\", hdr_strerror(decode_result));\n+//     }\n+//     mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n \n-    mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n-    int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n+//     mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n+//     int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n // Prototypes to avoid exporting in header file.\n void base64_encode_block(const uint8_t* input, char* output);\n@@ -258,7 +258,8 @@\n \n static char* test_parse_log()\n {\n-    const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    // const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    const char* file_name \u003d \"histogram.log\";\n     struct hdr_histogram* h;\n     FILE* log_file \u003d fopen(file_name, \"r\");\n \n@@ -272,7 +273,7 @@\n {\n     tests_run \u003d 0;\n \n-    mu_run_test(test_encode_and_decode);\n+    // mu_run_test(test_encode_and_decode);\n     // mu_run_test(test_encode_and_decode_compressed);\n \n     mu_run_test(base64_decode_block_decodes_4_chars);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Local variable \u0027compressed_len\u0027 shadows outer variable",
    "cwe": "398",
    "info": "Shadow variable",
    "hashId": "ec9566d8acbc61e4fd45ff5a75a51c399912af1ff67b22e8a29577b3f291b6fb",
    "toolName": "cppcheck",
    "warningMessage": "Local variable \u0027compressed_len\u0027 shadows outer variable",
    "warningSeverity": "style",
    "warningType": "shadowVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "606",
    "columnNumber": "17",
    "commitId": "3e71f578534fac2437f8cb9b512df478a866da7a",
    "commitChildId": "061df667cdeba527c4673d8f9df1db0aa5d55701",
    "commitTitle": "[C] Make hdr_decode_compressed completely stream based.  Comment out deprecated tests.  Use more standard C error codes.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/061df667cdeba527c4673d8f9df1db0aa5d55701",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/3e71f578534fac2437f8cb9b512df478a866da7a/src/main/c/hdr_histogram_log.c#L606",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex bffa16c..665228a 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -27,103 +27,103 @@\n     return false;\n }\n \n-static struct hdr_histogram* raw_histogram \u003d NULL;\n-static struct hdr_histogram* cor_histogram \u003d NULL;\n+// static struct hdr_histogram* raw_histogram \u003d NULL;\n+// static struct hdr_histogram* cor_histogram \u003d NULL;\n \n-static void load_histograms()\n-{\n-    int i;\n-    if (raw_histogram)\n-    {\n-        free(raw_histogram);\n-    }\n+// static void load_histograms()\n+// {\n+//     int i;\n+//     if (raw_histogram)\n+//     {\n+//         free(raw_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n \n-    if (cor_histogram)\n-    {\n-        free(cor_histogram);\n-    }\n+//     if (cor_histogram)\n+//     {\n+//         free(cor_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n \n-    for (i \u003d 0; i \u003c 10000; i++)\n-    {\n-        hdr_record_value(raw_histogram, 1000L);\n-        hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n-    }\n+//     for (i \u003d 0; i \u003c 10000; i++)\n+//     {\n+//         hdr_record_value(raw_histogram, 1000L);\n+//         hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n+//     }\n \n-    hdr_record_value(raw_histogram, 100000000L);\n-    hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n-}\n+//     hdr_record_value(raw_histogram, 100000000L);\n+//     hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n+// }\n \n-static char* test_encode_and_decode()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n \n-    size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result !\u003d 0);\n-    mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n+//     mu_assert(\"Did not encode\", encode_result !\u003d 0);\n+//     mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n \n-    int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n+//     int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n \n-    if (compare_result !\u003d 0)\n-    {\n-        uint8_t* a \u003d (uint8_t*) cor_histogram;\n-        uint8_t* b \u003d (uint8_t*) loaded_histogram;\n-        for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n-        {\n-            if (a[i] !\u003d b[i])\n-            {\n-                printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n-            }\n-        }\n-    }\n+//     if (compare_result !\u003d 0)\n+//     {\n+//         uint8_t* a \u003d (uint8_t*) cor_histogram;\n+//         uint8_t* b \u003d (uint8_t*) loaded_histogram;\n+//         for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n+//         {\n+//             if (a[i] !\u003d b[i])\n+//             {\n+//                 printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n+//             }\n+//         }\n+//     }\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n \n-static char* test_encode_and_decode_compressed()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode_compressed()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n \n-    size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n+//     mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n \n-    int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n+//     int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n \n-    if (decode_result !\u003d 0)\n-    {\n-        printf(\"%s\\n\", hdr_strerror(decode_result));\n-    }\n-    mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n+//     if (decode_result !\u003d 0)\n+//     {\n+//         printf(\"%s\\n\", hdr_strerror(decode_result));\n+//     }\n+//     mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n \n-    mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n-    int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n+//     mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n+//     int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n // Prototypes to avoid exporting in header file.\n void base64_encode_block(const uint8_t* input, char* output);\n@@ -258,7 +258,8 @@\n \n static char* test_parse_log()\n {\n-    const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    // const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    const char* file_name \u003d \"histogram.log\";\n     struct hdr_histogram* h;\n     FILE* log_file \u003d fopen(file_name, \"r\");\n \n@@ -272,7 +273,7 @@\n {\n     tests_run \u003d 0;\n \n-    mu_run_test(test_encode_and_decode);\n+    // mu_run_test(test_encode_and_decode);\n     // mu_run_test(test_encode_and_decode_compressed);\n \n     mu_run_test(base64_decode_block_decodes_4_chars);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Local variable \u0027compressed_len\u0027 shadows outer variable",
    "cwe": "398",
    "info": "Shadowed declaration",
    "hashId": "ec9566d8acbc61e4fd45ff5a75a51c399912af1ff67b22e8a29577b3f291b6fb",
    "toolName": "cppcheck",
    "warningMessage": "Local variable \u0027compressed_len\u0027 shadows outer variable",
    "warningSeverity": "style",
    "warningType": "shadowVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "588",
    "columnNumber": "13",
    "commitId": "3e71f578534fac2437f8cb9b512df478a866da7a",
    "commitChildId": "061df667cdeba527c4673d8f9df1db0aa5d55701",
    "commitTitle": "[C] Make hdr_decode_compressed completely stream based.  Comment out deprecated tests.  Use more standard C error codes.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/061df667cdeba527c4673d8f9df1db0aa5d55701",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/3e71f578534fac2437f8cb9b512df478a866da7a/src/main/c/hdr_histogram_log.c#L588",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex bffa16c..665228a 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -27,103 +27,103 @@\n     return false;\n }\n \n-static struct hdr_histogram* raw_histogram \u003d NULL;\n-static struct hdr_histogram* cor_histogram \u003d NULL;\n+// static struct hdr_histogram* raw_histogram \u003d NULL;\n+// static struct hdr_histogram* cor_histogram \u003d NULL;\n \n-static void load_histograms()\n-{\n-    int i;\n-    if (raw_histogram)\n-    {\n-        free(raw_histogram);\n-    }\n+// static void load_histograms()\n+// {\n+//     int i;\n+//     if (raw_histogram)\n+//     {\n+//         free(raw_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n \n-    if (cor_histogram)\n-    {\n-        free(cor_histogram);\n-    }\n+//     if (cor_histogram)\n+//     {\n+//         free(cor_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n \n-    for (i \u003d 0; i \u003c 10000; i++)\n-    {\n-        hdr_record_value(raw_histogram, 1000L);\n-        hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n-    }\n+//     for (i \u003d 0; i \u003c 10000; i++)\n+//     {\n+//         hdr_record_value(raw_histogram, 1000L);\n+//         hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n+//     }\n \n-    hdr_record_value(raw_histogram, 100000000L);\n-    hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n-}\n+//     hdr_record_value(raw_histogram, 100000000L);\n+//     hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n+// }\n \n-static char* test_encode_and_decode()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n \n-    size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result !\u003d 0);\n-    mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n+//     mu_assert(\"Did not encode\", encode_result !\u003d 0);\n+//     mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n \n-    int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n+//     int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n \n-    if (compare_result !\u003d 0)\n-    {\n-        uint8_t* a \u003d (uint8_t*) cor_histogram;\n-        uint8_t* b \u003d (uint8_t*) loaded_histogram;\n-        for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n-        {\n-            if (a[i] !\u003d b[i])\n-            {\n-                printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n-            }\n-        }\n-    }\n+//     if (compare_result !\u003d 0)\n+//     {\n+//         uint8_t* a \u003d (uint8_t*) cor_histogram;\n+//         uint8_t* b \u003d (uint8_t*) loaded_histogram;\n+//         for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n+//         {\n+//             if (a[i] !\u003d b[i])\n+//             {\n+//                 printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n+//             }\n+//         }\n+//     }\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n \n-static char* test_encode_and_decode_compressed()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode_compressed()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n \n-    size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n+//     mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n \n-    int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n+//     int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n \n-    if (decode_result !\u003d 0)\n-    {\n-        printf(\"%s\\n\", hdr_strerror(decode_result));\n-    }\n-    mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n+//     if (decode_result !\u003d 0)\n+//     {\n+//         printf(\"%s\\n\", hdr_strerror(decode_result));\n+//     }\n+//     mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n \n-    mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n-    int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n+//     mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n+//     int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n // Prototypes to avoid exporting in header file.\n void base64_encode_block(const uint8_t* input, char* output);\n@@ -258,7 +258,8 @@\n \n static char* test_parse_log()\n {\n-    const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    // const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    const char* file_name \u003d \"histogram.log\";\n     struct hdr_histogram* h;\n     FILE* log_file \u003d fopen(file_name, \"r\");\n \n@@ -272,7 +273,7 @@\n {\n     tests_run \u003d 0;\n \n-    mu_run_test(test_encode_and_decode);\n+    // mu_run_test(test_encode_and_decode);\n     // mu_run_test(test_encode_and_decode_compressed);\n \n     mu_run_test(base64_decode_block_decodes_4_chars);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Uninitialized variable: *result",
    "cwe": "457",
    "hashId": "5333fc95b1d34b06d1c8d521960161c2ccfc53cdb14c6edf5e913f0ed177b9df",
    "toolName": "cppcheck",
    "warningMessage": "Uninitialized variable: *result",
    "warningSeverity": "warning",
    "warningType": "uninitvar",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "402",
    "columnNumber": "59",
    "commitId": "3e71f578534fac2437f8cb9b512df478a866da7a",
    "commitChildId": "061df667cdeba527c4673d8f9df1db0aa5d55701",
    "commitTitle": "[C] Make hdr_decode_compressed completely stream based.  Comment out deprecated tests.  Use more standard C error codes.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/061df667cdeba527c4673d8f9df1db0aa5d55701",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/3e71f578534fac2437f8cb9b512df478a866da7a/src/main/c/hdr_histogram_log.c#L402",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex bffa16c..665228a 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -27,103 +27,103 @@\n     return false;\n }\n \n-static struct hdr_histogram* raw_histogram \u003d NULL;\n-static struct hdr_histogram* cor_histogram \u003d NULL;\n+// static struct hdr_histogram* raw_histogram \u003d NULL;\n+// static struct hdr_histogram* cor_histogram \u003d NULL;\n \n-static void load_histograms()\n-{\n-    int i;\n-    if (raw_histogram)\n-    {\n-        free(raw_histogram);\n-    }\n+// static void load_histograms()\n+// {\n+//     int i;\n+//     if (raw_histogram)\n+//     {\n+//         free(raw_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n \n-    if (cor_histogram)\n-    {\n-        free(cor_histogram);\n-    }\n+//     if (cor_histogram)\n+//     {\n+//         free(cor_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n \n-    for (i \u003d 0; i \u003c 10000; i++)\n-    {\n-        hdr_record_value(raw_histogram, 1000L);\n-        hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n-    }\n+//     for (i \u003d 0; i \u003c 10000; i++)\n+//     {\n+//         hdr_record_value(raw_histogram, 1000L);\n+//         hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n+//     }\n \n-    hdr_record_value(raw_histogram, 100000000L);\n-    hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n-}\n+//     hdr_record_value(raw_histogram, 100000000L);\n+//     hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n+// }\n \n-static char* test_encode_and_decode()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n \n-    size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result !\u003d 0);\n-    mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n+//     mu_assert(\"Did not encode\", encode_result !\u003d 0);\n+//     mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n \n-    int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n+//     int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n \n-    if (compare_result !\u003d 0)\n-    {\n-        uint8_t* a \u003d (uint8_t*) cor_histogram;\n-        uint8_t* b \u003d (uint8_t*) loaded_histogram;\n-        for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n-        {\n-            if (a[i] !\u003d b[i])\n-            {\n-                printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n-            }\n-        }\n-    }\n+//     if (compare_result !\u003d 0)\n+//     {\n+//         uint8_t* a \u003d (uint8_t*) cor_histogram;\n+//         uint8_t* b \u003d (uint8_t*) loaded_histogram;\n+//         for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n+//         {\n+//             if (a[i] !\u003d b[i])\n+//             {\n+//                 printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n+//             }\n+//         }\n+//     }\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n \n-static char* test_encode_and_decode_compressed()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode_compressed()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n \n-    size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n+//     mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n \n-    int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n+//     int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n \n-    if (decode_result !\u003d 0)\n-    {\n-        printf(\"%s\\n\", hdr_strerror(decode_result));\n-    }\n-    mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n+//     if (decode_result !\u003d 0)\n+//     {\n+//         printf(\"%s\\n\", hdr_strerror(decode_result));\n+//     }\n+//     mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n \n-    mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n-    int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n+//     mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n+//     int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n // Prototypes to avoid exporting in header file.\n void base64_encode_block(const uint8_t* input, char* output);\n@@ -258,7 +258,8 @@\n \n static char* test_parse_log()\n {\n-    const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    // const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    const char* file_name \u003d \"histogram.log\";\n     struct hdr_histogram* h;\n     FILE* log_file \u003d fopen(file_name, \"r\");\n \n@@ -272,7 +273,7 @@\n {\n     tests_run \u003d 0;\n \n-    mu_run_test(test_encode_and_decode);\n+    // mu_run_test(test_encode_and_decode);\n     // mu_run_test(test_encode_and_decode_compressed);\n \n     mu_run_test(base64_decode_block_decodes_4_chars);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Uninitialized variable: *result",
    "cwe": "457",
    "info": "Calling function \u0027hdr_decode_compressed\u0027, 3rd argument \u0027\u0026h\u0027 value is \u003cUninit\u003e",
    "hashId": "5333fc95b1d34b06d1c8d521960161c2ccfc53cdb14c6edf5e913f0ed177b9df",
    "toolName": "cppcheck",
    "warningMessage": "Uninitialized variable: *result",
    "warningSeverity": "warning",
    "warningType": "uninitvar",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "612",
    "columnNumber": "77",
    "commitId": "3e71f578534fac2437f8cb9b512df478a866da7a",
    "commitChildId": "061df667cdeba527c4673d8f9df1db0aa5d55701",
    "commitTitle": "[C] Make hdr_decode_compressed completely stream based.  Comment out deprecated tests.  Use more standard C error codes.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/061df667cdeba527c4673d8f9df1db0aa5d55701",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/3e71f578534fac2437f8cb9b512df478a866da7a/src/main/c/hdr_histogram_log.c#L612",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex bffa16c..665228a 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -27,103 +27,103 @@\n     return false;\n }\n \n-static struct hdr_histogram* raw_histogram \u003d NULL;\n-static struct hdr_histogram* cor_histogram \u003d NULL;\n+// static struct hdr_histogram* raw_histogram \u003d NULL;\n+// static struct hdr_histogram* cor_histogram \u003d NULL;\n \n-static void load_histograms()\n-{\n-    int i;\n-    if (raw_histogram)\n-    {\n-        free(raw_histogram);\n-    }\n+// static void load_histograms()\n+// {\n+//     int i;\n+//     if (raw_histogram)\n+//     {\n+//         free(raw_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n \n-    if (cor_histogram)\n-    {\n-        free(cor_histogram);\n-    }\n+//     if (cor_histogram)\n+//     {\n+//         free(cor_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n \n-    for (i \u003d 0; i \u003c 10000; i++)\n-    {\n-        hdr_record_value(raw_histogram, 1000L);\n-        hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n-    }\n+//     for (i \u003d 0; i \u003c 10000; i++)\n+//     {\n+//         hdr_record_value(raw_histogram, 1000L);\n+//         hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n+//     }\n \n-    hdr_record_value(raw_histogram, 100000000L);\n-    hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n-}\n+//     hdr_record_value(raw_histogram, 100000000L);\n+//     hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n+// }\n \n-static char* test_encode_and_decode()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n \n-    size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result !\u003d 0);\n-    mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n+//     mu_assert(\"Did not encode\", encode_result !\u003d 0);\n+//     mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n \n-    int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n+//     int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n \n-    if (compare_result !\u003d 0)\n-    {\n-        uint8_t* a \u003d (uint8_t*) cor_histogram;\n-        uint8_t* b \u003d (uint8_t*) loaded_histogram;\n-        for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n-        {\n-            if (a[i] !\u003d b[i])\n-            {\n-                printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n-            }\n-        }\n-    }\n+//     if (compare_result !\u003d 0)\n+//     {\n+//         uint8_t* a \u003d (uint8_t*) cor_histogram;\n+//         uint8_t* b \u003d (uint8_t*) loaded_histogram;\n+//         for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n+//         {\n+//             if (a[i] !\u003d b[i])\n+//             {\n+//                 printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n+//             }\n+//         }\n+//     }\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n \n-static char* test_encode_and_decode_compressed()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode_compressed()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n \n-    size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n+//     mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n \n-    int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n+//     int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n \n-    if (decode_result !\u003d 0)\n-    {\n-        printf(\"%s\\n\", hdr_strerror(decode_result));\n-    }\n-    mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n+//     if (decode_result !\u003d 0)\n+//     {\n+//         printf(\"%s\\n\", hdr_strerror(decode_result));\n+//     }\n+//     mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n \n-    mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n-    int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n+//     mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n+//     int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n // Prototypes to avoid exporting in header file.\n void base64_encode_block(const uint8_t* input, char* output);\n@@ -258,7 +258,8 @@\n \n static char* test_parse_log()\n {\n-    const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    // const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    const char* file_name \u003d \"histogram.log\";\n     struct hdr_histogram* h;\n     FILE* log_file \u003d fopen(file_name, \"r\");\n \n@@ -272,7 +273,7 @@\n {\n     tests_run \u003d 0;\n \n-    mu_run_test(test_encode_and_decode);\n+    // mu_run_test(test_encode_and_decode);\n     // mu_run_test(test_encode_and_decode_compressed);\n \n     mu_run_test(base64_decode_block_decodes_4_chars);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027compressed_len\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "5a5079c96e64e3b4464981c0511c747379c3d557c5a671831a679c1dc8ddb731",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027compressed_len\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "588",
    "columnNumber": "28",
    "commitId": "3e71f578534fac2437f8cb9b512df478a866da7a",
    "commitChildId": "061df667cdeba527c4673d8f9df1db0aa5d55701",
    "commitTitle": "[C] Make hdr_decode_compressed completely stream based.  Comment out deprecated tests.  Use more standard C error codes.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/061df667cdeba527c4673d8f9df1db0aa5d55701",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/3e71f578534fac2437f8cb9b512df478a866da7a/src/main/c/hdr_histogram_log.c#L588",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex bffa16c..665228a 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -27,103 +27,103 @@\n     return false;\n }\n \n-static struct hdr_histogram* raw_histogram \u003d NULL;\n-static struct hdr_histogram* cor_histogram \u003d NULL;\n+// static struct hdr_histogram* raw_histogram \u003d NULL;\n+// static struct hdr_histogram* cor_histogram \u003d NULL;\n \n-static void load_histograms()\n-{\n-    int i;\n-    if (raw_histogram)\n-    {\n-        free(raw_histogram);\n-    }\n+// static void load_histograms()\n+// {\n+//     int i;\n+//     if (raw_histogram)\n+//     {\n+//         free(raw_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n \n-    if (cor_histogram)\n-    {\n-        free(cor_histogram);\n-    }\n+//     if (cor_histogram)\n+//     {\n+//         free(cor_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n \n-    for (i \u003d 0; i \u003c 10000; i++)\n-    {\n-        hdr_record_value(raw_histogram, 1000L);\n-        hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n-    }\n+//     for (i \u003d 0; i \u003c 10000; i++)\n+//     {\n+//         hdr_record_value(raw_histogram, 1000L);\n+//         hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n+//     }\n \n-    hdr_record_value(raw_histogram, 100000000L);\n-    hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n-}\n+//     hdr_record_value(raw_histogram, 100000000L);\n+//     hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n+// }\n \n-static char* test_encode_and_decode()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n \n-    size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result !\u003d 0);\n-    mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n+//     mu_assert(\"Did not encode\", encode_result !\u003d 0);\n+//     mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n \n-    int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n+//     int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n \n-    if (compare_result !\u003d 0)\n-    {\n-        uint8_t* a \u003d (uint8_t*) cor_histogram;\n-        uint8_t* b \u003d (uint8_t*) loaded_histogram;\n-        for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n-        {\n-            if (a[i] !\u003d b[i])\n-            {\n-                printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n-            }\n-        }\n-    }\n+//     if (compare_result !\u003d 0)\n+//     {\n+//         uint8_t* a \u003d (uint8_t*) cor_histogram;\n+//         uint8_t* b \u003d (uint8_t*) loaded_histogram;\n+//         for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n+//         {\n+//             if (a[i] !\u003d b[i])\n+//             {\n+//                 printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n+//             }\n+//         }\n+//     }\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n \n-static char* test_encode_and_decode_compressed()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode_compressed()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n \n-    size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n+//     mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n \n-    int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n+//     int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n \n-    if (decode_result !\u003d 0)\n-    {\n-        printf(\"%s\\n\", hdr_strerror(decode_result));\n-    }\n-    mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n+//     if (decode_result !\u003d 0)\n+//     {\n+//         printf(\"%s\\n\", hdr_strerror(decode_result));\n+//     }\n+//     mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n \n-    mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n-    int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n+//     mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n+//     int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n // Prototypes to avoid exporting in header file.\n void base64_encode_block(const uint8_t* input, char* output);\n@@ -258,7 +258,8 @@\n \n static char* test_parse_log()\n {\n-    const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    // const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    const char* file_name \u003d \"histogram.log\";\n     struct hdr_histogram* h;\n     FILE* log_file \u003d fopen(file_name, \"r\");\n \n@@ -272,7 +273,7 @@\n {\n     tests_run \u003d 0;\n \n-    mu_run_test(test_encode_and_decode);\n+    // mu_run_test(test_encode_and_decode);\n     // mu_run_test(test_encode_and_decode_compressed);\n \n     mu_run_test(base64_decode_block_decodes_4_chars);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027a\u0027 can be declared as pointer to const",
    "cwe": "398",
    "info": "Variable \u0027a\u0027 can be declared as pointer to const",
    "hashId": "c460e4d383c9d8e883b90859076cc50db9b541020261c23243eec0999148a1ab",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027a\u0027 can be declared as pointer to const",
    "warningSeverity": "style",
    "warningType": "constVariablePointer",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_log_test.c",
    "lineNumber": "80",
    "columnNumber": "18",
    "commitId": "3e71f578534fac2437f8cb9b512df478a866da7a",
    "commitChildId": "061df667cdeba527c4673d8f9df1db0aa5d55701",
    "commitTitle": "[C] Make hdr_decode_compressed completely stream based.  Comment out deprecated tests.  Use more standard C error codes.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/061df667cdeba527c4673d8f9df1db0aa5d55701",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/3e71f578534fac2437f8cb9b512df478a866da7a/src/test/c/hdr_histogram_log_test.c#L80",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex bffa16c..665228a 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -27,103 +27,103 @@\n     return false;\n }\n \n-static struct hdr_histogram* raw_histogram \u003d NULL;\n-static struct hdr_histogram* cor_histogram \u003d NULL;\n+// static struct hdr_histogram* raw_histogram \u003d NULL;\n+// static struct hdr_histogram* cor_histogram \u003d NULL;\n \n-static void load_histograms()\n-{\n-    int i;\n-    if (raw_histogram)\n-    {\n-        free(raw_histogram);\n-    }\n+// static void load_histograms()\n+// {\n+//     int i;\n+//     if (raw_histogram)\n+//     {\n+//         free(raw_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n \n-    if (cor_histogram)\n-    {\n-        free(cor_histogram);\n-    }\n+//     if (cor_histogram)\n+//     {\n+//         free(cor_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n \n-    for (i \u003d 0; i \u003c 10000; i++)\n-    {\n-        hdr_record_value(raw_histogram, 1000L);\n-        hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n-    }\n+//     for (i \u003d 0; i \u003c 10000; i++)\n+//     {\n+//         hdr_record_value(raw_histogram, 1000L);\n+//         hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n+//     }\n \n-    hdr_record_value(raw_histogram, 100000000L);\n-    hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n-}\n+//     hdr_record_value(raw_histogram, 100000000L);\n+//     hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n+// }\n \n-static char* test_encode_and_decode()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n \n-    size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result !\u003d 0);\n-    mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n+//     mu_assert(\"Did not encode\", encode_result !\u003d 0);\n+//     mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n \n-    int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n+//     int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n \n-    if (compare_result !\u003d 0)\n-    {\n-        uint8_t* a \u003d (uint8_t*) cor_histogram;\n-        uint8_t* b \u003d (uint8_t*) loaded_histogram;\n-        for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n-        {\n-            if (a[i] !\u003d b[i])\n-            {\n-                printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n-            }\n-        }\n-    }\n+//     if (compare_result !\u003d 0)\n+//     {\n+//         uint8_t* a \u003d (uint8_t*) cor_histogram;\n+//         uint8_t* b \u003d (uint8_t*) loaded_histogram;\n+//         for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n+//         {\n+//             if (a[i] !\u003d b[i])\n+//             {\n+//                 printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n+//             }\n+//         }\n+//     }\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n \n-static char* test_encode_and_decode_compressed()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode_compressed()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n \n-    size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n+//     mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n \n-    int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n+//     int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n \n-    if (decode_result !\u003d 0)\n-    {\n-        printf(\"%s\\n\", hdr_strerror(decode_result));\n-    }\n-    mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n+//     if (decode_result !\u003d 0)\n+//     {\n+//         printf(\"%s\\n\", hdr_strerror(decode_result));\n+//     }\n+//     mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n \n-    mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n-    int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n+//     mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n+//     int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n // Prototypes to avoid exporting in header file.\n void base64_encode_block(const uint8_t* input, char* output);\n@@ -258,7 +258,8 @@\n \n static char* test_parse_log()\n {\n-    const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    // const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    const char* file_name \u003d \"histogram.log\";\n     struct hdr_histogram* h;\n     FILE* log_file \u003d fopen(file_name, \"r\");\n \n@@ -272,7 +273,7 @@\n {\n     tests_run \u003d 0;\n \n-    mu_run_test(test_encode_and_decode);\n+    // mu_run_test(test_encode_and_decode);\n     // mu_run_test(test_encode_and_decode_compressed);\n \n     mu_run_test(base64_decode_block_decodes_4_chars);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027b\u0027 can be declared as pointer to const",
    "cwe": "398",
    "info": "Variable \u0027b\u0027 can be declared as pointer to const",
    "hashId": "af33b03df05ade73639097180d7d9b36eb72eb3b67c004e27d50a1e44c825868",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027b\u0027 can be declared as pointer to const",
    "warningSeverity": "style",
    "warningType": "constVariablePointer",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_log_test.c",
    "lineNumber": "81",
    "columnNumber": "18",
    "commitId": "3e71f578534fac2437f8cb9b512df478a866da7a",
    "commitChildId": "061df667cdeba527c4673d8f9df1db0aa5d55701",
    "commitTitle": "[C] Make hdr_decode_compressed completely stream based.  Comment out deprecated tests.  Use more standard C error codes.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/061df667cdeba527c4673d8f9df1db0aa5d55701",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/3e71f578534fac2437f8cb9b512df478a866da7a/src/test/c/hdr_histogram_log_test.c#L81",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex bffa16c..665228a 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -27,103 +27,103 @@\n     return false;\n }\n \n-static struct hdr_histogram* raw_histogram \u003d NULL;\n-static struct hdr_histogram* cor_histogram \u003d NULL;\n+// static struct hdr_histogram* raw_histogram \u003d NULL;\n+// static struct hdr_histogram* cor_histogram \u003d NULL;\n \n-static void load_histograms()\n-{\n-    int i;\n-    if (raw_histogram)\n-    {\n-        free(raw_histogram);\n-    }\n+// static void load_histograms()\n+// {\n+//     int i;\n+//     if (raw_histogram)\n+//     {\n+//         free(raw_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026raw_histogram);\n \n-    if (cor_histogram)\n-    {\n-        free(cor_histogram);\n-    }\n+//     if (cor_histogram)\n+//     {\n+//         free(cor_histogram);\n+//     }\n \n-    hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n+//     hdr_alloc(3600L * 1000 * 1000, 3, \u0026cor_histogram);\n \n-    for (i \u003d 0; i \u003c 10000; i++)\n-    {\n-        hdr_record_value(raw_histogram, 1000L);\n-        hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n-    }\n+//     for (i \u003d 0; i \u003c 10000; i++)\n+//     {\n+//         hdr_record_value(raw_histogram, 1000L);\n+//         hdr_record_corrected_value(cor_histogram, 1000L, 10000L);\n+//     }\n \n-    hdr_record_value(raw_histogram, 100000000L);\n-    hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n-}\n+//     hdr_record_value(raw_histogram, 100000000L);\n+//     hdr_record_corrected_value(cor_histogram, 100000000L, 10000L);\n+// }\n \n-static char* test_encode_and_decode()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n \n-    size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result !\u003d 0);\n-    mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n+//     mu_assert(\"Did not encode\", encode_result !\u003d 0);\n+//     mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n \n-    int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n+//     int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n \n-    if (compare_result !\u003d 0)\n-    {\n-        uint8_t* a \u003d (uint8_t*) cor_histogram;\n-        uint8_t* b \u003d (uint8_t*) loaded_histogram;\n-        for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n-        {\n-            if (a[i] !\u003d b[i])\n-            {\n-                printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n-            }\n-        }\n-    }\n+//     if (compare_result !\u003d 0)\n+//     {\n+//         uint8_t* a \u003d (uint8_t*) cor_histogram;\n+//         uint8_t* b \u003d (uint8_t*) loaded_histogram;\n+//         for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n+//         {\n+//             if (a[i] !\u003d b[i])\n+//             {\n+//                 printf(\"Mismatch at %d: %x - %x\\n\", i, a[i] \u0026 0xFF, b[i] \u0026 0xFF);\n+//             }\n+//         }\n+//     }\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n \n-static char* test_encode_and_decode_compressed()\n-{\n-    load_histograms();\n+// static char* test_encode_and_decode_compressed()\n+// {\n+//     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n+//     size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n \n-    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n+//     uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n \n-    size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n+//     size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n \n-    mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n+//     mu_assert(\"Did not encode\", encode_result \u003d\u003d 0);\n \n-    int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n+//     int32_t compressed_length \u003d hdr_get_compressed_length(buffer);\n \n-    struct hdr_histogram* loaded_histogram \u003d NULL;\n-    int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n+//     struct hdr_histogram* loaded_histogram \u003d NULL;\n+//     int decode_result \u003d hdr_decode_compressed(buffer, compressed_length, \u0026loaded_histogram);\n \n-    if (decode_result !\u003d 0)\n-    {\n-        printf(\"%s\\n\", hdr_strerror(decode_result));\n-    }\n-    mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n+//     if (decode_result !\u003d 0)\n+//     {\n+//         printf(\"%s\\n\", hdr_strerror(decode_result));\n+//     }\n+//     mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n \n-    mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n-    int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n+//     mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n+//     int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n \n-    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n \n-    return 0;\n-}\n+//     return 0;\n+// }\n \n // Prototypes to avoid exporting in header file.\n void base64_encode_block(const uint8_t* input, char* output);\n@@ -258,7 +258,8 @@\n \n static char* test_parse_log()\n {\n-    const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    // const char* file_name \u003d \"src/test/resources/hiccup.140623.1028.10646.hlog\";\n+    const char* file_name \u003d \"histogram.log\";\n     struct hdr_histogram* h;\n     FILE* log_file \u003d fopen(file_name, \"r\");\n \n@@ -272,7 +273,7 @@\n {\n     tests_run \u003d 0;\n \n-    mu_run_test(test_encode_and_decode);\n+    // mu_run_test(test_encode_and_decode);\n     // mu_run_test(test_encode_and_decode_compressed);\n \n     mu_run_test(base64_decode_block_decodes_4_chars);\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "%ld in format string (no. 1) requires \u0027long\u0027 but the argument type is \u0027signed long long\u0027.",
    "cwe": "686",
    "hashId": "a45a8075ca045277c75a355aeb5b153ca1c632a735b2fbbde45ffce99838cd1b",
    "toolName": "cppcheck",
    "warningMessage": "%ld in format string (no. 1) requires \u0027long\u0027 but the argument type is \u0027signed long long\u0027.",
    "warningSeverity": "warning",
    "warningType": "invalidPrintfArgType_sint",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_test.c",
    "lineNumber": "37",
    "columnNumber": "5",
    "commitId": "0e2fcd6ee78f48adf4956f8d59a606661246d625",
    "commitChildId": "da70fab4c3169a5ce08ea22951755a8e77f2a6a1",
    "commitTitle": "[C] Use correct format options for uint64_t.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/da70fab4c3169a5ce08ea22951755a8e77f2a6a1",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/0e2fcd6ee78f48adf4956f8d59a606661246d625/src/test/c/hdr_histogram_test.c#L37",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_test.c b/src/test/c/hdr_histogram_test.c\nindex 7a853e1..ed97e74 100644\n--- a/src/test/c/hdr_histogram_test.c\n+++ b/src/test/c/hdr_histogram_test.c\n@@ -10,6 +10,7 @@\n #include \u003cmath.h\u003e\n #include \u003cstring.h\u003e\n #include \u003cerrno.h\u003e\n+#include \u003cinttypes.h\u003e\n \n #include \u003cstdio.h\u003e\n #include \u003chdr_histogram.h\u003e\n@@ -34,7 +35,7 @@\n         return true;\n     }\n \n-    printf(\"[compare_int64] %ld \u003d\u003d %ld \u003d\u003d false\\n\", a, b);\n+    printf(\"[compare_int64] %\" PRIu64 \" \u003d\u003d %\" PRIu64 \" \u003d\u003d false\\n\", a, b);\n     return false;\n }\n \n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "%ld in format string (no. 2) requires \u0027long\u0027 but the argument type is \u0027signed long long\u0027.",
    "cwe": "686",
    "hashId": "183136e2c3c9eae43aa3b372d7c852a33b5064e2777f4d5ad3d2d30c5e16fd18",
    "toolName": "cppcheck",
    "warningMessage": "%ld in format string (no. 2) requires \u0027long\u0027 but the argument type is \u0027signed long long\u0027.",
    "warningSeverity": "warning",
    "warningType": "invalidPrintfArgType_sint",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_test.c",
    "lineNumber": "37",
    "columnNumber": "5",
    "commitId": "0e2fcd6ee78f48adf4956f8d59a606661246d625",
    "commitChildId": "da70fab4c3169a5ce08ea22951755a8e77f2a6a1",
    "commitTitle": "[C] Use correct format options for uint64_t.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/da70fab4c3169a5ce08ea22951755a8e77f2a6a1",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/0e2fcd6ee78f48adf4956f8d59a606661246d625/src/test/c/hdr_histogram_test.c#L37",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_test.c b/src/test/c/hdr_histogram_test.c\nindex 7a853e1..ed97e74 100644\n--- a/src/test/c/hdr_histogram_test.c\n+++ b/src/test/c/hdr_histogram_test.c\n@@ -10,6 +10,7 @@\n #include \u003cmath.h\u003e\n #include \u003cstring.h\u003e\n #include \u003cerrno.h\u003e\n+#include \u003cinttypes.h\u003e\n \n #include \u003cstdio.h\u003e\n #include \u003chdr_histogram.h\u003e\n@@ -34,7 +35,7 @@\n         return true;\n     }\n \n-    printf(\"[compare_int64] %ld \u003d\u003d %ld \u003d\u003d false\\n\", a, b);\n+    printf(\"[compare_int64] %\" PRIu64 \" \u003d\u003d %\" PRIu64 \" \u003d\u003d false\\n\", a, b);\n     return false;\n }\n \n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Parameter \u0027buf\u0027 can be declared as pointer to const",
    "cwe": "398",
    "info": "Parameter \u0027buf\u0027 can be declared as pointer to const",
    "hashId": "55c4ff65a407ecb898401010be35ec92f24d4734de9bbaee1f6a7b317c7198e2",
    "toolName": "cppcheck",
    "warningMessage": "Parameter \u0027buf\u0027 can be declared as pointer to const",
    "warningSeverity": "style",
    "warningType": "constParameterPointer",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "101",
    "columnNumber": "28",
    "commitId": "b8340014f252f10ca3462245ff92acc8344a6d67",
    "commitChildId": "a41138665ed68945f9e153c8fbf21e8cf6e6ed2b",
    "commitTitle": "[C] Improved base64 encode/decode functions.  Code and test clean up and formatting.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/a41138665ed68945f9e153c8fbf21e8cf6e6ed2b",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/b8340014f252f10ca3462245ff92acc8344a6d67/src/main/c/hdr_histogram_log.c#L101",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 3a43a58..836af96 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -125,59 +125,84 @@\n     return 0;\n }\n \n-// To prevent exporting the symbol, i.e. visible for testing.\n-void base64_encode(const uint8_t* buf, int length, FILE* f);\n+// Prototypes to avoid exporting in header file.\n+void base64_encode_block(const uint8_t* input, char* output);\n+int base64_encode(\n+    const uint8_t* input, size_t input_len, char* output, size_t output_len);\n \n-bool assert_base64_encode(const char* in, int len, const char* expected)\n+void base64_decode_block(const char* input, uint8_t* output);\n+int base64_decode(\n+    const char* input, size_t input_len, uint8_t* output, size_t output_len);\n+\n+static bool assert_base64_encode(const char* input, const char* expected)\n {\n-    const char* file_name \u003d \"/tmp/foo\";\n-    FILE* fw \u003d fopen(file_name, \"w+\");\n+    int input_len \u003d strlen(input);\n+    int output_len \u003d ceil((input_len / 3.0) * 4.0);\n \n-    base64_encode((const uint8_t*) in, len, fw);\n+    char* output \u003d calloc(sizeof(char), output_len);\n \n-    fflush(fw);\n+    int r \u003d base64_encode((uint8_t*)input, input_len, output, output_len);\n+    bool result \u003d r \u003d\u003d 0 \u0026\u0026 compare_string(expected, output, output_len);\n \n-    int num_bytes \u003d (int) ftell(fw);\n-\n-    rewind(fw);\n-\n-    char* output \u003d (char*) calloc(num_bytes + 1, sizeof(char));\n-\n-    fgets(output, num_bytes + 1, fw);\n-\n-    bool result \u003d strncmp(expected, output, strlen(expected)) \u003d\u003d 0;\n-\n-    fclose(fw);\n-    remove(file_name);\n     free(output);\n \n     return result;\n }\n \n-static char* test_encode_to_base64()\n+static char* base64_encode_encodes_without_padding()\n {\n-    mu_assert(\"Encoding 3 bytes\", assert_base64_encode(\"Man\", 3, \"TWFu\"));\n-    mu_assert(\"Encoding with padding \u0027\u003d\u0027\",\n-              assert_base64_encode(\"any carnal pleasure.\", 20, \"YW55IGNhcm5hbCBwbGVhc3VyZS4\u003d\"));\n-    mu_assert(\"Encoding with padding \u0027\u003d\u003d\u0027\",\n-              assert_base64_encode(\"any carnal pleasure\",  19, \"YW55IGNhcm5hbCBwbGVhc3VyZQ\u003d\u003d\"));\n-    mu_assert(\"Encoding without padding\",\n-              assert_base64_encode(\"any carnal pleasur\", 18, \"YW55IGNhcm5hbCBwbGVhc3Vy\"));\n+    mu_assert(\n+        \"Encoding without padding\",\n+        assert_base64_encode(\n+            \"any carnal pleasur\",\n+            \"YW55IGNhcm5hbCBwbGVhc3Vy\"));\n \n     return 0;\n }\n \n-// Prototype to avoid exporting in header file.\n-int base64_decode_block(const char* input, uint8_t* output);\n+static char* base64_encode_encodes_with_padding()\n+{\n+    mu_assert(\n+        \"Encoding with padding \u0027\u003d\u0027\",\n+        assert_base64_encode(\n+            \"any carnal pleasure.\",\n+            \"YW55IGNhcm5hbCBwbGVhc3VyZS4\u003d\"));\n+    mu_assert(\n+        \"Encoding with padding \u0027\u003d\u003d\u0027\",\n+        assert_base64_encode(\n+            \"any carnal pleasure\",\n+            \"YW55IGNhcm5hbCBwbGVhc3VyZQ\u003d\u003d\"));\n \n-bool assert_base64_decode_block(const char* input, const char* expected)\n+    return 0;\n+}\n+\n+\n+static bool assert_base64_encode_block(const char* input, const char* expected)\n+{\n+    char output[5];\n+    output[4] \u003d \u0027\\0\u0027;\n+\n+    base64_encode_block((uint8_t*)input, output);\n+\n+    return compare_string(expected, output, 4);\n+}\n+\n+static char* base64_encode_block_encodes_3_bytes()\n+{\n+    mu_assert(\"Encoding\", assert_base64_encode_block(\"Man\", \"TWFu\"));\n+\n+    return 0;\n+}\n+\n+\n+static bool assert_base64_decode_block(const char* input, const char* expected)\n {\n     uint8_t output[4];\n     output[3] \u003d \u0027\\0\u0027;\n \n-    int result \u003d base64_decode_block(input, output);\n+    base64_decode_block(input, output);\n \n-    return result \u003d\u003d 0 \u0026\u0026 compare_string(expected, (char*) output, 3);\n+    return compare_string(expected, (char*) output, 3);\n }\n \n \n@@ -188,10 +213,7 @@\n     return 0;\n }\n \n-// To prevent exporting the symbol, i.e. visible for testing.\n-int base64_decode(const char* input, size_t input_len, uint8_t* output, size_t output_len);\n-\n-bool assert_base64_decode(const char* base64_encoded, const char* expected)\n+static bool assert_base64_decode(const char* base64_encoded, const char* expected)\n {\n     int encoded_len \u003d strlen(base64_encoded);\n     int output_len \u003d (encoded_len / 4) * 3;\n@@ -206,19 +228,27 @@\n static char* base64_decode_decodes_strings_without_padding()\n {\n     mu_assert(\n-            \"Encoding without padding\",\n-            assert_base64_decode(\"YW55IGNhcm5hbCBwbGVhc3Vy\", \"any carnal pleasur\"));\n+        \"Encoding without padding\",\n+        assert_base64_decode(\n+            \"YW55IGNhcm5hbCBwbGVhc3Vy\",\n+            \"any carnal pleasur\"));\n+\n     return 0;\n }\n \n static char* base64_decode_decodes_strings_with_padding()\n {\n     mu_assert(\n-            \"Encoding with padding \u0027\u003d\u0027\",\n-            assert_base64_decode(\"YW55IGNhcm5hbCBwbGVhc3VyZS4\u003d\", \"any carnal pleasure.\"));\n+        \"Encoding with padding \u0027\u003d\u0027\",\n+        assert_base64_decode(\n+            \"YW55IGNhcm5hbCBwbGVhc3VyZS4\u003d\",\n+            \"any carnal pleasure.\"));\n+\n     mu_assert(\n-            \"Encoding with padding \u0027\u003d\u003d\u0027\",\n-            assert_base64_decode(\"YW55IGNhcm5hbCBwbGVhc3VyZQ\u003d\u003d\", \"any carnal pleasure\"));\n+        \"Encoding with padding \u0027\u003d\u003d\u0027\",\n+        assert_base64_decode(\n+            \"YW55IGNhcm5hbCBwbGVhc3VyZQ\u003d\u003d\",\n+            \"any carnal pleasure\"));\n \n     return 0;\n }\n@@ -251,11 +281,16 @@\n \n     mu_run_test(test_encode_and_decode);\n     mu_run_test(test_encode_and_decode_compressed);\n-    mu_run_test(test_encode_to_base64);\n+\n     mu_run_test(base64_decode_block_decodes_4_chars);\n     mu_run_test(base64_decode_fails_with_invalid_lengths);\n     mu_run_test(base64_decode_decodes_strings_without_padding);\n     mu_run_test(base64_decode_decodes_strings_with_padding);\n+\n+    mu_run_test(base64_encode_block_encodes_3_bytes);\n+    mu_run_test(base64_encode_encodes_without_padding);\n+    mu_run_test(base64_encode_encodes_with_padding);\n+\n     mu_run_test(test_parse_log);\n \n     mu_ok;\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "%ld in format string (no. 3) requires \u0027long\u0027 but the argument type is \u0027signed long long\u0027.",
    "cwe": "686",
    "hashId": "81e32516b4a467ac69ab725bb77236f220c6ea412558ac31c8001e65b879047a",
    "toolName": "cppcheck",
    "warningMessage": "%ld in format string (no. 3) requires \u0027long\u0027 but the argument type is \u0027signed long long\u0027.",
    "warningSeverity": "warning",
    "warningType": "invalidPrintfArgType_sint",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "571",
    "columnNumber": "5",
    "commitId": "70586bf869c28f81b4856fd93274db0e686e0ccb",
    "commitChildId": "7b9567456207b24ff4091a8530cfd6c594c9f72a",
    "commitTitle": "[C] Add and tidy up base64 decode tests.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/7b9567456207b24ff4091a8530cfd6c594c9f72a",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/70586bf869c28f81b4856fd93274db0e686e0ccb/src/main/c/hdr_histogram_log.c#L571",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 2951b3c..3a43a58 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -168,26 +168,28 @@\n }\n \n // Prototype to avoid exporting in header file.\n-int base64_decode_block(char* input, uint8_t* output);\n+int base64_decode_block(const char* input, uint8_t* output);\n \n bool assert_base64_decode_block(const char* input, const char* expected)\n {\n     uint8_t output[4];\n     output[3] \u003d \u0027\\0\u0027;\n \n-    int result \u003d base64_decode_block(input, \u0026output);\n+    int result \u003d base64_decode_block(input, output);\n \n     return result \u003d\u003d 0 \u0026\u0026 compare_string(expected, (char*) output, 3);\n }\n \n \n-static char* test_base64_decode_block()\n+static char* base64_decode_block_decodes_4_chars()\n {\n     mu_assert(\"Decoding\", assert_base64_decode_block(\"TWFu\", \"Man\"));\n+\n+    return 0;\n }\n \n // To prevent exporting the symbol, i.e. visible for testing.\n-int base64_decode(char* input, size_t input_len, uint8_t* output, size_t output_len);\n+int base64_decode(const char* input, size_t input_len, uint8_t* output, size_t output_len);\n \n bool assert_base64_decode(const char* base64_encoded, const char* expected)\n {\n@@ -198,14 +200,19 @@\n \n     int result \u003d base64_decode(base64_encoded, encoded_len, output, output_len);\n \n-    return result \u003d\u003d 0 \u0026\u0026 compare_string(expected, output, output_len);\n+    return result \u003d\u003d 0 \u0026\u0026 compare_string(expected, (char*)output, output_len);\n }\n \n-static char* test_decode_from_base64()\n+static char* base64_decode_decodes_strings_without_padding()\n {\n     mu_assert(\n             \"Encoding without padding\",\n             assert_base64_decode(\"YW55IGNhcm5hbCBwbGVhc3Vy\", \"any carnal pleasur\"));\n+    return 0;\n+}\n+\n+static char* base64_decode_decodes_strings_with_padding()\n+{\n     mu_assert(\n             \"Encoding with padding \u0027\u003d\u0027\",\n             assert_base64_decode(\"YW55IGNhcm5hbCBwbGVhc3VyZS4\u003d\", \"any carnal pleasure.\"));\n@@ -216,12 +223,23 @@\n     return 0;\n }\n \n+static char* base64_decode_fails_with_invalid_lengths()\n+{\n+    mu_assert(\n+        \"Input length not multiple of 4\",\n+        base64_decode(NULL, 5, NULL, 3) !\u003d 0);\n+    mu_assert(\"Input length \u003c 4\", base64_decode(NULL, 3, NULL, 3) !\u003d 0);\n+    mu_assert(\"Output length \u003c 3\", base64_decode(NULL, 5, NULL, 2) !\u003d 0);\n+\n+    return 0;\n+}\n+\n static char* test_parse_log()\n {\n     struct hdr_histogram* h;\n     FILE* log_file \u003d fopen(\"src/test/resources/hiccup.140623.1028.10646.hlog\", \"r\");\n \n-    int result \u003d hdr_parse_log(log_file, \u0026h);\n+    hdr_parse_log(log_file, \u0026h);\n \n     return 0;\n }\n@@ -234,8 +252,10 @@\n     mu_run_test(test_encode_and_decode);\n     mu_run_test(test_encode_and_decode_compressed);\n     mu_run_test(test_encode_to_base64);\n-    mu_run_test(test_base64_decode_block);\n-    mu_run_test(test_decode_from_base64);\n+    mu_run_test(base64_decode_block_decodes_4_chars);\n+    mu_run_test(base64_decode_fails_with_invalid_lengths);\n+    mu_run_test(base64_decode_decodes_strings_without_padding);\n+    mu_run_test(base64_decode_decodes_strings_with_padding);\n     mu_run_test(test_parse_log);\n \n     mu_ok;\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027result\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "7dcc042d279fc904d9ebbce392f3d263a1fc2fc228a6b58953f06b8f8b0ed482",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027result\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_log_test.c",
    "lineNumber": "224",
    "columnNumber": "16",
    "commitId": "70586bf869c28f81b4856fd93274db0e686e0ccb",
    "commitChildId": "7b9567456207b24ff4091a8530cfd6c594c9f72a",
    "commitTitle": "[C] Add and tidy up base64 decode tests.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/7b9567456207b24ff4091a8530cfd6c594c9f72a",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/70586bf869c28f81b4856fd93274db0e686e0ccb/src/test/c/hdr_histogram_log_test.c#L224",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 2951b3c..3a43a58 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -168,26 +168,28 @@\n }\n \n // Prototype to avoid exporting in header file.\n-int base64_decode_block(char* input, uint8_t* output);\n+int base64_decode_block(const char* input, uint8_t* output);\n \n bool assert_base64_decode_block(const char* input, const char* expected)\n {\n     uint8_t output[4];\n     output[3] \u003d \u0027\\0\u0027;\n \n-    int result \u003d base64_decode_block(input, \u0026output);\n+    int result \u003d base64_decode_block(input, output);\n \n     return result \u003d\u003d 0 \u0026\u0026 compare_string(expected, (char*) output, 3);\n }\n \n \n-static char* test_base64_decode_block()\n+static char* base64_decode_block_decodes_4_chars()\n {\n     mu_assert(\"Decoding\", assert_base64_decode_block(\"TWFu\", \"Man\"));\n+\n+    return 0;\n }\n \n // To prevent exporting the symbol, i.e. visible for testing.\n-int base64_decode(char* input, size_t input_len, uint8_t* output, size_t output_len);\n+int base64_decode(const char* input, size_t input_len, uint8_t* output, size_t output_len);\n \n bool assert_base64_decode(const char* base64_encoded, const char* expected)\n {\n@@ -198,14 +200,19 @@\n \n     int result \u003d base64_decode(base64_encoded, encoded_len, output, output_len);\n \n-    return result \u003d\u003d 0 \u0026\u0026 compare_string(expected, output, output_len);\n+    return result \u003d\u003d 0 \u0026\u0026 compare_string(expected, (char*)output, output_len);\n }\n \n-static char* test_decode_from_base64()\n+static char* base64_decode_decodes_strings_without_padding()\n {\n     mu_assert(\n             \"Encoding without padding\",\n             assert_base64_decode(\"YW55IGNhcm5hbCBwbGVhc3Vy\", \"any carnal pleasur\"));\n+    return 0;\n+}\n+\n+static char* base64_decode_decodes_strings_with_padding()\n+{\n     mu_assert(\n             \"Encoding with padding \u0027\u003d\u0027\",\n             assert_base64_decode(\"YW55IGNhcm5hbCBwbGVhc3VyZS4\u003d\", \"any carnal pleasure.\"));\n@@ -216,12 +223,23 @@\n     return 0;\n }\n \n+static char* base64_decode_fails_with_invalid_lengths()\n+{\n+    mu_assert(\n+        \"Input length not multiple of 4\",\n+        base64_decode(NULL, 5, NULL, 3) !\u003d 0);\n+    mu_assert(\"Input length \u003c 4\", base64_decode(NULL, 3, NULL, 3) !\u003d 0);\n+    mu_assert(\"Output length \u003c 3\", base64_decode(NULL, 5, NULL, 2) !\u003d 0);\n+\n+    return 0;\n+}\n+\n static char* test_parse_log()\n {\n     struct hdr_histogram* h;\n     FILE* log_file \u003d fopen(\"src/test/resources/hiccup.140623.1028.10646.hlog\", \"r\");\n \n-    int result \u003d hdr_parse_log(log_file, \u0026h);\n+    hdr_parse_log(log_file, \u0026h);\n \n     return 0;\n }\n@@ -234,8 +252,10 @@\n     mu_run_test(test_encode_and_decode);\n     mu_run_test(test_encode_and_decode_compressed);\n     mu_run_test(test_encode_to_base64);\n-    mu_run_test(test_base64_decode_block);\n-    mu_run_test(test_decode_from_base64);\n+    mu_run_test(base64_decode_block_decodes_4_chars);\n+    mu_run_test(base64_decode_fails_with_invalid_lengths);\n+    mu_run_test(base64_decode_decodes_strings_without_padding);\n+    mu_run_test(base64_decode_decodes_strings_with_padding);\n     mu_run_test(test_parse_log);\n \n     mu_ok;\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Buffer is accessed out of bounds: read_buf",
    "cwe": "788",
    "info": "Buffer overrun",
    "hashId": "cda6cf745459032e1cbcbf1cbc5402ac7233bffb900ff5556af31de984d360ae",
    "toolName": "cppcheck",
    "warningMessage": "Buffer is accessed out of bounds: read_buf",
    "warningSeverity": "error",
    "warningType": "bufferAccessOutOfBounds",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "137",
    "columnNumber": "27",
    "commitId": "bddc5ffa1e0360c4d12e58c27b8e795f102878c6",
    "commitChildId": "cebc1399722da2dddcc157501a891e53b12c75ab",
    "commitTitle": "[C] Add base64 decode functions.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/cebc1399722da2dddcc157501a891e53b12c75ab",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/bddc5ffa1e0360c4d12e58c27b8e795f102878c6/src/main/c/hdr_histogram_log.c#L137",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 19ef2ab..492d49b 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -16,6 +16,17 @@\n #include \u003chdr_histogram_log.h\u003e\n #include \"minunit.h\"\n \n+static bool compare_string(const char* a, const char* b, int len)\n+{\n+    if (strncmp(a, b, len) \u003d\u003d 0)\n+    {\n+        return true;\n+    }\n+\n+    printf(\"%s !\u003d %s\\n\", a, b);\n+    return false;\n+}\n+\n static struct hdr_histogram* raw_histogram \u003d NULL;\n static struct hdr_histogram* cor_histogram \u003d NULL;\n \n@@ -156,35 +167,51 @@\n     return 0;\n }\n \n+// Prototype to avoid exporting in header file.\n+int base64_decode_block(char* input, uint8_t* output);\n+\n+bool assert_base64_decode_block(const char* input, const char* expected)\n+{\n+    uint8_t output[4];\n+    output[3] \u003d \u0027\\0\u0027;\n+\n+    int result \u003d base64_decode_block(input, \u0026output);\n+\n+    return result \u003d\u003d 0 \u0026\u0026 compare_string(expected, (char*) output, 3);\n+}\n+\n+\n+static char* test_base64_decode_block()\n+{\n+    mu_assert(\"Decoding\", assert_base64_decode_block(\"TWFu\", \"Man\"));\n+}\n+\n // To prevent exporting the symbol, i.e. visible for testing.\n-void base64_decode(uint8_t* buf, int length, uint8_t term, FILE* f);\n+int base64_decode(char* input, size_t input_len, uint8_t* output, size_t output_len);\n \n bool assert_base64_decode(const char* base64_encoded, const char* expected)\n {\n-    const char* file_name \u003d \"/tmp/foo\";\n-    size_t expected_len \u003d strlen(expected);\n+    int encoded_len \u003d strlen(base64_encoded);\n+    int output_len \u003d (encoded_len / 4) * 3;\n \n-    FILE* fw \u003d fopen(file_name, \"w+\");\n-    fputs(base64_encoded, fw);\n-    fflush(fw);\n-    rewind(fw);\n+    uint8_t* output \u003d calloc(sizeof(uint8_t), output_len);\n \n-    uint8_t* output \u003d (uint8_t*) calloc(expected_len, sizeof(uint8_t));\n+    int result \u003d base64_decode(base64_encoded, encoded_len, output, output_len);\n \n-    base64_decode(output, expected_len, \u0027\\n\u0027, fw);\n-\n-    bool result \u003d strncmp((const char*) expected, (const char*) output, expected_len) \u003d\u003d 0;\n-\n-    fclose(fw);\n-    remove(file_name);\n-    free(output);\n-\n-    return result;\n+    return result \u003d\u003d 0 \u0026\u0026 compare_string(expected, output, output_len);\n }\n \n static char* test_decode_from_base64()\n {\n-    mu_assert(\"Decoding 3 bytes\", assert_base64_decode(\"TWFu\", \"Man\"));\n+    mu_assert(\n+            \"Encoding without padding\",\n+            assert_base64_decode(\"YW55IGNhcm5hbCBwbGVhc3Vy\", \"any carnal pleasur\"));\n+    mu_assert(\n+            \"Encoding with padding \u0027\u003d\u0027\",\n+            assert_base64_decode(\"YW55IGNhcm5hbCBwbGVhc3VyZS4\u003d\", \"any carnal pleasure.\"));\n+    mu_assert(\n+            \"Encoding with padding \u0027\u003d\u003d\u0027\",\n+            assert_base64_decode(\"YW55IGNhcm5hbCBwbGVhc3VyZQ\u003d\u003d\", \"any carnal pleasure\"));\n \n     return 0;\n }\n@@ -197,7 +224,8 @@\n     mu_run_test(test_encode_and_decode);\n     mu_run_test(test_encode_and_decode_compressed);\n     mu_run_test(test_encode_to_base64);\n-    //mu_run_test(test_decode_from_base64);\n+    mu_run_test(test_base64_decode_block);\n+    mu_run_test(test_decode_from_base64);\n \n     mu_ok;\n }\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027_24_bit_value\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "7d9742ecf800f21b2a1eb88f39c3d84791b9f3e1c9e3a5583858a0eff6f02883",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027_24_bit_value\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "157",
    "columnNumber": "23",
    "commitId": "bddc5ffa1e0360c4d12e58c27b8e795f102878c6",
    "commitChildId": "cebc1399722da2dddcc157501a891e53b12c75ab",
    "commitTitle": "[C] Add base64 decode functions.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/cebc1399722da2dddcc157501a891e53b12c75ab",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/bddc5ffa1e0360c4d12e58c27b8e795f102878c6/src/main/c/hdr_histogram_log.c#L157",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 19ef2ab..492d49b 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -16,6 +16,17 @@\n #include \u003chdr_histogram_log.h\u003e\n #include \"minunit.h\"\n \n+static bool compare_string(const char* a, const char* b, int len)\n+{\n+    if (strncmp(a, b, len) \u003d\u003d 0)\n+    {\n+        return true;\n+    }\n+\n+    printf(\"%s !\u003d %s\\n\", a, b);\n+    return false;\n+}\n+\n static struct hdr_histogram* raw_histogram \u003d NULL;\n static struct hdr_histogram* cor_histogram \u003d NULL;\n \n@@ -156,35 +167,51 @@\n     return 0;\n }\n \n+// Prototype to avoid exporting in header file.\n+int base64_decode_block(char* input, uint8_t* output);\n+\n+bool assert_base64_decode_block(const char* input, const char* expected)\n+{\n+    uint8_t output[4];\n+    output[3] \u003d \u0027\\0\u0027;\n+\n+    int result \u003d base64_decode_block(input, \u0026output);\n+\n+    return result \u003d\u003d 0 \u0026\u0026 compare_string(expected, (char*) output, 3);\n+}\n+\n+\n+static char* test_base64_decode_block()\n+{\n+    mu_assert(\"Decoding\", assert_base64_decode_block(\"TWFu\", \"Man\"));\n+}\n+\n // To prevent exporting the symbol, i.e. visible for testing.\n-void base64_decode(uint8_t* buf, int length, uint8_t term, FILE* f);\n+int base64_decode(char* input, size_t input_len, uint8_t* output, size_t output_len);\n \n bool assert_base64_decode(const char* base64_encoded, const char* expected)\n {\n-    const char* file_name \u003d \"/tmp/foo\";\n-    size_t expected_len \u003d strlen(expected);\n+    int encoded_len \u003d strlen(base64_encoded);\n+    int output_len \u003d (encoded_len / 4) * 3;\n \n-    FILE* fw \u003d fopen(file_name, \"w+\");\n-    fputs(base64_encoded, fw);\n-    fflush(fw);\n-    rewind(fw);\n+    uint8_t* output \u003d calloc(sizeof(uint8_t), output_len);\n \n-    uint8_t* output \u003d (uint8_t*) calloc(expected_len, sizeof(uint8_t));\n+    int result \u003d base64_decode(base64_encoded, encoded_len, output, output_len);\n \n-    base64_decode(output, expected_len, \u0027\\n\u0027, fw);\n-\n-    bool result \u003d strncmp((const char*) expected, (const char*) output, expected_len) \u003d\u003d 0;\n-\n-    fclose(fw);\n-    remove(file_name);\n-    free(output);\n-\n-    return result;\n+    return result \u003d\u003d 0 \u0026\u0026 compare_string(expected, output, output_len);\n }\n \n static char* test_decode_from_base64()\n {\n-    mu_assert(\"Decoding 3 bytes\", assert_base64_decode(\"TWFu\", \"Man\"));\n+    mu_assert(\n+            \"Encoding without padding\",\n+            assert_base64_decode(\"YW55IGNhcm5hbCBwbGVhc3Vy\", \"any carnal pleasur\"));\n+    mu_assert(\n+            \"Encoding with padding \u0027\u003d\u0027\",\n+            assert_base64_decode(\"YW55IGNhcm5hbCBwbGVhc3VyZS4\u003d\", \"any carnal pleasure.\"));\n+    mu_assert(\n+            \"Encoding with padding \u0027\u003d\u003d\u0027\",\n+            assert_base64_decode(\"YW55IGNhcm5hbCBwbGVhc3VyZQ\u003d\u003d\", \"any carnal pleasure\"));\n \n     return 0;\n }\n@@ -197,7 +224,8 @@\n     mu_run_test(test_encode_and_decode);\n     mu_run_test(test_encode_and_decode_compressed);\n     mu_run_test(test_encode_to_base64);\n-    //mu_run_test(test_decode_from_base64);\n+    mu_run_test(test_base64_decode_block);\n+    mu_run_test(test_decode_from_base64);\n \n     mu_ok;\n }\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Returning/dereferencing \u0027output\u0027 after it is deallocated / released",
    "cwe": "672",
    "hashId": "a91e38be3f85b363bffee96c5281a10e2faaa7c678f1ad9aa098c4d35f77f98a",
    "toolName": "cppcheck",
    "warningMessage": "Returning/dereferencing \u0027output\u0027 after it is deallocated / released",
    "warningSeverity": "error",
    "warningType": "deallocret",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_log_test.c",
    "lineNumber": "143",
    "columnNumber": "5",
    "commitId": "3a7aa521e43bb18a14278272a49648ea21a745dc",
    "commitChildId": "41c39e72a3212c5e27126d0e09c813c3079437d2",
    "commitTitle": "[C] More base64 encoding changes.  Use calloc instead of malloc in few places to simplify the code.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/41c39e72a3212c5e27126d0e09c813c3079437d2",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/3a7aa521e43bb18a14278272a49648ea21a745dc/src/test/c/hdr_histogram_log_test.c#L143",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 1f54144..19ef2ab 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -130,17 +130,17 @@\n \n     rewind(fw);\n \n-    char* output \u003d (char*) malloc(sizeof(char) * (num_bytes + 1));\n-    memset(output, 0, num_bytes + 1);\n+    char* output \u003d (char*) calloc(num_bytes + 1, sizeof(char));\n \n     fgets(output, num_bytes + 1, fw);\n \n+    bool result \u003d strncmp(expected, output, strlen(expected)) \u003d\u003d 0;\n+\n     fclose(fw);\n     remove(file_name);\n-\n     free(output);\n \n-    return strncmp(expected, output, strlen(expected)) \u003d\u003d 0;\n+    return result;\n }\n \n static char* test_encode_to_base64()\n@@ -156,6 +156,40 @@\n     return 0;\n }\n \n+// To prevent exporting the symbol, i.e. visible for testing.\n+void base64_decode(uint8_t* buf, int length, uint8_t term, FILE* f);\n+\n+bool assert_base64_decode(const char* base64_encoded, const char* expected)\n+{\n+    const char* file_name \u003d \"/tmp/foo\";\n+    size_t expected_len \u003d strlen(expected);\n+\n+    FILE* fw \u003d fopen(file_name, \"w+\");\n+    fputs(base64_encoded, fw);\n+    fflush(fw);\n+    rewind(fw);\n+\n+    uint8_t* output \u003d (uint8_t*) calloc(expected_len, sizeof(uint8_t));\n+\n+    base64_decode(output, expected_len, \u0027\\n\u0027, fw);\n+\n+    bool result \u003d strncmp((const char*) expected, (const char*) output, expected_len) \u003d\u003d 0;\n+\n+    fclose(fw);\n+    remove(file_name);\n+    free(output);\n+\n+    return result;\n+}\n+\n+static char* test_decode_from_base64()\n+{\n+    mu_assert(\"Decoding 3 bytes\", assert_base64_decode(\"TWFu\", \"Man\"));\n+\n+    return 0;\n+}\n+\n+\n static struct mu_result all_tests()\n {\n     tests_run \u003d 0;\n@@ -163,6 +197,7 @@\n     mu_run_test(test_encode_and_decode);\n     mu_run_test(test_encode_and_decode_compressed);\n     mu_run_test(test_encode_to_base64);\n+    //mu_run_test(test_decode_from_base64);\n \n     mu_ok;\n }\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Returning/dereferencing \u0027output\u0027 after it is deallocated / released",
    "cwe": "672",
    "hashId": "a91e38be3f85b363bffee96c5281a10e2faaa7c678f1ad9aa098c4d35f77f98a",
    "toolName": "cppcheck",
    "warningMessage": "Returning/dereferencing \u0027output\u0027 after it is deallocated / released",
    "warningSeverity": "error",
    "warningType": "deallocret",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_log_test.c",
    "lineNumber": "141",
    "columnNumber": "5",
    "commitId": "3a7aa521e43bb18a14278272a49648ea21a745dc",
    "commitChildId": "41c39e72a3212c5e27126d0e09c813c3079437d2",
    "commitTitle": "[C] More base64 encoding changes.  Use calloc instead of malloc in few places to simplify the code.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/41c39e72a3212c5e27126d0e09c813c3079437d2",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/3a7aa521e43bb18a14278272a49648ea21a745dc/src/test/c/hdr_histogram_log_test.c#L141",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 1f54144..19ef2ab 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -130,17 +130,17 @@\n \n     rewind(fw);\n \n-    char* output \u003d (char*) malloc(sizeof(char) * (num_bytes + 1));\n-    memset(output, 0, num_bytes + 1);\n+    char* output \u003d (char*) calloc(num_bytes + 1, sizeof(char));\n \n     fgets(output, num_bytes + 1, fw);\n \n+    bool result \u003d strncmp(expected, output, strlen(expected)) \u003d\u003d 0;\n+\n     fclose(fw);\n     remove(file_name);\n-\n     free(output);\n \n-    return strncmp(expected, output, strlen(expected)) \u003d\u003d 0;\n+    return result;\n }\n \n static char* test_encode_to_base64()\n@@ -156,6 +156,40 @@\n     return 0;\n }\n \n+// To prevent exporting the symbol, i.e. visible for testing.\n+void base64_decode(uint8_t* buf, int length, uint8_t term, FILE* f);\n+\n+bool assert_base64_decode(const char* base64_encoded, const char* expected)\n+{\n+    const char* file_name \u003d \"/tmp/foo\";\n+    size_t expected_len \u003d strlen(expected);\n+\n+    FILE* fw \u003d fopen(file_name, \"w+\");\n+    fputs(base64_encoded, fw);\n+    fflush(fw);\n+    rewind(fw);\n+\n+    uint8_t* output \u003d (uint8_t*) calloc(expected_len, sizeof(uint8_t));\n+\n+    base64_decode(output, expected_len, \u0027\\n\u0027, fw);\n+\n+    bool result \u003d strncmp((const char*) expected, (const char*) output, expected_len) \u003d\u003d 0;\n+\n+    fclose(fw);\n+    remove(file_name);\n+    free(output);\n+\n+    return result;\n+}\n+\n+static char* test_decode_from_base64()\n+{\n+    mu_assert(\"Decoding 3 bytes\", assert_base64_decode(\"TWFu\", \"Man\"));\n+\n+    return 0;\n+}\n+\n+\n static struct mu_result all_tests()\n {\n     tests_run \u003d 0;\n@@ -163,6 +197,7 @@\n     mu_run_test(test_encode_and_decode);\n     mu_run_test(test_encode_and_decode_compressed);\n     mu_run_test(test_encode_to_base64);\n+    //mu_run_test(test_decode_from_base64);\n \n     mu_ok;\n }\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "%ld in format string (no. 2) requires \u0027long\u0027 but the argument type is \u0027signed long long\u0027.",
    "cwe": "686",
    "hashId": "26961de75b05bdf191009752c960dc404c1899cf5650fd272b7cf852b91ebbdb",
    "toolName": "cppcheck",
    "warningMessage": "%ld in format string (no. 2) requires \u0027long\u0027 but the argument type is \u0027signed long long\u0027.",
    "warningSeverity": "warning",
    "warningType": "invalidPrintfArgType_sint",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram.c",
    "lineNumber": "555",
    "columnNumber": "9",
    "commitId": "44ac500d577c592764d2fb5035649a6826775faf",
    "commitChildId": "535a271b616f4d0f81ef58dd8813f3f2745db2d4",
    "commitTitle": "[C] Fix warning.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/535a271b616f4d0f81ef58dd8813f3f2745db2d4",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/44ac500d577c592764d2fb5035649a6826775faf/src/main/c/hdr_histogram.c#L555",
    "gitDiffText": "diff --git a/src/main/c/hdr_histogram.c b/src/main/c/hdr_histogram.c\nindex 1cd4f0e..070d340 100644\n--- a/src/main/c/hdr_histogram.c\n+++ b/src/main/c/hdr_histogram.c\n@@ -552,7 +552,7 @@\n         double max    \u003d hdr_max(h)    / value_scale;\n \n         fprintf(stream, \"#[Mean    \u003d %12.3f, StdDeviation   \u003d %12.3f]\\n\", mean, stddev);\n-        fprintf(stream, \"#[Max     \u003d %12.3f, Total count    \u003d %12ld]\\n\", max, h-\u003etotal_count);\n+        fprintf(stream, \"#[Max     \u003d %12.3f, Total count    \u003d %12lld]\\n\", max, h-\u003etotal_count);\n         fprintf(stream, \"#[Buckets \u003d %12d, SubBuckets     \u003d %12d]\\n\", h-\u003ebucket_count, h-\u003esub_bucket_count);\n     }\n \n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Local variable \u0027i\u0027 shadows outer variable",
    "cwe": "398",
    "info": "Shadow variable",
    "hashId": "bfc0a2e3ea0308190a1fd3a8bf833a34ca23c2691392a8a2372e38d8729950a1",
    "toolName": "cppcheck",
    "warningMessage": "Local variable \u0027i\u0027 shadows outer variable",
    "warningSeverity": "style",
    "warningType": "shadowVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "75",
    "columnNumber": "14",
    "commitId": "f5b7448be2050c277b1ccc908e15ce0abf415360",
    "commitChildId": "44ac500d577c592764d2fb5035649a6826775faf",
    "commitTitle": "[C] Add working base64 encode.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/44ac500d577c592764d2fb5035649a6826775faf",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/f5b7448be2050c277b1ccc908e15ce0abf415360/src/main/c/hdr_histogram_log.c#L75",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 4802fba..1f54144 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -130,7 +130,8 @@\n \n     rewind(fw);\n \n-    char* output \u003d (char*) malloc(sizeof(char) * num_bytes);\n+    char* output \u003d (char*) malloc(sizeof(char) * (num_bytes + 1));\n+    memset(output, 0, num_bytes + 1);\n \n     fgets(output, num_bytes + 1, fw);\n \n@@ -139,7 +140,7 @@\n \n     free(output);\n \n-    return strncmp(expected, output, num_bytes) \u003d\u003d 0;\n+    return strncmp(expected, output, strlen(expected)) \u003d\u003d 0;\n }\n \n static char* test_encode_to_base64()\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Local variable \u0027i\u0027 shadows outer variable",
    "cwe": "398",
    "info": "Shadowed declaration",
    "hashId": "bfc0a2e3ea0308190a1fd3a8bf833a34ca23c2691392a8a2372e38d8729950a1",
    "toolName": "cppcheck",
    "warningMessage": "Local variable \u0027i\u0027 shadows outer variable",
    "warningSeverity": "style",
    "warningType": "shadowVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram_log.c",
    "lineNumber": "63",
    "columnNumber": "9",
    "commitId": "f5b7448be2050c277b1ccc908e15ce0abf415360",
    "commitChildId": "44ac500d577c592764d2fb5035649a6826775faf",
    "commitTitle": "[C] Add working base64 encode.",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/44ac500d577c592764d2fb5035649a6826775faf",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/f5b7448be2050c277b1ccc908e15ce0abf415360/src/main/c/hdr_histogram_log.c#L63",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_log_test.c b/src/test/c/hdr_histogram_log_test.c\nindex 4802fba..1f54144 100644\n--- a/src/test/c/hdr_histogram_log_test.c\n+++ b/src/test/c/hdr_histogram_log_test.c\n@@ -130,7 +130,8 @@\n \n     rewind(fw);\n \n-    char* output \u003d (char*) malloc(sizeof(char) * num_bytes);\n+    char* output \u003d (char*) malloc(sizeof(char) * (num_bytes + 1));\n+    memset(output, 0, num_bytes + 1);\n \n     fgets(output, num_bytes + 1, fw);\n \n@@ -139,7 +140,7 @@\n \n     free(output);\n \n-    return strncmp(expected, output, num_bytes) \u003d\u003d 0;\n+    return strncmp(expected, output, strlen(expected)) \u003d\u003d 0;\n }\n \n static char* test_encode_to_base64()\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Signed integer overflow for expression \u0027ENCODING_COOKIE_BASE\u003c\u003c8\u0027.",
    "cwe": "190",
    "info": "Integer overflow",
    "hashId": "e5142914b667b7ac6347694ddeddfa6f583ade5f1ccc13b6d0cc39bb23a20d73",
    "toolName": "cppcheck",
    "warningMessage": "Signed integer overflow for expression \u0027ENCODING_COOKIE_BASE\u003c\u003c8\u0027.",
    "warningSeverity": "error",
    "warningType": "integerOverflow",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram.c",
    "lineNumber": "725",
    "columnNumber": "71",
    "commitId": "af87b2eb297dc96c040e17e1d0b02e5204017983",
    "commitChildId": "2a1e481d3033974aa30599b62164b2e4f2ffe516",
    "commitTitle": "[C] Add basic compressed encoding",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/2a1e481d3033974aa30599b62164b2e4f2ffe516",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/af87b2eb297dc96c040e17e1d0b02e5204017983/src/main/c/hdr_histogram.c#L725",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_test.c b/src/test/c/hdr_histogram_test.c\nindex 71e77f5..e119e75 100644\n--- a/src/test/c/hdr_histogram_test.c\n+++ b/src/test/c/hdr_histogram_test.c\n@@ -328,24 +328,24 @@\n {\n     load_histograms();\n \n-    size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n+    size_t raw_histogram_size \u003d hdr_get_memory_size(cor_histogram);\n \n-    char* buffer \u003d (char*) malloc(hdr_get_memory_size(raw_histogram));\n+    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(cor_histogram));\n \n-    size_t encode_result \u003d hdr_encode(raw_histogram, buffer, 0, raw_histogram_size);\n+    size_t encode_result \u003d hdr_encode(cor_histogram, buffer, raw_histogram_size);\n \n     mu_assert(\"Did not encode\", encode_result !\u003d 0);\n     mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n \n     struct hdr_histogram* loaded_histogram \u003d NULL;\n-    hdr_decode(buffer, 0, raw_histogram_size, \u0026loaded_histogram);\n+    hdr_decode(buffer, raw_histogram_size, \u0026loaded_histogram);\n \n-    int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n+    int compare_result \u003d memcmp(cor_histogram, loaded_histogram, raw_histogram_size);\n \n     if (compare_result !\u003d 0)\n     {\n-        char* a \u003d (char*) raw_histogram;\n-        char* b \u003d (char*) loaded_histogram;\n+        uint8_t* a \u003d (uint8_t*) cor_histogram;\n+        uint8_t* b \u003d (uint8_t*) loaded_histogram;\n         for (int i \u003d 0; i \u003c raw_histogram_size; i++)\n         {\n             if (a[i] !\u003d b[i])\n@@ -360,28 +360,35 @@\n     return 0;\n }\n \n-// static char* test_encode_and_decode_compressed()\n-// {\n-//     load_histograms();\n+static char* test_encode_and_decode_compressed()\n+{\n+    load_histograms();\n \n-//     size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n+    size_t raw_histogram_size \u003d hdr_get_memory_size(raw_histogram);\n \n-//     char* buffer \u003d (char*) malloc(hdr_get_memory_size(raw_histogram));\n+    uint8_t* buffer \u003d (uint8_t*) malloc(hdr_get_memory_size(raw_histogram));\n \n-//     size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, 0, raw_histogram_size);\n+    size_t encode_result \u003d hdr_encode_compressed(raw_histogram, buffer, raw_histogram_size);\n \n-//     mu_assert(\"Did not encode\", encode_result !\u003d 0);\n-//     mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n+    mu_assert(\"Did not encode\", encode_result !\u003d 0);\n+    mu_assert(\"Incorrect size\", encode_result \u003c\u003d raw_histogram_size);\n \n-//     struct hdr_histogram* loaded_histogram;\n-//     hdr_decode(buffer, 0, raw_histogram_size, \u0026loaded_histogram);\n+    struct hdr_histogram* loaded_histogram \u003d NULL;\n+    int decode_result \u003d hdr_decode_compressed(buffer, encode_result, \u0026loaded_histogram);\n \n-//     int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n+    if (decode_result !\u003d 0)\n+    {\n+        printf(\"%s\\n\", hdr_strerror(decode_result));\n+    }\n+    mu_assert(\"Did not decode\", decode_result \u003d\u003d 0);\n \n-//     mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+    mu_assert(\"Loaded histogram is null\", loaded_histogram !\u003d NULL);\n+    int compare_result \u003d memcmp(raw_histogram, loaded_histogram, raw_histogram_size);\n \n-//     return 0;\n-// }\n+    mu_assert(\"Comparison did not match\", compare_result \u003d\u003d 0);\n+\n+    return 0;\n+}\n \n static struct mu_result all_tests()\n {\n@@ -396,6 +403,7 @@\n     mu_run_test(test_logarithmic_values);\n     mu_run_test(test_reset);\n     mu_run_test(test_encode_and_decode);\n+    mu_run_test(test_encode_and_decode_compressed);\n \n     mu_ok;\n }\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Include file: \u003cstrings.h\u003e not found. Please note: Cppcheck does not need standard library headers to get proper results.",
    "hashId": "3725714026bef5a07f2534f24a0c9a58c3303a246a8b9ab5cb42355b57c938fc",
    "toolName": "cppcheck",
    "warningMessage": "Include file: \u003cstrings.h\u003e not found. Please note: Cppcheck does not need standard library headers to get proper results.",
    "warningSeverity": "information",
    "warningType": "missingIncludeSystem",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram.c",
    "lineNumber": "13",
    "columnNumber": "0",
    "commitId": "b48fa8438281157d3b6e54260a6fe3142b3e702e",
    "commitChildId": "27f286e47226d25d9abd029d4a5c7061a6b83047",
    "commitTitle": "[C] Add reset function to reset a histogram back to zero for reuse",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/27f286e47226d25d9abd029d4a5c7061a6b83047",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/b48fa8438281157d3b6e54260a6fe3142b3e702e/src/main/c/hdr_histogram.c#L13",
    "gitDiffText": "diff --git a/src/main/c/hdr_histogram.h b/src/main/c/hdr_histogram.h\nindex b9fe145..5055738 100644\n--- a/src/main/c/hdr_histogram.h\n+++ b/src/main/c/hdr_histogram.h\n@@ -53,6 +53,17 @@\n int hdr_alloc(int64_t highest_trackable_value, int significant_figures, struct hdr_histogram** result);\n \n /**\n+ * Reset a histogram to zero - empty out a histogram and re-initialise it\n+ * \n+ * If you want to re-use an existing histogram, but reset everthing back to zero, this \n+ * is the routine to use. \n+ * \n+ * @param h The histogram you want to reset to empty. \n+ * \n+ */\n+void hdr_reset(struct hdr_histogram *h);\n+\n+/**\n  * Record a value in the histogram.\n  *\n  * Records a value in the histogram, will round this value of to a precision at or better\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Signed integer overflow for expression \u002724*60*60*1000000\u0027.",
    "cwe": "190",
    "info": "Integer overflow",
    "hashId": "d69447a615698c006b7054646c359a1417f45bede51fd1a1ba8b972105785d0f",
    "toolName": "cppcheck",
    "warningMessage": "Signed integer overflow for expression \u002724*60*60*1000000\u0027.",
    "warningSeverity": "error",
    "warningType": "integerOverflow",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_perf.c",
    "lineNumber": "30",
    "columnNumber": "38",
    "commitId": "b619f348e840a42d935c4dfacbf852faff3653c9",
    "commitChildId": "6ef6d476f630fb0b1786348574cf5c149bde3e60",
    "commitTitle": "[C] Add optimisation flags and allow debug, optimisation and compiler to be set from the command line",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/6ef6d476f630fb0b1786348574cf5c149bde3e60",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/b619f348e840a42d935c4dfacbf852faff3653c9/src/test/c/hdr_histogram_perf.c#L30",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_perf.c b/src/test/c/hdr_histogram_perf.c\nindex b07d7f9..e61ae78 100644\n--- a/src/test/c/hdr_histogram_perf.c\n+++ b/src/test/c/hdr_histogram_perf.c\n@@ -27,7 +27,7 @@\n int main(int argc, char **argv)\n {\n     struct hdr_histogram* histogram;\n-    int64_t max_value \u003d 24 * 60 * 60 * 1000000;\n+    int64_t max_value \u003d 24 * 60 * 60 * 1000000L;\n     int result \u003d hdrh_alloc(max_value, 4, \u0026histogram);\n     if (result !\u003d 0)\n     {\n@@ -38,11 +38,12 @@\n     struct timespec t0;\n     struct timespec t1;\n     setlocale(LC_NUMERIC, \"\");\n+    int64_t iterations \u003d 400000000;\n \n     for (int i \u003d 0; i \u003c 100; i++)\n     {\n         clock_gettime(CLOCK_MONOTONIC_RAW, \u0026t0);\n-        for (int64_t j \u003d 1; j \u003c max_value; j++)\n+        for (int64_t j \u003d 1; j \u003c iterations; j++)\n         {\n             hdrh_record_value(histogram, j);\n         }\n@@ -51,7 +52,7 @@\n \n         struct timespec taken \u003d diff(t0, t1);\n         double time_taken \u003d taken.tv_sec + taken.tv_nsec / 1000000000.0;\n-        double ops_sec \u003d (max_value - 1) / time_taken;\n+        double ops_sec \u003d (iterations - 1) / time_taken;\n \n         printf(\"%s - %d, ops/sec: %\u0027.2f\\n\", \"Iteration\", i + 1, ops_sec);\n     }\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "int result is assigned to long long variable. If the variable is long long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long long, for example \u0027l \u003d a * b;\u0027 \u003d\u003e \u0027l \u003d (long long)a * b;\u0027.",
    "cwe": "197",
    "hashId": "1ffee9eab69ea73429b09eb906cf1ea870070daa883490ce040cfd9bc5439873",
    "toolName": "cppcheck",
    "warningMessage": "int result is assigned to long long variable. If the variable is long long to avoid loss of information, then you have loss of information.",
    "warningSeverity": "style",
    "warningType": "truncLongCastAssignment",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_perf.c",
    "lineNumber": "30",
    "columnNumber": "23",
    "commitId": "b619f348e840a42d935c4dfacbf852faff3653c9",
    "commitChildId": "6ef6d476f630fb0b1786348574cf5c149bde3e60",
    "commitTitle": "[C] Add optimisation flags and allow debug, optimisation and compiler to be set from the command line",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/6ef6d476f630fb0b1786348574cf5c149bde3e60",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/b619f348e840a42d935c4dfacbf852faff3653c9/src/test/c/hdr_histogram_perf.c#L30",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_perf.c b/src/test/c/hdr_histogram_perf.c\nindex b07d7f9..e61ae78 100644\n--- a/src/test/c/hdr_histogram_perf.c\n+++ b/src/test/c/hdr_histogram_perf.c\n@@ -27,7 +27,7 @@\n int main(int argc, char **argv)\n {\n     struct hdr_histogram* histogram;\n-    int64_t max_value \u003d 24 * 60 * 60 * 1000000;\n+    int64_t max_value \u003d 24 * 60 * 60 * 1000000L;\n     int result \u003d hdrh_alloc(max_value, 4, \u0026histogram);\n     if (result !\u003d 0)\n     {\n@@ -38,11 +38,12 @@\n     struct timespec t0;\n     struct timespec t1;\n     setlocale(LC_NUMERIC, \"\");\n+    int64_t iterations \u003d 400000000;\n \n     for (int i \u003d 0; i \u003c 100; i++)\n     {\n         clock_gettime(CLOCK_MONOTONIC_RAW, \u0026t0);\n-        for (int64_t j \u003d 1; j \u003c max_value; j++)\n+        for (int64_t j \u003d 1; j \u003c iterations; j++)\n         {\n             hdrh_record_value(histogram, j);\n         }\n@@ -51,7 +52,7 @@\n \n         struct timespec taken \u003d diff(t0, t1);\n         double time_taken \u003d taken.tv_sec + taken.tv_nsec / 1000000000.0;\n-        double ops_sec \u003d (max_value - 1) / time_taken;\n+        double ops_sec \u003d (iterations - 1) / time_taken;\n \n         printf(\"%s - %d, ops/sec: %\u0027.2f\\n\", \"Iteration\", i + 1, ops_sec);\n     }\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "Variable \u0027value\u0027 is assigned a value that is never used.",
    "cwe": "563",
    "hashId": "8ee0850311bd6cf1dd3a4bace45f4dd7dfba3e35aca944ad7ad073505c4d40c7",
    "toolName": "cppcheck",
    "warningMessage": "Variable \u0027value\u0027 is assigned a value that is never used.",
    "warningSeverity": "style",
    "warningType": "unreadVariable",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\test\\c\\hdr_histogram_test.c",
    "lineNumber": "109",
    "columnNumber": "18",
    "commitId": "74281a09fd439a80239548c069cf82ff1d835cef",
    "commitChildId": "1c241882a1d2abddf948d5c9fd673e260a8dc61b",
    "commitTitle": "[C] Fix warning",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/1c241882a1d2abddf948d5c9fd673e260a8dc61b",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/74281a09fd439a80239548c069cf82ff1d835cef/src/test/c/hdr_histogram_test.c#L109",
    "gitDiffText": "diff --git a/src/test/c/hdr_histogram_test.c b/src/test/c/hdr_histogram_test.c\nindex fe14076..b08666e 100644\n--- a/src/test/c/hdr_histogram_test.c\n+++ b/src/test/c/hdr_histogram_test.c\n@@ -106,7 +106,6 @@\n \n bool compare_percentile(int64_t a, double b, double variation)\n {\n-    double value \u003d (double) a;\n     return fabs(a - b) \u003c\u003d b * variation;\n }\n \n@@ -114,30 +113,30 @@\n {\n     load_histograms();\n \n-    mu_assert(\"Value at 30% not 1000.0\", \n+    mu_assert(\"Value at 30% not 1000.0\",\n               compare_percentile(hdr_histogram_value_at_percentile(raw_histogram, 30.0), 1000.0, 0.001));\n-    mu_assert(\"Value at 99% not 1000.0\", \n+    mu_assert(\"Value at 99% not 1000.0\",\n               compare_percentile(hdr_histogram_value_at_percentile(raw_histogram, 99.0), 1000.0, 0.001));\n-    mu_assert(\"Value at 99.99% not 1000.0\", \n+    mu_assert(\"Value at 99.99% not 1000.0\",\n               compare_percentile(hdr_histogram_value_at_percentile(raw_histogram, 99.99), 1000.0, 0.001));\n-    mu_assert(\"Value at 99.999% not 100000000.0\", \n+    mu_assert(\"Value at 99.999% not 100000000.0\",\n               compare_percentile(hdr_histogram_value_at_percentile(raw_histogram, 99.999), 100000000.0, 0.001));\n-    mu_assert(\"Value at 100% not 100000000.0\", \n+    mu_assert(\"Value at 100% not 100000000.0\",\n               compare_percentile(hdr_histogram_value_at_percentile(raw_histogram, 100.0), 100000000.0, 0.001));\n \n-    mu_assert(\"Value at 30% not 1000.0\", \n+    mu_assert(\"Value at 30% not 1000.0\",\n               compare_percentile(hdr_histogram_value_at_percentile(cor_histogram, 30.0), 1000.0, 0.001));\n-    mu_assert(\"Value at 50% not 1000.0\", \n+    mu_assert(\"Value at 50% not 1000.0\",\n               compare_percentile(hdr_histogram_value_at_percentile(cor_histogram, 50.0), 1000.0, 0.001));\n-    mu_assert(\"Value at 75% not 50000000.0\", \n+    mu_assert(\"Value at 75% not 50000000.0\",\n               compare_percentile(hdr_histogram_value_at_percentile(cor_histogram, 75.0), 50000000.0, 0.001));\n-    mu_assert(\"Value at 90% not 80000000.0\", \n+    mu_assert(\"Value at 90% not 80000000.0\",\n               compare_percentile(hdr_histogram_value_at_percentile(cor_histogram, 90.0), 80000000.0, 0.001));\n-    mu_assert(\"Value at 99% not 98000000.0\", \n+    mu_assert(\"Value at 99% not 98000000.0\",\n               compare_percentile(hdr_histogram_value_at_percentile(cor_histogram, 99.0), 98000000.0, 0.001));\n-    mu_assert(\"Value at 99.999% not 100000000.0\", \n+    mu_assert(\"Value at 99.999% not 100000000.0\",\n               compare_percentile(hdr_histogram_value_at_percentile(cor_histogram, 99.999), 100000000.0, 0.001));\n-    mu_assert(\"Value at 100% not 100000000.0\", \n+    mu_assert(\"Value at 100% not 100000000.0\",\n               compare_percentile(hdr_histogram_value_at_percentile(cor_histogram, 100.0), 100000000.0, 0.001));\n \n     return 0;\n"
  },
  {
    "cppcheck_version": "2.12.0",
    "verbose": "%ld in format string (no. 2) requires \u0027long\u0027 but the argument type is \u0027signed long long\u0027.",
    "cwe": "686",
    "hashId": "26961de75b05bdf191009752c960dc404c1899cf5650fd272b7cf852b91ebbdb",
    "toolName": "cppcheck",
    "warningMessage": "%ld in format string (no. 2) requires \u0027long\u0027 but the argument type is \u0027signed long long\u0027.",
    "warningSeverity": "warning",
    "warningType": "invalidPrintfArgType_sint",
    "filePath": "tmp_github\\HdrHistogram_c\\src\\main\\c\\hdr_histogram.c",
    "lineNumber": "423",
    "columnNumber": "5",
    "commitId": "6ced79db00caa90de4568006324d2c58b7e8b31e",
    "commitChildId": "74281a09fd439a80239548c069cf82ff1d835cef",
    "commitTitle": "[C] Fix warning",
    "githubFixLink": "https://github.com/HdrHistogram/HdrHistogram_c/commit/74281a09fd439a80239548c069cf82ff1d835cef",
    "warningTraceLink": "https://github.com/HdrHistogram/HdrHistogram_c/blob/6ced79db00caa90de4568006324d2c58b7e8b31e/src/main/c/hdr_histogram.c#L423",
    "gitDiffText": "diff --git a/src/main/c/hdr_histogram.c b/src/main/c/hdr_histogram.c\nindex 4402e1c..d04c6b0 100644\n--- a/src/main/c/hdr_histogram.c\n+++ b/src/main/c/hdr_histogram.c\n@@ -96,7 +96,7 @@\n \n static int64_t median_equivalent_value(struct hdr_histogram* h, int64_t value)\n {\n-    return lowest_equivalent_value(h, value) + (size_of_equivalent_value_range(h, value) \u003e\u003e 1);    \n+    return lowest_equivalent_value(h, value) + (size_of_equivalent_value_range(h, value) \u003e\u003e 1);\n }\n \n //////////////////////////////////// Memory ///////////////////////////////////\n@@ -273,7 +273,7 @@\n     double geometric_dev_total \u003d 0.0;\n \n     struct hdr_histogram_iter iter;\n-    hdr_histogram_iter_init(\u0026iter, h);    \n+    hdr_histogram_iter_init(\u0026iter, h);\n \n     while (hdr_histogram_iter_next(\u0026iter))\n     {\n@@ -296,7 +296,7 @@\n \n static bool has_next(struct hdr_histogram_iter* iter)\n {\n-    return iter-\u003ecount_to_index \u003c iter-\u003eh-\u003etotal_count;   \n+    return iter-\u003ecount_to_index \u003c iter-\u003eh-\u003etotal_count;\n }\n \n void hdr_histogram_iter_init(struct hdr_histogram_iter* itr, struct hdr_histogram* h)\n@@ -383,7 +383,7 @@\n \n             return true;\n         }\n-    } \n+    }\n     while (hdr_histogram_iter_next(\u0026percentiles-\u003eiter));\n \n     return true;\n@@ -420,7 +420,7 @@\n     double max    \u003d hdr_histogram_max(h)    / value_scale;\n \n     fprintf(stream, \"#[Mean    \u003d %12.3f, StdDeviation   \u003d %12.3f]\\n\", mean, stddev);\n-    fprintf(stream, \"#[Max     \u003d %12.3f, Total count    \u003d %12ld]\\n\", max, h-\u003etotal_count);\n+    fprintf(stream, \"#[Max     \u003d %12.3f, Total count    \u003d %12lld]\\n\", max, h-\u003etotal_count);\n     fprintf(stream, \"#[Buckets \u003d %12d, SubBuckets     \u003d %12d]\\n\", h-\u003ebucket_count, h-\u003esub_bucket_count);\n \n     fflush(stream);\n"
  }
]